
robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800a8d8  0800a8d8  0001a8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb4  0800adb4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800adb4  0800adb4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800adb4  0800adb4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adb4  0800adb4  0001adb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adb8  0800adb8  0001adb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800adbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001e0  0800af9c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  0800af9c  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc9b  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002987  00000000  00000000  0002fea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00032830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  000336f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c93  00000000  00000000  00034488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d71  00000000  00000000  0004e11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910d9  00000000  00000000  0005ee8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eff65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005260  00000000  00000000  000effb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a8bc 	.word	0x0800a8bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a8bc 	.word	0x0800a8bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	460c      	mov	r4, r1
 8001114:	4605      	mov	r5, r0
 8001116:	4621      	mov	r1, r4
 8001118:	4628      	mov	r0, r5
 800111a:	2200      	movs	r2, #0
 800111c:	2300      	movs	r3, #0
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_ADC1_Init+0x94>)
 8001192:	4a21      	ldr	r2, [pc, #132]	; (8001218 <MX_ADC1_Init+0x98>)
 8001194:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_ADC1_Init+0x94>)
 8001198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_ADC1_Init+0x94>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <MX_ADC1_Init+0x94>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_ADC1_Init+0x94>)
 80011ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_ADC1_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_ADC1_Init+0x94>)
 80011ba:	2202      	movs	r2, #2
 80011bc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011be:	4815      	ldr	r0, [pc, #84]	; (8001214 <MX_ADC1_Init+0x94>)
 80011c0:	f001 fc94 	bl	8002aec <HAL_ADC_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011ca:	f000 fed1 	bl	8001f70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011ce:	2304      	movs	r3, #4
 80011d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d2:	2301      	movs	r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011d6:	2307      	movs	r3, #7
 80011d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_ADC1_Init+0x94>)
 80011e0:	f001 fe4c 	bl	8002e7c <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f000 fec1 	bl	8001f70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011ee:	2308      	movs	r3, #8
 80011f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_ADC1_Init+0x94>)
 80011fc:	f001 fe3e 	bl	8002e7c <HAL_ADC_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001206:	f000 feb3 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000214 	.word	0x20000214
 8001218:	40012400 	.word	0x40012400

0800121c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a33      	ldr	r2, [pc, #204]	; (8001304 <HAL_ADC_MspInit+0xe8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d15f      	bne.n	80012fc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <HAL_ADC_MspInit+0xec>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a31      	ldr	r2, [pc, #196]	; (8001308 <HAL_ADC_MspInit+0xec>)
 8001242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <HAL_ADC_MspInit+0xec>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <HAL_ADC_MspInit+0xec>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <HAL_ADC_MspInit+0xec>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <HAL_ADC_MspInit+0xec>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_ADC_MspInit+0xec>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a25      	ldr	r2, [pc, #148]	; (8001308 <HAL_ADC_MspInit+0xec>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_ADC_MspInit+0xec>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001284:	2310      	movs	r3, #16
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001288:	2303      	movs	r3, #3
 800128a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	4619      	mov	r1, r3
 8001292:	481e      	ldr	r0, [pc, #120]	; (800130c <HAL_ADC_MspInit+0xf0>)
 8001294:	f002 fae8 	bl	8003868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001298:	2301      	movs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129c:	2303      	movs	r3, #3
 800129e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	4619      	mov	r1, r3
 80012a6:	481a      	ldr	r0, [pc, #104]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 80012a8:	f002 fade 	bl	8003868 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012ae:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <HAL_ADC_MspInit+0xfc>)
 80012b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012e2:	f002 f8d3 	bl	800348c <HAL_DMA_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80012ec:	f000 fe40 	bl	8001f70 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012f4:	621a      	str	r2, [r3, #32]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40012400 	.word	0x40012400
 8001308:	40021000 	.word	0x40021000
 800130c:	40010800 	.word	0x40010800
 8001310:	40010c00 	.word	0x40010c00
 8001314:	20000244 	.word	0x20000244
 8001318:	40020008 	.word	0x40020008

0800131c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_DMA_Init+0x48>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <MX_DMA_Init+0x48>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6153      	str	r3, [r2, #20]
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <MX_DMA_Init+0x48>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	200b      	movs	r0, #11
 8001340:	f002 f86d 	bl	800341e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001344:	200b      	movs	r0, #11
 8001346:	f002 f886 	bl	8003456 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	200d      	movs	r0, #13
 8001350:	f002 f865 	bl	800341e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001354:	200d      	movs	r0, #13
 8001356:	f002 f87e 	bl	8003456 <HAL_NVIC_EnableIRQ>

}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000

08001368 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	4b42      	ldr	r3, [pc, #264]	; (8001488 <MX_GPIO_Init+0x120>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a41      	ldr	r2, [pc, #260]	; (8001488 <MX_GPIO_Init+0x120>)
 8001382:	f043 0310 	orr.w	r3, r3, #16
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <MX_GPIO_Init+0x120>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001394:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <MX_GPIO_Init+0x120>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a3b      	ldr	r2, [pc, #236]	; (8001488 <MX_GPIO_Init+0x120>)
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b39      	ldr	r3, [pc, #228]	; (8001488 <MX_GPIO_Init+0x120>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0320 	and.w	r3, r3, #32
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	4b36      	ldr	r3, [pc, #216]	; (8001488 <MX_GPIO_Init+0x120>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a35      	ldr	r2, [pc, #212]	; (8001488 <MX_GPIO_Init+0x120>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b33      	ldr	r3, [pc, #204]	; (8001488 <MX_GPIO_Init+0x120>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <MX_GPIO_Init+0x120>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a2f      	ldr	r2, [pc, #188]	; (8001488 <MX_GPIO_Init+0x120>)
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <MX_GPIO_Init+0x120>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2120      	movs	r1, #32
 80013e0:	482a      	ldr	r0, [pc, #168]	; (800148c <MX_GPIO_Init+0x124>)
 80013e2:	f002 fbc5 	bl	8003b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, m1_1_Pin|m1_2_Pin|m2_1_Pin|m2_2_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80013ec:	4828      	ldr	r0, [pc, #160]	; (8001490 <MX_GPIO_Init+0x128>)
 80013ee:	f002 fbbf 	bl	8003b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, m3_1_Pin|m3_2_Pin|m4_1_Pin|m4_2_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80013f8:	4826      	ldr	r0, [pc, #152]	; (8001494 <MX_GPIO_Init+0x12c>)
 80013fa:	f002 fbb9 	bl	8003b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <MX_GPIO_Init+0x130>)
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4619      	mov	r1, r3
 8001412:	4820      	ldr	r0, [pc, #128]	; (8001494 <MX_GPIO_Init+0x12c>)
 8001414:	f002 fa28 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001418:	2320      	movs	r3, #32
 800141a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2302      	movs	r3, #2
 8001426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	4817      	ldr	r0, [pc, #92]	; (800148c <MX_GPIO_Init+0x124>)
 8001430:	f002 fa1a 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = m1_1_Pin|m1_2_Pin|m2_1_Pin|m2_2_Pin;
 8001434:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2302      	movs	r3, #2
 8001444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4619      	mov	r1, r3
 800144c:	4810      	ldr	r0, [pc, #64]	; (8001490 <MX_GPIO_Init+0x128>)
 800144e:	f002 fa0b 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = m3_1_Pin|m3_2_Pin|m4_1_Pin|m4_2_Pin;
 8001452:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2302      	movs	r3, #2
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	480a      	ldr	r0, [pc, #40]	; (8001494 <MX_GPIO_Init+0x12c>)
 800146c:	f002 f9fc 	bl	8003868 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	2028      	movs	r0, #40	; 0x28
 8001476:	f001 ffd2 	bl	800341e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800147a:	2028      	movs	r0, #40	; 0x28
 800147c:	f001 ffeb 	bl	8003456 <HAL_NVIC_EnableIRQ>

}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000
 800148c:	40010800 	.word	0x40010800
 8001490:	40010c00 	.word	0x40010c00
 8001494:	40011000 	.word	0x40011000
 8001498:	10110000 	.word	0x10110000

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f001 fa9e 	bl	80029e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a4:	f000 fc18 	bl	8001cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a8:	f7ff ff5e 	bl	8001368 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014ac:	f001 f97a 	bl	80027a4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80014b0:	f7ff ff34 	bl	800131c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80014b4:	f001 f9a0 	bl	80027f8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80014b8:	f000 feb0 	bl	800221c <MX_TIM1_Init>
  MX_TIM3_Init();
 80014bc:	f000 ffc0 	bl	8002440 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014c0:	f001 f80c 	bl	80024dc <MX_TIM4_Init>
  MX_ADC1_Init();
 80014c4:	f7ff fe5c 	bl	8001180 <MX_ADC1_Init>
  MX_TIM2_Init();
 80014c8:	f000 ff6c 	bl	80023a4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80014cc:	f000 fc5f 	bl	8001d8e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 80014d0:	48c7      	ldr	r0, [pc, #796]	; (80017f0 <main+0x354>)
 80014d2:	f003 f8c1 	bl	8004658 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014d6:	2100      	movs	r1, #0
 80014d8:	48c6      	ldr	r0, [pc, #792]	; (80017f4 <main+0x358>)
 80014da:	f003 f967 	bl	80047ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014de:	2104      	movs	r1, #4
 80014e0:	48c4      	ldr	r0, [pc, #784]	; (80017f4 <main+0x358>)
 80014e2:	f003 f963 	bl	80047ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014e6:	2108      	movs	r1, #8
 80014e8:	48c2      	ldr	r0, [pc, #776]	; (80017f4 <main+0x358>)
 80014ea:	f003 f95f 	bl	80047ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014ee:	210c      	movs	r1, #12
 80014f0:	48c0      	ldr	r0, [pc, #768]	; (80017f4 <main+0x358>)
 80014f2:	f003 f95b 	bl	80047ac <HAL_TIM_PWM_Start>
	TIM1->m1_p = 400;
 80014f6:	4bc0      	ldr	r3, [pc, #768]	; (80017f8 <main+0x35c>)
 80014f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->m2_p = 400;
 80014fe:	4bbe      	ldr	r3, [pc, #760]	; (80017f8 <main+0x35c>)
 8001500:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001504:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->m3_p = 300;
 8001506:	4bbc      	ldr	r3, [pc, #752]	; (80017f8 <main+0x35c>)
 8001508:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800150c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->m4_p = 400;
 800150e:	4bba      	ldr	r3, [pc, #744]	; (80017f8 <main+0x35c>)
 8001510:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(m1_1_GPIO_Port, m1_1_Pin, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151c:	48b7      	ldr	r0, [pc, #732]	; (80017fc <main+0x360>)
 800151e:	f002 fb27 	bl	8003b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m2_1_GPIO_Port, m2_1_Pin, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001528:	48b4      	ldr	r0, [pc, #720]	; (80017fc <main+0x360>)
 800152a:	f002 fb21 	bl	8003b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m3_1_GPIO_Port, m3_1_Pin, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2140      	movs	r1, #64	; 0x40
 8001532:	48b3      	ldr	r0, [pc, #716]	; (8001800 <main+0x364>)
 8001534:	f002 fb1c 	bl	8003b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m4_1_GPIO_Port, m4_1_Pin, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153e:	48b0      	ldr	r0, [pc, #704]	; (8001800 <main+0x364>)
 8001540:	f002 fb16 	bl	8003b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m2_2_GPIO_Port, m2_2_Pin, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800154a:	48ac      	ldr	r0, [pc, #688]	; (80017fc <main+0x360>)
 800154c:	f002 fb10 	bl	8003b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m3_2_GPIO_Port, m3_2_Pin, 1);
 8001550:	2201      	movs	r2, #1
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	48aa      	ldr	r0, [pc, #680]	; (8001800 <main+0x364>)
 8001556:	f002 fb0b 	bl	8003b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m4_2_GPIO_Port, m4_2_Pin, 1);
 800155a:	2201      	movs	r2, #1
 800155c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001560:	48a7      	ldr	r0, [pc, #668]	; (8001800 <main+0x364>)
 8001562:	f002 fb05 	bl	8003b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_2_GPIO_Port, m1_2_Pin, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156c:	48a3      	ldr	r0, [pc, #652]	; (80017fc <main+0x360>)
 800156e:	f002 faff 	bl	8003b70 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, data, 20);
 8001572:	2214      	movs	r2, #20
 8001574:	49a3      	ldr	r1, [pc, #652]	; (8001804 <main+0x368>)
 8001576:	48a4      	ldr	r0, [pc, #656]	; (8001808 <main+0x36c>)
 8001578:	f004 fb0a 	bl	8005b90 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800157c:	2100      	movs	r1, #0
 800157e:	489c      	ldr	r0, [pc, #624]	; (80017f0 <main+0x354>)
 8001580:	f003 fa06 	bl	8004990 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001584:	2104      	movs	r1, #4
 8001586:	489a      	ldr	r0, [pc, #616]	; (80017f0 <main+0x354>)
 8001588:	f003 fa02 	bl	8004990 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800158c:	2108      	movs	r1, #8
 800158e:	4898      	ldr	r0, [pc, #608]	; (80017f0 <main+0x354>)
 8001590:	f003 f90c 	bl	80047ac <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc, 2);
 8001594:	2202      	movs	r2, #2
 8001596:	499d      	ldr	r1, [pc, #628]	; (800180c <main+0x370>)
 8001598:	489d      	ldr	r0, [pc, #628]	; (8001810 <main+0x374>)
 800159a:	f001 fb7f 	bl	8002c9c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 800159e:	489d      	ldr	r0, [pc, #628]	; (8001814 <main+0x378>)
 80015a0:	f003 f85a 	bl	8004658 <HAL_TIM_Base_Start_IT>
	HAL_Delay(200);
 80015a4:	20c8      	movs	r0, #200	; 0xc8
 80015a6:	f001 fa7d 	bl	8002aa4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(battery_voltage>6.5)
 80015aa:	4b9b      	ldr	r3, [pc, #620]	; (8001818 <main+0x37c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	499b      	ldr	r1, [pc, #620]	; (800181c <main+0x380>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fda3 	bl	80010fc <__aeabi_fcmpgt>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 836e 	beq.w	8001c9a <main+0x7fe>
		{
			if (uart_disable_flag)
 80015be:	4b98      	ldr	r3, [pc, #608]	; (8001820 <main+0x384>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80ff 	beq.w	80017c6 <main+0x32a>
			{

				if (distance < 50)
 80015c8:	4b96      	ldr	r3, [pc, #600]	; (8001824 <main+0x388>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4996      	ldr	r1, [pc, #600]	; (8001828 <main+0x38c>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fd76 	bl	80010c0 <__aeabi_fcmplt>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 80b6 	beq.w	8001748 <main+0x2ac>
				{
					HAL_GPIO_WritePin(m1_1_GPIO_Port, m1_1_Pin, 1);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e2:	4886      	ldr	r0, [pc, #536]	; (80017fc <main+0x360>)
 80015e4:	f002 fac4 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m2_1_GPIO_Port, m2_1_Pin, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ee:	4883      	ldr	r0, [pc, #524]	; (80017fc <main+0x360>)
 80015f0:	f002 fabe 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m3_1_GPIO_Port, m3_1_Pin, 1);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2140      	movs	r1, #64	; 0x40
 80015f8:	4881      	ldr	r0, [pc, #516]	; (8001800 <main+0x364>)
 80015fa:	f002 fab9 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m4_1_GPIO_Port, m4_1_Pin, 1);
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001604:	487e      	ldr	r0, [pc, #504]	; (8001800 <main+0x364>)
 8001606:	f002 fab3 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m2_2_GPIO_Port, m2_2_Pin, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001610:	487a      	ldr	r0, [pc, #488]	; (80017fc <main+0x360>)
 8001612:	f002 faad 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m3_2_GPIO_Port, m3_2_Pin, 1);
 8001616:	2201      	movs	r2, #1
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	4879      	ldr	r0, [pc, #484]	; (8001800 <main+0x364>)
 800161c:	f002 faa8 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m4_2_GPIO_Port, m4_2_Pin, 1);
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001626:	4876      	ldr	r0, [pc, #472]	; (8001800 <main+0x364>)
 8001628:	f002 faa2 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m1_2_GPIO_Port, m1_2_Pin, 1);
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001632:	4872      	ldr	r0, [pc, #456]	; (80017fc <main+0x360>)
 8001634:	f002 fa9c 	bl	8003b70 <HAL_GPIO_WritePin>
					TIM1->CCR1 = 9999;
 8001638:	4b6f      	ldr	r3, [pc, #444]	; (80017f8 <main+0x35c>)
 800163a:	f242 720f 	movw	r2, #9999	; 0x270f
 800163e:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR2 = 9999;
 8001640:	4b6d      	ldr	r3, [pc, #436]	; (80017f8 <main+0x35c>)
 8001642:	f242 720f 	movw	r2, #9999	; 0x270f
 8001646:	639a      	str	r2, [r3, #56]	; 0x38
					TIM1->CCR3 = 9999;
 8001648:	4b6b      	ldr	r3, [pc, #428]	; (80017f8 <main+0x35c>)
 800164a:	f242 720f 	movw	r2, #9999	; 0x270f
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM1->CCR4 = 9999;
 8001650:	4b69      	ldr	r3, [pc, #420]	; (80017f8 <main+0x35c>)
 8001652:	f242 720f 	movw	r2, #9999	; 0x270f
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
					HAL_Delay(10);
 8001658:	200a      	movs	r0, #10
 800165a:	f001 fa23 	bl	8002aa4 <HAL_Delay>
					TIM1->CCR1 = 4000;
 800165e:	4b66      	ldr	r3, [pc, #408]	; (80017f8 <main+0x35c>)
 8001660:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001664:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR2 = 4000;
 8001666:	4b64      	ldr	r3, [pc, #400]	; (80017f8 <main+0x35c>)
 8001668:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800166c:	639a      	str	r2, [r3, #56]	; 0x38
					TIM1->CCR3 = 4000;
 800166e:	4b62      	ldr	r3, [pc, #392]	; (80017f8 <main+0x35c>)
 8001670:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM1->CCR4 = 4000;
 8001676:	4b60      	ldr	r3, [pc, #384]	; (80017f8 <main+0x35c>)
 8001678:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
					HAL_GPIO_WritePin(m1_1_GPIO_Port, m1_1_Pin, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001684:	485d      	ldr	r0, [pc, #372]	; (80017fc <main+0x360>)
 8001686:	f002 fa73 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m2_1_GPIO_Port, m2_1_Pin, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001690:	485a      	ldr	r0, [pc, #360]	; (80017fc <main+0x360>)
 8001692:	f002 fa6d 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m3_1_GPIO_Port, m3_1_Pin, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2140      	movs	r1, #64	; 0x40
 800169a:	4859      	ldr	r0, [pc, #356]	; (8001800 <main+0x364>)
 800169c:	f002 fa68 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m4_1_GPIO_Port, m4_1_Pin, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a6:	4856      	ldr	r0, [pc, #344]	; (8001800 <main+0x364>)
 80016a8:	f002 fa62 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m2_2_GPIO_Port, m2_2_Pin, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b2:	4852      	ldr	r0, [pc, #328]	; (80017fc <main+0x360>)
 80016b4:	f002 fa5c 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m3_2_GPIO_Port, m3_2_Pin, 1);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	4850      	ldr	r0, [pc, #320]	; (8001800 <main+0x364>)
 80016be:	f002 fa57 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m4_2_GPIO_Port, m4_2_Pin, 1);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c8:	484d      	ldr	r0, [pc, #308]	; (8001800 <main+0x364>)
 80016ca:	f002 fa51 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m1_2_GPIO_Port, m1_2_Pin, 1);
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d4:	4849      	ldr	r0, [pc, #292]	; (80017fc <main+0x360>)
 80016d6:	f002 fa4b 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 80016da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016de:	f001 f9e1 	bl	8002aa4 <HAL_Delay>
					HAL_GPIO_WritePin(m1_1_GPIO_Port, m1_1_Pin, 1);
 80016e2:	2201      	movs	r2, #1
 80016e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e8:	4844      	ldr	r0, [pc, #272]	; (80017fc <main+0x360>)
 80016ea:	f002 fa41 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m2_1_GPIO_Port, m2_1_Pin, 1);
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f4:	4841      	ldr	r0, [pc, #260]	; (80017fc <main+0x360>)
 80016f6:	f002 fa3b 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m3_1_GPIO_Port, m3_1_Pin, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	4840      	ldr	r0, [pc, #256]	; (8001800 <main+0x364>)
 8001700:	f002 fa36 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m4_1_GPIO_Port, m4_1_Pin, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170a:	483d      	ldr	r0, [pc, #244]	; (8001800 <main+0x364>)
 800170c:	f002 fa30 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m1_2_GPIO_Port, m1_2_Pin, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001716:	4839      	ldr	r0, [pc, #228]	; (80017fc <main+0x360>)
 8001718:	f002 fa2a 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m2_2_GPIO_Port, m2_2_Pin, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001722:	4836      	ldr	r0, [pc, #216]	; (80017fc <main+0x360>)
 8001724:	f002 fa24 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m3_2_GPIO_Port, m3_2_Pin, 1);
 8001728:	2201      	movs	r2, #1
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	4834      	ldr	r0, [pc, #208]	; (8001800 <main+0x364>)
 800172e:	f002 fa1f 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m4_2_GPIO_Port, m4_2_Pin, 1);
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001738:	4831      	ldr	r0, [pc, #196]	; (8001800 <main+0x364>)
 800173a:	f002 fa19 	bl	8003b70 <HAL_GPIO_WritePin>

					HAL_Delay(500);
 800173e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001742:	f001 f9af 	bl	8002aa4 <HAL_Delay>
 8001746:	e730      	b.n	80015aa <main+0x10e>

				}
				else
				{
					HAL_GPIO_WritePin(m1_1_GPIO_Port, m1_1_Pin, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800174e:	482b      	ldr	r0, [pc, #172]	; (80017fc <main+0x360>)
 8001750:	f002 fa0e 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m2_1_GPIO_Port, m2_1_Pin, 1);
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175a:	4828      	ldr	r0, [pc, #160]	; (80017fc <main+0x360>)
 800175c:	f002 fa08 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m3_1_GPIO_Port, m3_1_Pin, 1);
 8001760:	2201      	movs	r2, #1
 8001762:	2140      	movs	r1, #64	; 0x40
 8001764:	4826      	ldr	r0, [pc, #152]	; (8001800 <main+0x364>)
 8001766:	f002 fa03 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m4_1_GPIO_Port, m4_1_Pin, 1);
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001770:	4823      	ldr	r0, [pc, #140]	; (8001800 <main+0x364>)
 8001772:	f002 f9fd 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m2_2_GPIO_Port, m2_2_Pin, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800177c:	481f      	ldr	r0, [pc, #124]	; (80017fc <main+0x360>)
 800177e:	f002 f9f7 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m3_2_GPIO_Port, m3_2_Pin, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	481e      	ldr	r0, [pc, #120]	; (8001800 <main+0x364>)
 8001788:	f002 f9f2 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m4_2_GPIO_Port, m4_2_Pin, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001792:	481b      	ldr	r0, [pc, #108]	; (8001800 <main+0x364>)
 8001794:	f002 f9ec 	bl	8003b70 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(m1_2_GPIO_Port, m1_2_Pin, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179e:	4817      	ldr	r0, [pc, #92]	; (80017fc <main+0x360>)
 80017a0:	f002 f9e6 	bl	8003b70 <HAL_GPIO_WritePin>
					TIM1->CCR1 = 5000;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <main+0x35c>)
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR2 = 5000;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <main+0x35c>)
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	639a      	str	r2, [r3, #56]	; 0x38
					TIM1->CCR3 = 5000;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <main+0x35c>)
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM1->CCR4 = 5000;
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <main+0x35c>)
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
 80017c4:	e6f1      	b.n	80015aa <main+0x10e>
				}
			}
			else
			{
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017c6:	2120      	movs	r1, #32
 80017c8:	4818      	ldr	r0, [pc, #96]	; (800182c <main+0x390>)
 80017ca:	f002 f9e9 	bl	8003ba0 <HAL_GPIO_TogglePin>
				if (uart_parse_flag)
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <main+0x394>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f43f aee9 	beq.w	80015aa <main+0x10e>
				{
					if (data[0] == 'X')
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <main+0x368>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b58      	cmp	r3, #88	; 0x58
 80017de:	d12d      	bne.n	800183c <main+0x3a0>
					{
						x = atoi((char*) data + 2);
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <main+0x398>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 fc22 	bl	800602c <atoi>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <main+0x39c>)
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e030      	b.n	8001852 <main+0x3b6>
 80017f0:	200002c4 	.word	0x200002c4
 80017f4:	20000354 	.word	0x20000354
 80017f8:	40012c00 	.word	0x40012c00
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	40011000 	.word	0x40011000
 8001804:	200002ac 	.word	0x200002ac
 8001808:	20000428 	.word	0x20000428
 800180c:	200002a8 	.word	0x200002a8
 8001810:	20000214 	.word	0x20000214
 8001814:	2000039c 	.word	0x2000039c
 8001818:	20000200 	.word	0x20000200
 800181c:	40d00000 	.word	0x40d00000
 8001820:	200001fd 	.word	0x200001fd
 8001824:	200002a4 	.word	0x200002a4
 8001828:	42480000 	.word	0x42480000
 800182c:	40010800 	.word	0x40010800
 8001830:	200001fc 	.word	0x200001fc
 8001834:	200002ae 	.word	0x200002ae
 8001838:	2000028c 	.word	0x2000028c
					}
					else if (data[0] == 'Y')
 800183c:	4b9e      	ldr	r3, [pc, #632]	; (8001ab8 <main+0x61c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b59      	cmp	r3, #89	; 0x59
 8001842:	d106      	bne.n	8001852 <main+0x3b6>
					{
						y = atoi((char*) data + 2);
 8001844:	4b9d      	ldr	r3, [pc, #628]	; (8001abc <main+0x620>)
 8001846:	4618      	mov	r0, r3
 8001848:	f004 fbf0 	bl	800602c <atoi>
 800184c:	4603      	mov	r3, r0
 800184e:	4a9c      	ldr	r2, [pc, #624]	; (8001ac0 <main+0x624>)
 8001850:	6013      	str	r3, [r2, #0]
					}
					if (x > 3000)
 8001852:	4b9c      	ldr	r3, [pc, #624]	; (8001ac4 <main+0x628>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800185a:	4293      	cmp	r3, r2
 800185c:	f340 80a4 	ble.w	80019a8 <main+0x50c>
					{
						HAL_GPIO_WritePin(m1_1_GPIO_Port, m1_1_Pin, 1);
 8001860:	2201      	movs	r2, #1
 8001862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001866:	4898      	ldr	r0, [pc, #608]	; (8001ac8 <main+0x62c>)
 8001868:	f002 f982 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m2_1_GPIO_Port, m2_1_Pin, 1);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001872:	4895      	ldr	r0, [pc, #596]	; (8001ac8 <main+0x62c>)
 8001874:	f002 f97c 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m3_1_GPIO_Port, m3_1_Pin, 1);
 8001878:	2201      	movs	r2, #1
 800187a:	2140      	movs	r1, #64	; 0x40
 800187c:	4893      	ldr	r0, [pc, #588]	; (8001acc <main+0x630>)
 800187e:	f002 f977 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m4_1_GPIO_Port, m4_1_Pin, 1);
 8001882:	2201      	movs	r2, #1
 8001884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001888:	4890      	ldr	r0, [pc, #576]	; (8001acc <main+0x630>)
 800188a:	f002 f971 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m2_2_GPIO_Port, m2_2_Pin, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001894:	488c      	ldr	r0, [pc, #560]	; (8001ac8 <main+0x62c>)
 8001896:	f002 f96b 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m3_2_GPIO_Port, m3_2_Pin, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	488b      	ldr	r0, [pc, #556]	; (8001acc <main+0x630>)
 80018a0:	f002 f966 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m4_2_GPIO_Port, m4_2_Pin, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018aa:	4888      	ldr	r0, [pc, #544]	; (8001acc <main+0x630>)
 80018ac:	f002 f960 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m1_2_GPIO_Port, m1_2_Pin, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b6:	4884      	ldr	r0, [pc, #528]	; (8001ac8 <main+0x62c>)
 80018b8:	f002 f95a 	bl	8003b70 <HAL_GPIO_WritePin>
						if (y > 0)
 80018bc:	4b80      	ldr	r3, [pc, #512]	; (8001ac0 <main+0x624>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	dd38      	ble.n	8001936 <main+0x49a>
						{
							if (0 >= (x - y))
 80018c4:	4b7f      	ldr	r3, [pc, #508]	; (8001ac4 <main+0x628>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b7d      	ldr	r3, [pc, #500]	; (8001ac0 <main+0x624>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	dc14      	bgt.n	80018fc <main+0x460>
							{
								TIM1->m1_p = 0;
 80018d2:	4b7f      	ldr	r3, [pc, #508]	; (8001ad0 <main+0x634>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
								TIM1->m2_p = 0;
 80018d8:	4b7d      	ldr	r3, [pc, #500]	; (8001ad0 <main+0x634>)
 80018da:	2200      	movs	r2, #0
 80018dc:	639a      	str	r2, [r3, #56]	; 0x38
								TIM1->m3_p = (x + y);
 80018de:	4b79      	ldr	r3, [pc, #484]	; (8001ac4 <main+0x628>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b77      	ldr	r3, [pc, #476]	; (8001ac0 <main+0x624>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	441a      	add	r2, r3
 80018e8:	4b79      	ldr	r3, [pc, #484]	; (8001ad0 <main+0x634>)
 80018ea:	63da      	str	r2, [r3, #60]	; 0x3c
								TIM1->m4_p = (x + y);
 80018ec:	4b75      	ldr	r3, [pc, #468]	; (8001ac4 <main+0x628>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <main+0x624>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	441a      	add	r2, r3
 80018f6:	4b76      	ldr	r3, [pc, #472]	; (8001ad0 <main+0x634>)
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
 80018fa:	e656      	b.n	80015aa <main+0x10e>
							}
							else
							{
								TIM1->m1_p = x - y;
 80018fc:	4b71      	ldr	r3, [pc, #452]	; (8001ac4 <main+0x628>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <main+0x624>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	1ad2      	subs	r2, r2, r3
 8001906:	4b72      	ldr	r3, [pc, #456]	; (8001ad0 <main+0x634>)
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
								TIM1->m2_p = x - y;
 800190a:	4b6e      	ldr	r3, [pc, #440]	; (8001ac4 <main+0x628>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b6c      	ldr	r3, [pc, #432]	; (8001ac0 <main+0x624>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	1ad2      	subs	r2, r2, r3
 8001914:	4b6e      	ldr	r3, [pc, #440]	; (8001ad0 <main+0x634>)
 8001916:	639a      	str	r2, [r3, #56]	; 0x38
								TIM1->m3_p = (x + y);
 8001918:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <main+0x628>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b68      	ldr	r3, [pc, #416]	; (8001ac0 <main+0x624>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	441a      	add	r2, r3
 8001922:	4b6b      	ldr	r3, [pc, #428]	; (8001ad0 <main+0x634>)
 8001924:	63da      	str	r2, [r3, #60]	; 0x3c
								TIM1->m4_p = (x + y);
 8001926:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <main+0x628>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <main+0x624>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	441a      	add	r2, r3
 8001930:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <main+0x634>)
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
 8001934:	e639      	b.n	80015aa <main+0x10e>
							}

						}
						else
						{
							if ((x + y) <= 0)
 8001936:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <main+0x628>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b61      	ldr	r3, [pc, #388]	; (8001ac0 <main+0x624>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	dc14      	bgt.n	800196e <main+0x4d2>
							{
								TIM1->m1_p = x - y;
 8001944:	4b5f      	ldr	r3, [pc, #380]	; (8001ac4 <main+0x628>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <main+0x624>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1ad2      	subs	r2, r2, r3
 800194e:	4b60      	ldr	r3, [pc, #384]	; (8001ad0 <main+0x634>)
 8001950:	635a      	str	r2, [r3, #52]	; 0x34
								TIM1->m2_p = x - y;
 8001952:	4b5c      	ldr	r3, [pc, #368]	; (8001ac4 <main+0x628>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b5a      	ldr	r3, [pc, #360]	; (8001ac0 <main+0x624>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	1ad2      	subs	r2, r2, r3
 800195c:	4b5c      	ldr	r3, [pc, #368]	; (8001ad0 <main+0x634>)
 800195e:	639a      	str	r2, [r3, #56]	; 0x38
								TIM1->m3_p = 0;
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <main+0x634>)
 8001962:	2200      	movs	r2, #0
 8001964:	63da      	str	r2, [r3, #60]	; 0x3c
								TIM1->m4_p = 0;
 8001966:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <main+0x634>)
 8001968:	2200      	movs	r2, #0
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
 800196c:	e61d      	b.n	80015aa <main+0x10e>
							}
							else
							{
								TIM1->m1_p = x - y;
 800196e:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <main+0x628>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <main+0x624>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1ad2      	subs	r2, r2, r3
 8001978:	4b55      	ldr	r3, [pc, #340]	; (8001ad0 <main+0x634>)
 800197a:	635a      	str	r2, [r3, #52]	; 0x34
								TIM1->m2_p = x - y;
 800197c:	4b51      	ldr	r3, [pc, #324]	; (8001ac4 <main+0x628>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <main+0x624>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	1ad2      	subs	r2, r2, r3
 8001986:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <main+0x634>)
 8001988:	639a      	str	r2, [r3, #56]	; 0x38
								TIM1->m3_p = x + y;
 800198a:	4b4e      	ldr	r3, [pc, #312]	; (8001ac4 <main+0x628>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <main+0x624>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	441a      	add	r2, r3
 8001994:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <main+0x634>)
 8001996:	63da      	str	r2, [r3, #60]	; 0x3c
								TIM1->m4_p = x + y;
 8001998:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <main+0x628>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b48      	ldr	r3, [pc, #288]	; (8001ac0 <main+0x624>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	441a      	add	r2, r3
 80019a2:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <main+0x634>)
 80019a4:	641a      	str	r2, [r3, #64]	; 0x40
 80019a6:	e600      	b.n	80015aa <main+0x10e>
							}

						}
					}
					else if (x < -3000)
 80019a8:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <main+0x628>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a49      	ldr	r2, [pc, #292]	; (8001ad4 <main+0x638>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	f280 80b1 	bge.w	8001b16 <main+0x67a>
					{
						HAL_GPIO_WritePin(m1_1_GPIO_Port, m1_1_Pin, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ba:	4843      	ldr	r0, [pc, #268]	; (8001ac8 <main+0x62c>)
 80019bc:	f002 f8d8 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m2_1_GPIO_Port, m2_1_Pin, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019c6:	4840      	ldr	r0, [pc, #256]	; (8001ac8 <main+0x62c>)
 80019c8:	f002 f8d2 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m3_1_GPIO_Port, m3_1_Pin, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2140      	movs	r1, #64	; 0x40
 80019d0:	483e      	ldr	r0, [pc, #248]	; (8001acc <main+0x630>)
 80019d2:	f002 f8cd 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m4_1_GPIO_Port, m4_1_Pin, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019dc:	483b      	ldr	r0, [pc, #236]	; (8001acc <main+0x630>)
 80019de:	f002 f8c7 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m2_2_GPIO_Port, m2_2_Pin, 1);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e8:	4837      	ldr	r0, [pc, #220]	; (8001ac8 <main+0x62c>)
 80019ea:	f002 f8c1 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m3_2_GPIO_Port, m3_2_Pin, 1);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	4836      	ldr	r0, [pc, #216]	; (8001acc <main+0x630>)
 80019f4:	f002 f8bc 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m4_2_GPIO_Port, m4_2_Pin, 1);
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019fe:	4833      	ldr	r0, [pc, #204]	; (8001acc <main+0x630>)
 8001a00:	f002 f8b6 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m1_2_GPIO_Port, m1_2_Pin, 1);
 8001a04:	2201      	movs	r2, #1
 8001a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0a:	482f      	ldr	r0, [pc, #188]	; (8001ac8 <main+0x62c>)
 8001a0c:	f002 f8b0 	bl	8003b70 <HAL_GPIO_WritePin>
						if (y > 0)
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <main+0x624>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	dd33      	ble.n	8001a80 <main+0x5e4>
						{
							if ((-x - y) <= 0)
 8001a18:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <main+0x628>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	425a      	negs	r2, r3
 8001a1e:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <main+0x624>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	dc10      	bgt.n	8001a4a <main+0x5ae>
							{
								TIM1->m3_p = -x;
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <main+0x628>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	425a      	negs	r2, r3
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <main+0x634>)
 8001a30:	63da      	str	r2, [r3, #60]	; 0x3c
								TIM1->m4_p = -x;
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <main+0x628>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	425a      	negs	r2, r3
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <main+0x634>)
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
								TIM1->m1_p = 0;
 8001a3c:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <main+0x634>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34
								TIM1->m2_p = 0;
 8001a42:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <main+0x634>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	639a      	str	r2, [r3, #56]	; 0x38
 8001a48:	e5af      	b.n	80015aa <main+0x10e>
							}
							else
							{
								TIM1->m3_p = -x;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <main+0x628>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	425a      	negs	r2, r3
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <main+0x634>)
 8001a52:	63da      	str	r2, [r3, #60]	; 0x3c
								TIM1->m4_p = -x;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <main+0x628>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	425a      	negs	r2, r3
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <main+0x634>)
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40
								TIM1->m1_p = -x - y;
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <main+0x628>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	425a      	negs	r2, r3
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <main+0x624>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	1ad2      	subs	r2, r2, r3
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <main+0x634>)
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34
								TIM1->m2_p = -x - y;
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <main+0x628>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	425a      	negs	r2, r3
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <main+0x624>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	1ad2      	subs	r2, r2, r3
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <main+0x634>)
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8001a7e:	e594      	b.n	80015aa <main+0x10e>
							}
						}
						else
						{

							if ((-x + y) <= 0)
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <main+0x624>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <main+0x628>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	dc24      	bgt.n	8001ad8 <main+0x63c>
							{
								TIM1->m3_p = 0;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <main+0x634>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	63da      	str	r2, [r3, #60]	; 0x3c
								TIM1->m4_p = 0;
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <main+0x634>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
								TIM1->m1_p = (-x + y);
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <main+0x624>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <main+0x628>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	1ad2      	subs	r2, r2, r3
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <main+0x634>)
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
								TIM1->m2_p = (-x + y);
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <main+0x624>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <main+0x628>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	1ad2      	subs	r2, r2, r3
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <main+0x634>)
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ab6:	e578      	b.n	80015aa <main+0x10e>
 8001ab8:	200002ac 	.word	0x200002ac
 8001abc:	200002ae 	.word	0x200002ae
 8001ac0:	200002c0 	.word	0x200002c0
 8001ac4:	2000028c 	.word	0x2000028c
 8001ac8:	40010c00 	.word	0x40010c00
 8001acc:	40011000 	.word	0x40011000
 8001ad0:	40012c00 	.word	0x40012c00
 8001ad4:	fffff448 	.word	0xfffff448
							}
							else
							{
								TIM1->m3_p = -x - y;
 8001ad8:	4b78      	ldr	r3, [pc, #480]	; (8001cbc <main+0x820>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	425a      	negs	r2, r3
 8001ade:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <main+0x824>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	1ad2      	subs	r2, r2, r3
 8001ae4:	4b77      	ldr	r3, [pc, #476]	; (8001cc4 <main+0x828>)
 8001ae6:	63da      	str	r2, [r3, #60]	; 0x3c
								TIM1->m4_p = -x - y;
 8001ae8:	4b74      	ldr	r3, [pc, #464]	; (8001cbc <main+0x820>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	425a      	negs	r2, r3
 8001aee:	4b74      	ldr	r3, [pc, #464]	; (8001cc0 <main+0x824>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	1ad2      	subs	r2, r2, r3
 8001af4:	4b73      	ldr	r3, [pc, #460]	; (8001cc4 <main+0x828>)
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40
								TIM1->m1_p = (-x + y);
 8001af8:	4b71      	ldr	r3, [pc, #452]	; (8001cc0 <main+0x824>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b6f      	ldr	r3, [pc, #444]	; (8001cbc <main+0x820>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1ad2      	subs	r2, r2, r3
 8001b02:	4b70      	ldr	r3, [pc, #448]	; (8001cc4 <main+0x828>)
 8001b04:	635a      	str	r2, [r3, #52]	; 0x34
								TIM1->m2_p = (-x + y);
 8001b06:	4b6e      	ldr	r3, [pc, #440]	; (8001cc0 <main+0x824>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b6c      	ldr	r3, [pc, #432]	; (8001cbc <main+0x820>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	4b6c      	ldr	r3, [pc, #432]	; (8001cc4 <main+0x828>)
 8001b12:	639a      	str	r2, [r3, #56]	; 0x38
 8001b14:	e549      	b.n	80015aa <main+0x10e>
							}

						}
					}
					else if (y > 3000)
 8001b16:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <main+0x824>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	dd3c      	ble.n	8001b9c <main+0x700>
					{
						TIM1->CCR1=0;
 8001b22:	4b68      	ldr	r3, [pc, #416]	; (8001cc4 <main+0x828>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
						TIM1->CCR2=0;
 8001b28:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <main+0x828>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
						TIM1->CCR3=y;
 8001b2e:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <main+0x824>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b64      	ldr	r3, [pc, #400]	; (8001cc4 <main+0x828>)
 8001b34:	63da      	str	r2, [r3, #60]	; 0x3c
						TIM1->CCR4=y;
 8001b36:	4b62      	ldr	r3, [pc, #392]	; (8001cc0 <main+0x824>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b62      	ldr	r3, [pc, #392]	; (8001cc4 <main+0x828>)
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
						HAL_GPIO_WritePin(m1_1_GPIO_Port, m1_1_Pin, 1);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b44:	4860      	ldr	r0, [pc, #384]	; (8001cc8 <main+0x82c>)
 8001b46:	f002 f813 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m2_1_GPIO_Port, m2_1_Pin, 1);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b50:	485d      	ldr	r0, [pc, #372]	; (8001cc8 <main+0x82c>)
 8001b52:	f002 f80d 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m3_1_GPIO_Port, m3_1_Pin, 1);
 8001b56:	2201      	movs	r2, #1
 8001b58:	2140      	movs	r1, #64	; 0x40
 8001b5a:	485c      	ldr	r0, [pc, #368]	; (8001ccc <main+0x830>)
 8001b5c:	f002 f808 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m4_1_GPIO_Port, m4_1_Pin, 1);
 8001b60:	2201      	movs	r2, #1
 8001b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b66:	4859      	ldr	r0, [pc, #356]	; (8001ccc <main+0x830>)
 8001b68:	f002 f802 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m1_2_GPIO_Port, m1_2_Pin, 1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b72:	4855      	ldr	r0, [pc, #340]	; (8001cc8 <main+0x82c>)
 8001b74:	f001 fffc 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m2_2_GPIO_Port, m2_2_Pin, 1);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7e:	4852      	ldr	r0, [pc, #328]	; (8001cc8 <main+0x82c>)
 8001b80:	f001 fff6 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m3_2_GPIO_Port, m3_2_Pin, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	4850      	ldr	r0, [pc, #320]	; (8001ccc <main+0x830>)
 8001b8a:	f001 fff1 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m4_2_GPIO_Port, m4_2_Pin, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b94:	484d      	ldr	r0, [pc, #308]	; (8001ccc <main+0x830>)
 8001b96:	f001 ffeb 	bl	8003b70 <HAL_GPIO_WritePin>
 8001b9a:	e506      	b.n	80015aa <main+0x10e>
					}
					else if (y < -3000)
 8001b9c:	4b48      	ldr	r3, [pc, #288]	; (8001cc0 <main+0x824>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a4b      	ldr	r2, [pc, #300]	; (8001cd0 <main+0x834>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	da3e      	bge.n	8001c24 <main+0x788>
					{
						TIM1->CCR1=(-y);
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <main+0x824>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	425a      	negs	r2, r3
 8001bac:	4b45      	ldr	r3, [pc, #276]	; (8001cc4 <main+0x828>)
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34
						TIM1->CCR2=(-y);
 8001bb0:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <main+0x824>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	425a      	negs	r2, r3
 8001bb6:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <main+0x828>)
 8001bb8:	639a      	str	r2, [r3, #56]	; 0x38
						TIM1->CCR3=0;
 8001bba:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <main+0x828>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	63da      	str	r2, [r3, #60]	; 0x3c
						TIM1->CCR4=0;
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <main+0x828>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40
						HAL_GPIO_WritePin(m1_1_GPIO_Port, m1_1_Pin, 1);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bcc:	483e      	ldr	r0, [pc, #248]	; (8001cc8 <main+0x82c>)
 8001bce:	f001 ffcf 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m2_1_GPIO_Port, m2_1_Pin, 1);
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bd8:	483b      	ldr	r0, [pc, #236]	; (8001cc8 <main+0x82c>)
 8001bda:	f001 ffc9 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m3_1_GPIO_Port, m3_1_Pin, 1);
 8001bde:	2201      	movs	r2, #1
 8001be0:	2140      	movs	r1, #64	; 0x40
 8001be2:	483a      	ldr	r0, [pc, #232]	; (8001ccc <main+0x830>)
 8001be4:	f001 ffc4 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m4_1_GPIO_Port, m4_1_Pin, 1);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bee:	4837      	ldr	r0, [pc, #220]	; (8001ccc <main+0x830>)
 8001bf0:	f001 ffbe 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m1_2_GPIO_Port, m1_2_Pin, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bfa:	4833      	ldr	r0, [pc, #204]	; (8001cc8 <main+0x82c>)
 8001bfc:	f001 ffb8 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m2_2_GPIO_Port, m2_2_Pin, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c06:	4830      	ldr	r0, [pc, #192]	; (8001cc8 <main+0x82c>)
 8001c08:	f001 ffb2 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m3_2_GPIO_Port, m3_2_Pin, 1);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	482e      	ldr	r0, [pc, #184]	; (8001ccc <main+0x830>)
 8001c12:	f001 ffad 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m4_2_GPIO_Port, m4_2_Pin, 1);
 8001c16:	2201      	movs	r2, #1
 8001c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c1c:	482b      	ldr	r0, [pc, #172]	; (8001ccc <main+0x830>)
 8001c1e:	f001 ffa7 	bl	8003b70 <HAL_GPIO_WritePin>
 8001c22:	e4c2      	b.n	80015aa <main+0x10e>
					}
					else
					{
						TIM1->CCR1=0;
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <main+0x828>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
						TIM1->CCR2=0;
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <main+0x828>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	639a      	str	r2, [r3, #56]	; 0x38
						TIM1->CCR3=0;
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <main+0x828>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	63da      	str	r2, [r3, #60]	; 0x3c
						TIM1->CCR4=0;
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <main+0x828>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
						HAL_GPIO_WritePin(m1_1_GPIO_Port, m1_1_Pin, 1);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c42:	4821      	ldr	r0, [pc, #132]	; (8001cc8 <main+0x82c>)
 8001c44:	f001 ff94 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m2_1_GPIO_Port, m2_1_Pin, 1);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c4e:	481e      	ldr	r0, [pc, #120]	; (8001cc8 <main+0x82c>)
 8001c50:	f001 ff8e 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m3_1_GPIO_Port, m3_1_Pin, 1);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2140      	movs	r1, #64	; 0x40
 8001c58:	481c      	ldr	r0, [pc, #112]	; (8001ccc <main+0x830>)
 8001c5a:	f001 ff89 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m4_1_GPIO_Port, m4_1_Pin, 1);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c64:	4819      	ldr	r0, [pc, #100]	; (8001ccc <main+0x830>)
 8001c66:	f001 ff83 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m1_2_GPIO_Port, m1_2_Pin, 1);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c70:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <main+0x82c>)
 8001c72:	f001 ff7d 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m2_2_GPIO_Port, m2_2_Pin, 1);
 8001c76:	2201      	movs	r2, #1
 8001c78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c7c:	4812      	ldr	r0, [pc, #72]	; (8001cc8 <main+0x82c>)
 8001c7e:	f001 ff77 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m3_2_GPIO_Port, m3_2_Pin, 1);
 8001c82:	2201      	movs	r2, #1
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	4811      	ldr	r0, [pc, #68]	; (8001ccc <main+0x830>)
 8001c88:	f001 ff72 	bl	8003b70 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(m4_2_GPIO_Port, m4_2_Pin, 1);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <main+0x830>)
 8001c94:	f001 ff6c 	bl	8003b70 <HAL_GPIO_WritePin>
 8001c98:	e487      	b.n	80015aa <main+0x10e>
				}
			}
		}
		else
		{
			TIM1->CCR1=0;
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <main+0x828>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <main+0x828>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <main+0x828>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4=0;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <main+0x828>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
			while(1){HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);}
 8001cb2:	2120      	movs	r1, #32
 8001cb4:	4807      	ldr	r0, [pc, #28]	; (8001cd4 <main+0x838>)
 8001cb6:	f001 ff73 	bl	8003ba0 <HAL_GPIO_TogglePin>
 8001cba:	e7fa      	b.n	8001cb2 <main+0x816>
 8001cbc:	2000028c 	.word	0x2000028c
 8001cc0:	200002c0 	.word	0x200002c0
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40010c00 	.word	0x40010c00
 8001ccc:	40011000 	.word	0x40011000
 8001cd0:	fffff448 	.word	0xfffff448
 8001cd4:	40010800 	.word	0x40010800

08001cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b094      	sub	sp, #80	; 0x50
 8001cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce2:	2228      	movs	r2, #40	; 0x28
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 f9ce 	bl	8006088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d0c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d16:	2301      	movs	r3, #1
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d24:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 ff72 	bl	8003c18 <HAL_RCC_OscConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d3a:	f000 f919 	bl	8001f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3e:	230f      	movs	r3, #15
 8001d40:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2102      	movs	r1, #2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 f9dc 	bl	8004118 <HAL_RCC_ClockConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d66:	f000 f903 	bl	8001f70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d72:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fb68 	bl	800444c <HAL_RCCEx_PeriphCLKConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d82:	f000 f8f5 	bl	8001f70 <Error_Handler>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3750      	adds	r7, #80	; 0x50
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	201e      	movs	r0, #30
 8001d98:	f001 fb41 	bl	800341e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d9c:	201e      	movs	r0, #30
 8001d9e:	f001 fb5a 	bl	8003456 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	201c      	movs	r0, #28
 8001da8:	f001 fb39 	bl	800341e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dac:	201c      	movs	r0, #28
 8001dae:	f001 fb52 	bl	8003456 <HAL_NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, data, 20);
 8001dc4:	2214      	movs	r2, #20
 8001dc6:	490b      	ldr	r1, [pc, #44]	; (8001df4 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001dc8:	480b      	ldr	r0, [pc, #44]	; (8001df8 <HAL_UARTEx_RxEventCallback+0x40>)
 8001dca:	f003 fee1 	bl	8005b90 <HAL_UARTEx_ReceiveToIdle_DMA>
	uart_parse_flag = 1;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_UARTEx_RxEventCallback+0x44>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
	uart_size = Size;
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_UARTEx_RxEventCallback+0x48>)
 8001dda:	701a      	strb	r2, [r3, #0]
	TIM2->CNT = 0;
 8001ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
	uart_disable_flag = 0;
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200002ac 	.word	0x200002ac
 8001df8:	20000428 	.word	0x20000428
 8001dfc:	200001fc 	.word	0x200001fc
 8001e00:	20000288 	.word	0x20000288
 8001e04:	200001fd 	.word	0x200001fd

08001e08 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d121      	bne.n	8001e5e <HAL_TIM_IC_CaptureCallback+0x56>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7f1b      	ldrb	r3, [r3, #28]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d103      	bne.n	8001e2a <HAL_TIM_IC_CaptureCallback+0x22>
		{
			HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001e22:	2100      	movs	r1, #0
 8001e24:	4811      	ldr	r0, [pc, #68]	; (8001e6c <HAL_TIM_IC_CaptureCallback+0x64>)
 8001e26:	f002 fdb3 	bl	8004990 <HAL_TIM_IC_Start_IT>

		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7f1b      	ldrb	r3, [r3, #28]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d115      	bne.n	8001e5e <HAL_TIM_IC_CaptureCallback+0x56>
		{
			HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001e32:	2104      	movs	r1, #4
 8001e34:	480d      	ldr	r0, [pc, #52]	; (8001e6c <HAL_TIM_IC_CaptureCallback+0x64>)
 8001e36:	f002 fdab 	bl	8004990 <HAL_TIM_IC_Start_IT>
			float micro = ((TIM4->CCR2) - (TIM4->CCR1));
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ff45 	bl	8000cd4 <__aeabi_ui2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60fb      	str	r3, [r7, #12]
			distance = (micro / 58.0);
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f7ff f84b 	bl	8000eec <__aeabi_fdiv>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001e5c:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40000800 	.word	0x40000800
 8001e6c:	200002c4 	.word	0x200002c4
 8001e70:	42680000 	.word	0x42680000
 8001e74:	200002a4 	.word	0x200002a4

08001e78 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	battery_voltage=adc[0]*3.300/4095.000/0.233;
 8001e80:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fabd 	bl	8000404 <__aeabi_i2d>
 8001e8a:	a31d      	add	r3, pc, #116	; (adr r3, 8001f00 <HAL_ADC_ConvCpltCallback+0x88>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fb22 	bl	80004d8 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	a31a      	add	r3, pc, #104	; (adr r3, 8001f08 <HAL_ADC_ConvCpltCallback+0x90>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fc43 	bl	800072c <__aeabi_ddiv>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	a318      	add	r3, pc, #96	; (adr r3, 8001f10 <HAL_ADC_ConvCpltCallback+0x98>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fc3a 	bl	800072c <__aeabi_ddiv>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe fe02 	bl	8000ac8 <__aeabi_d2f>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001ec8:	6013      	str	r3, [r2, #0]
	temp=adc[1]*330/4095;
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001ecc:	885b      	ldrh	r3, [r3, #2]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001ed4:	fb03 f302 	mul.w	r3, r3, r2
 8001ed8:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001eda:	fb82 1203 	smull	r1, r2, r2, r3
 8001ede:	441a      	add	r2, r3
 8001ee0:	12d2      	asrs	r2, r2, #11
 8001ee2:	17db      	asrs	r3, r3, #31
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fef8 	bl	8000cdc <__aeabi_i2f>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4a0d      	ldr	r2, [pc, #52]	; (8001f24 <HAL_ADC_ConvCpltCallback+0xac>)
 8001ef0:	6013      	str	r3, [r2, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w
 8001f00:	66666666 	.word	0x66666666
 8001f04:	400a6666 	.word	0x400a6666
 8001f08:	00000000 	.word	0x00000000
 8001f0c:	40affe00 	.word	0x40affe00
 8001f10:	a9fbe76d 	.word	0xa9fbe76d
 8001f14:	3fcdd2f1 	.word	0x3fcdd2f1
 8001f18:	200002a8 	.word	0x200002a8
 8001f1c:	20000200 	.word	0x20000200
 8001f20:	80080081 	.word	0x80080081
 8001f24:	20000204 	.word	0x20000204

08001f28 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d103      	bne.n	8001f42 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		uart_disable_flag = 1;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
	}
	else if(htim->Instance==TIM4)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc, 2);
	}
}
 8001f40:	e009      	b.n	8001f56 <HAL_TIM_PeriodElapsedCallback+0x2e>
	else if(htim->Instance==TIM4)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d104      	bne.n	8001f56 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc, 2);
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4906      	ldr	r1, [pc, #24]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001f50:	4806      	ldr	r0, [pc, #24]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001f52:	f000 fea3 	bl	8002c9c <HAL_ADC_Start_DMA>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200001fd 	.word	0x200001fd
 8001f64:	40000800 	.word	0x40000800
 8001f68:	200002a8 	.word	0x200002a8
 8001f6c:	20000214 	.word	0x20000214

08001f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001f78:	e7fe      	b.n	8001f78 <Error_Handler+0x8>
	...

08001f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6193      	str	r3, [r2, #24]
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_MspInit+0x60>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_MspInit+0x60>)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40010000 	.word	0x40010000

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002026:	f000 fd21 	bl	8002a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <DMA1_Channel1_IRQHandler+0x10>)
 8002036:	f001 fae3 	bl	8003600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000244 	.word	0x20000244

08002044 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <DMA1_Channel3_IRQHandler+0x10>)
 800204a:	f001 fad9 	bl	8003600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200003e4 	.word	0x200003e4

08002058 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <TIM2_IRQHandler+0x10>)
 800205e:	f002 fd9d 	bl	8004b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000039c 	.word	0x2000039c

0800206c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <TIM4_IRQHandler+0x10>)
 8002072:	f002 fd93 	bl	8004b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200002c4 	.word	0x200002c4

08002080 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002084:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002088:	f001 fda4 	bl	8003bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
	return 1;
 8002094:	2301      	movs	r3, #1
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <_kill>:

int _kill(int pid, int sig)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020a8:	f003 ffc4 	bl	8006034 <__errno>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2216      	movs	r2, #22
 80020b0:	601a      	str	r2, [r3, #0]
	return -1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_exit>:

void _exit (int status)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020c6:	f04f 31ff 	mov.w	r1, #4294967295
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffe7 	bl	800209e <_kill>
	while (1) {}		/* Make sure we hang here */
 80020d0:	e7fe      	b.n	80020d0 <_exit+0x12>

080020d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	e00a      	b.n	80020fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020e4:	f3af 8000 	nop.w
 80020e8:	4601      	mov	r1, r0
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	60ba      	str	r2, [r7, #8]
 80020f0:	b2ca      	uxtb	r2, r1
 80020f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3301      	adds	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	429a      	cmp	r2, r3
 8002100:	dbf0      	blt.n	80020e4 <_read+0x12>
	}

return len;
 8002102:	687b      	ldr	r3, [r7, #4]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	e009      	b.n	8002132 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	60ba      	str	r2, [r7, #8]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	3301      	adds	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	dbf1      	blt.n	800211e <_write+0x12>
	}
	return len;
 800213a:	687b      	ldr	r3, [r7, #4]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <_close>:

int _close(int file)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	return -1;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216a:	605a      	str	r2, [r3, #4]
	return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <_isatty>:

int _isatty(int file)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	return 1;
 8002180:	2301      	movs	r3, #1
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
	return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <_sbrk+0x5c>)
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <_sbrk+0x60>)
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <_sbrk+0x64>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	; (800220c <_sbrk+0x68>)
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d207      	bcs.n	80021e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d4:	f003 ff2e 	bl	8006034 <__errno>
 80021d8:	4603      	mov	r3, r0
 80021da:	220c      	movs	r2, #12
 80021dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e009      	b.n	80021f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ea:	4b07      	ldr	r3, [pc, #28]	; (8002208 <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a05      	ldr	r2, [pc, #20]	; (8002208 <_sbrk+0x64>)
 80021f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20005000 	.word	0x20005000
 8002204:	00000400 	.word	0x00000400
 8002208:	20000208 	.word	0x20000208
 800220c:	200004c8 	.word	0x200004c8

08002210 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b096      	sub	sp, #88	; 0x58
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002222:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002230:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800223a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	611a      	str	r2, [r3, #16]
 800224a:	615a      	str	r2, [r3, #20]
 800224c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2220      	movs	r2, #32
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f003 ff17 	bl	8006088 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800225a:	4b50      	ldr	r3, [pc, #320]	; (800239c <MX_TIM1_Init+0x180>)
 800225c:	4a50      	ldr	r2, [pc, #320]	; (80023a0 <MX_TIM1_Init+0x184>)
 800225e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002260:	4b4e      	ldr	r3, [pc, #312]	; (800239c <MX_TIM1_Init+0x180>)
 8002262:	2247      	movs	r2, #71	; 0x47
 8002264:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002266:	4b4d      	ldr	r3, [pc, #308]	; (800239c <MX_TIM1_Init+0x180>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800226c:	4b4b      	ldr	r3, [pc, #300]	; (800239c <MX_TIM1_Init+0x180>)
 800226e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002272:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002274:	4b49      	ldr	r3, [pc, #292]	; (800239c <MX_TIM1_Init+0x180>)
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800227a:	4b48      	ldr	r3, [pc, #288]	; (800239c <MX_TIM1_Init+0x180>)
 800227c:	2200      	movs	r2, #0
 800227e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002280:	4b46      	ldr	r3, [pc, #280]	; (800239c <MX_TIM1_Init+0x180>)
 8002282:	2200      	movs	r2, #0
 8002284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002286:	4845      	ldr	r0, [pc, #276]	; (800239c <MX_TIM1_Init+0x180>)
 8002288:	f002 f996 	bl	80045b8 <HAL_TIM_Base_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002292:	f7ff fe6d 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800229c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022a0:	4619      	mov	r1, r3
 80022a2:	483e      	ldr	r0, [pc, #248]	; (800239c <MX_TIM1_Init+0x180>)
 80022a4:	f002 fed4 	bl	8005050 <HAL_TIM_ConfigClockSource>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022ae:	f7ff fe5f 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022b2:	483a      	ldr	r0, [pc, #232]	; (800239c <MX_TIM1_Init+0x180>)
 80022b4:	f002 fa22 	bl	80046fc <HAL_TIM_PWM_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80022be:	f7ff fe57 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022ce:	4619      	mov	r1, r3
 80022d0:	4832      	ldr	r0, [pc, #200]	; (800239c <MX_TIM1_Init+0x180>)
 80022d2:	f003 fb4f 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80022dc:	f7ff fe48 	bl	8001f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e0:	2360      	movs	r3, #96	; 0x60
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022ec:	2300      	movs	r3, #0
 80022ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022f4:	2300      	movs	r3, #0
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002300:	2200      	movs	r2, #0
 8002302:	4619      	mov	r1, r3
 8002304:	4825      	ldr	r0, [pc, #148]	; (800239c <MX_TIM1_Init+0x180>)
 8002306:	f002 fde5 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002310:	f7ff fe2e 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002318:	2204      	movs	r2, #4
 800231a:	4619      	mov	r1, r3
 800231c:	481f      	ldr	r0, [pc, #124]	; (800239c <MX_TIM1_Init+0x180>)
 800231e:	f002 fdd9 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002328:	f7ff fe22 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800232c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002330:	2208      	movs	r2, #8
 8002332:	4619      	mov	r1, r3
 8002334:	4819      	ldr	r0, [pc, #100]	; (800239c <MX_TIM1_Init+0x180>)
 8002336:	f002 fdcd 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002340:	f7ff fe16 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002348:	220c      	movs	r2, #12
 800234a:	4619      	mov	r1, r3
 800234c:	4813      	ldr	r0, [pc, #76]	; (800239c <MX_TIM1_Init+0x180>)
 800234e:	f002 fdc1 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002358:	f7ff fe0a 	bl	8001f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002374:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	4619      	mov	r1, r3
 800237e:	4807      	ldr	r0, [pc, #28]	; (800239c <MX_TIM1_Init+0x180>)
 8002380:	f003 fb56 	bl	8005a30 <HAL_TIMEx_ConfigBreakDeadTime>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800238a:	f7ff fdf1 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800238e:	4803      	ldr	r0, [pc, #12]	; (800239c <MX_TIM1_Init+0x180>)
 8002390:	f000 f9b2 	bl	80026f8 <HAL_TIM_MspPostInit>

}
 8002394:	bf00      	nop
 8002396:	3758      	adds	r7, #88	; 0x58
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000354 	.word	0x20000354
 80023a0:	40012c00 	.word	0x40012c00

080023a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b8:	463b      	mov	r3, r7
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <MX_TIM2_Init+0x98>)
 80023c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <MX_TIM2_Init+0x98>)
 80023ca:	f240 22cf 	movw	r2, #719	; 0x2cf
 80023ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	; (800243c <MX_TIM2_Init+0x98>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80023d6:	4b19      	ldr	r3, [pc, #100]	; (800243c <MX_TIM2_Init+0x98>)
 80023d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80023dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <MX_TIM2_Init+0x98>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <MX_TIM2_Init+0x98>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023ea:	4814      	ldr	r0, [pc, #80]	; (800243c <MX_TIM2_Init+0x98>)
 80023ec:	f002 f8e4 	bl	80045b8 <HAL_TIM_Base_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023f6:	f7ff fdbb 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002400:	f107 0308 	add.w	r3, r7, #8
 8002404:	4619      	mov	r1, r3
 8002406:	480d      	ldr	r0, [pc, #52]	; (800243c <MX_TIM2_Init+0x98>)
 8002408:	f002 fe22 	bl	8005050 <HAL_TIM_ConfigClockSource>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002412:	f7ff fdad 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800241e:	463b      	mov	r3, r7
 8002420:	4619      	mov	r1, r3
 8002422:	4806      	ldr	r0, [pc, #24]	; (800243c <MX_TIM2_Init+0x98>)
 8002424:	f003 faa6 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800242e:	f7ff fd9f 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000039c 	.word	0x2000039c

08002440 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002446:	f107 0308 	add.w	r3, r7, #8
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002454:	463b      	mov	r3, r7
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800245c:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <MX_TIM3_Init+0x94>)
 800245e:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <MX_TIM3_Init+0x98>)
 8002460:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <MX_TIM3_Init+0x94>)
 8002464:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002468:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <MX_TIM3_Init+0x94>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <MX_TIM3_Init+0x94>)
 8002472:	f242 720f 	movw	r2, #9999	; 0x270f
 8002476:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002478:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <MX_TIM3_Init+0x94>)
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <MX_TIM3_Init+0x94>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002484:	4813      	ldr	r0, [pc, #76]	; (80024d4 <MX_TIM3_Init+0x94>)
 8002486:	f002 f897 	bl	80045b8 <HAL_TIM_Base_Init>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002490:	f7ff fd6e 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002498:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800249a:	f107 0308 	add.w	r3, r7, #8
 800249e:	4619      	mov	r1, r3
 80024a0:	480c      	ldr	r0, [pc, #48]	; (80024d4 <MX_TIM3_Init+0x94>)
 80024a2:	f002 fdd5 	bl	8005050 <HAL_TIM_ConfigClockSource>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80024ac:	f7ff fd60 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024b0:	2320      	movs	r3, #32
 80024b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024b8:	463b      	mov	r3, r7
 80024ba:	4619      	mov	r1, r3
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_TIM3_Init+0x94>)
 80024be:	f003 fa59 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80024c8:	f7ff fd52 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000030c 	.word	0x2000030c
 80024d8:	40000400 	.word	0x40000400

080024dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08e      	sub	sp, #56	; 0x38
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80024ec:	f107 0320 	add.w	r3, r7, #32
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
 8002508:	615a      	str	r2, [r3, #20]
 800250a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800250c:	4b37      	ldr	r3, [pc, #220]	; (80025ec <MX_TIM4_Init+0x110>)
 800250e:	4a38      	ldr	r2, [pc, #224]	; (80025f0 <MX_TIM4_Init+0x114>)
 8002510:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002512:	4b36      	ldr	r3, [pc, #216]	; (80025ec <MX_TIM4_Init+0x110>)
 8002514:	2247      	movs	r2, #71	; 0x47
 8002516:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002518:	4b34      	ldr	r3, [pc, #208]	; (80025ec <MX_TIM4_Init+0x110>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800251e:	4b33      	ldr	r3, [pc, #204]	; (80025ec <MX_TIM4_Init+0x110>)
 8002520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002524:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002526:	4b31      	ldr	r3, [pc, #196]	; (80025ec <MX_TIM4_Init+0x110>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252c:	4b2f      	ldr	r3, [pc, #188]	; (80025ec <MX_TIM4_Init+0x110>)
 800252e:	2200      	movs	r2, #0
 8002530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002532:	482e      	ldr	r0, [pc, #184]	; (80025ec <MX_TIM4_Init+0x110>)
 8002534:	f002 f9dc 	bl	80048f0 <HAL_TIM_IC_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800253e:	f7ff fd17 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002542:	482a      	ldr	r0, [pc, #168]	; (80025ec <MX_TIM4_Init+0x110>)
 8002544:	f002 f8da 	bl	80046fc <HAL_TIM_PWM_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800254e:	f7ff fd0f 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800255a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800255e:	4619      	mov	r1, r3
 8002560:	4822      	ldr	r0, [pc, #136]	; (80025ec <MX_TIM4_Init+0x110>)
 8002562:	f003 fa07 	bl	8005974 <HAL_TIMEx_MasterConfigSynchronization>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800256c:	f7ff fd00 	bl	8001f70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002570:	2300      	movs	r3, #0
 8002572:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002574:	2302      	movs	r3, #2
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002578:	2300      	movs	r3, #0
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002580:	f107 0320 	add.w	r3, r7, #32
 8002584:	2200      	movs	r2, #0
 8002586:	4619      	mov	r1, r3
 8002588:	4818      	ldr	r0, [pc, #96]	; (80025ec <MX_TIM4_Init+0x110>)
 800258a:	f002 fc0f 	bl	8004dac <HAL_TIM_IC_ConfigChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM4_Init+0xbc>
  {
    Error_Handler();
 8002594:	f7ff fcec 	bl	8001f70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002598:	2302      	movs	r3, #2
 800259a:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800259c:	2301      	movs	r3, #1
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025a0:	f107 0320 	add.w	r3, r7, #32
 80025a4:	2204      	movs	r2, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4810      	ldr	r0, [pc, #64]	; (80025ec <MX_TIM4_Init+0x110>)
 80025aa:	f002 fbff 	bl	8004dac <HAL_TIM_IC_ConfigChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80025b4:	f7ff fcdc 	bl	8001f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025b8:	2360      	movs	r3, #96	; 0x60
 80025ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11;
 80025bc:	230b      	movs	r3, #11
 80025be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	2208      	movs	r2, #8
 80025cc:	4619      	mov	r1, r3
 80025ce:	4807      	ldr	r0, [pc, #28]	; (80025ec <MX_TIM4_Init+0x110>)
 80025d0:	f002 fc80 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80025da:	f7ff fcc9 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025de:	4803      	ldr	r0, [pc, #12]	; (80025ec <MX_TIM4_Init+0x110>)
 80025e0:	f000 f88a 	bl	80026f8 <HAL_TIM_MspPostInit>

}
 80025e4:	bf00      	nop
 80025e6:	3738      	adds	r7, #56	; 0x38
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200002c4 	.word	0x200002c4
 80025f0:	40000800 	.word	0x40000800

080025f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <HAL_TIM_Base_MspInit+0x7c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10c      	bne.n	8002620 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 800260c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002610:	6193      	str	r3, [r2, #24]
 8002612:	4b18      	ldr	r3, [pc, #96]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800261e:	e022      	b.n	8002666 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002628:	d10c      	bne.n	8002644 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	4a11      	ldr	r2, [pc, #68]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	61d3      	str	r3, [r2, #28]
 8002636:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]
}
 8002642:	e010      	b.n	8002666 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0b      	ldr	r2, [pc, #44]	; (8002678 <HAL_TIM_Base_MspInit+0x84>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d10b      	bne.n	8002666 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	61d3      	str	r3, [r2, #28]
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_TIM_Base_MspInit+0x80>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
}
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40021000 	.word	0x40021000
 8002678:	40000400 	.word	0x40000400

0800267c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM4)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a15      	ldr	r2, [pc, #84]	; (80026ec <HAL_TIM_IC_MspInit+0x70>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d123      	bne.n	80026e4 <HAL_TIM_IC_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_TIM_IC_MspInit+0x74>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <HAL_TIM_IC_MspInit+0x74>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	61d3      	str	r3, [r2, #28]
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_TIM_IC_MspInit+0x74>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <HAL_TIM_IC_MspInit+0x74>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <HAL_TIM_IC_MspInit+0x74>)
 80026ba:	f043 0308 	orr.w	r3, r3, #8
 80026be:	6193      	str	r3, [r2, #24]
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_TIM_IC_MspInit+0x74>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4619      	mov	r1, r3
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <HAL_TIM_IC_MspInit+0x78>)
 80026e0:	f001 f8c2 	bl	8003868 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80026e4:	bf00      	nop
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40000800 	.word	0x40000800
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40010c00 	.word	0x40010c00

080026f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 0310 	add.w	r3, r7, #16
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <HAL_TIM_MspPostInit+0x98>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d119      	bne.n	800274c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <HAL_TIM_MspPostInit+0x9c>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <HAL_TIM_MspPostInit+0x9c>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	6193      	str	r3, [r2, #24]
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_TIM_MspPostInit+0x9c>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002730:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2302      	movs	r3, #2
 800273c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 0310 	add.w	r3, r7, #16
 8002742:	4619      	mov	r1, r3
 8002744:	4814      	ldr	r0, [pc, #80]	; (8002798 <HAL_TIM_MspPostInit+0xa0>)
 8002746:	f001 f88f 	bl	8003868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800274a:	e01d      	b.n	8002788 <HAL_TIM_MspPostInit+0x90>
  else if(timHandle->Instance==TIM4)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a12      	ldr	r2, [pc, #72]	; (800279c <HAL_TIM_MspPostInit+0xa4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d118      	bne.n	8002788 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <HAL_TIM_MspPostInit+0x9c>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <HAL_TIM_MspPostInit+0x9c>)
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	6193      	str	r3, [r2, #24]
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <HAL_TIM_MspPostInit+0x9c>)
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800276e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2302      	movs	r3, #2
 800277a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	4619      	mov	r1, r3
 8002782:	4807      	ldr	r0, [pc, #28]	; (80027a0 <HAL_TIM_MspPostInit+0xa8>)
 8002784:	f001 f870 	bl	8003868 <HAL_GPIO_Init>
}
 8002788:	bf00      	nop
 800278a:	3720      	adds	r7, #32
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40021000 	.word	0x40021000
 8002798:	40010800 	.word	0x40010800
 800279c:	40000800 	.word	0x40000800
 80027a0:	40010c00 	.word	0x40010c00

080027a4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <MX_USART2_UART_Init+0x50>)
 80027ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027ca:	220c      	movs	r2, #12
 80027cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_USART2_UART_Init+0x4c>)
 80027dc:	f003 f98b 	bl	8005af6 <HAL_UART_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027e6:	f7ff fbc3 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000046c 	.word	0x2000046c
 80027f4:	40004400 	.word	0x40004400

080027f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <MX_USART3_UART_Init+0x50>)
 8002800:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 8002804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002808:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 800281e:	220c      	movs	r2, #12
 8002820:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800282e:	4805      	ldr	r0, [pc, #20]	; (8002844 <MX_USART3_UART_Init+0x4c>)
 8002830:	f003 f961 	bl	8005af6 <HAL_UART_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800283a:	f7ff fb99 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000428 	.word	0x20000428
 8002848:	40004800 	.word	0x40004800

0800284c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0318 	add.w	r3, r7, #24
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a44      	ldr	r2, [pc, #272]	; (8002978 <HAL_UART_MspInit+0x12c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d124      	bne.n	80028b6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800286c:	4b43      	ldr	r3, [pc, #268]	; (800297c <HAL_UART_MspInit+0x130>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	4a42      	ldr	r2, [pc, #264]	; (800297c <HAL_UART_MspInit+0x130>)
 8002872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002876:	61d3      	str	r3, [r2, #28]
 8002878:	4b40      	ldr	r3, [pc, #256]	; (800297c <HAL_UART_MspInit+0x130>)
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002884:	4b3d      	ldr	r3, [pc, #244]	; (800297c <HAL_UART_MspInit+0x130>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a3c      	ldr	r2, [pc, #240]	; (800297c <HAL_UART_MspInit+0x130>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b3a      	ldr	r3, [pc, #232]	; (800297c <HAL_UART_MspInit+0x130>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800289c:	230c      	movs	r3, #12
 800289e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	2302      	movs	r3, #2
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a8:	f107 0318 	add.w	r3, r7, #24
 80028ac:	4619      	mov	r1, r3
 80028ae:	4834      	ldr	r0, [pc, #208]	; (8002980 <HAL_UART_MspInit+0x134>)
 80028b0:	f000 ffda 	bl	8003868 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80028b4:	e05c      	b.n	8002970 <HAL_UART_MspInit+0x124>
  else if(uartHandle->Instance==USART3)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a32      	ldr	r2, [pc, #200]	; (8002984 <HAL_UART_MspInit+0x138>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d157      	bne.n	8002970 <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028c0:	4b2e      	ldr	r3, [pc, #184]	; (800297c <HAL_UART_MspInit+0x130>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	4a2d      	ldr	r2, [pc, #180]	; (800297c <HAL_UART_MspInit+0x130>)
 80028c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ca:	61d3      	str	r3, [r2, #28]
 80028cc:	4b2b      	ldr	r3, [pc, #172]	; (800297c <HAL_UART_MspInit+0x130>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <HAL_UART_MspInit+0x130>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4a27      	ldr	r2, [pc, #156]	; (800297c <HAL_UART_MspInit+0x130>)
 80028de:	f043 0308 	orr.w	r3, r3, #8
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_UART_MspInit+0x130>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fe:	f107 0318 	add.w	r3, r7, #24
 8002902:	4619      	mov	r1, r3
 8002904:	4820      	ldr	r0, [pc, #128]	; (8002988 <HAL_UART_MspInit+0x13c>)
 8002906:	f000 ffaf 	bl	8003868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800290a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002918:	f107 0318 	add.w	r3, r7, #24
 800291c:	4619      	mov	r1, r3
 800291e:	481a      	ldr	r0, [pc, #104]	; (8002988 <HAL_UART_MspInit+0x13c>)
 8002920:	f000 ffa2 	bl	8003868 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_UART_MspInit+0x140>)
 8002926:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <HAL_UART_MspInit+0x144>)
 8002928:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_UART_MspInit+0x140>)
 800292c:	2200      	movs	r2, #0
 800292e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <HAL_UART_MspInit+0x140>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_UART_MspInit+0x140>)
 8002938:	2280      	movs	r2, #128	; 0x80
 800293a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800293c:	4b13      	ldr	r3, [pc, #76]	; (800298c <HAL_UART_MspInit+0x140>)
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_UART_MspInit+0x140>)
 8002944:	2200      	movs	r2, #0
 8002946:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002948:	4b10      	ldr	r3, [pc, #64]	; (800298c <HAL_UART_MspInit+0x140>)
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_UART_MspInit+0x140>)
 8002950:	2200      	movs	r2, #0
 8002952:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <HAL_UART_MspInit+0x140>)
 8002956:	f000 fd99 	bl	800348c <HAL_DMA_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_UART_MspInit+0x118>
      Error_Handler();
 8002960:	f7ff fb06 	bl	8001f70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_UART_MspInit+0x140>)
 8002968:	639a      	str	r2, [r3, #56]	; 0x38
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <HAL_UART_MspInit+0x140>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002970:	bf00      	nop
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40004400 	.word	0x40004400
 800297c:	40021000 	.word	0x40021000
 8002980:	40010800 	.word	0x40010800
 8002984:	40004800 	.word	0x40004800
 8002988:	40010c00 	.word	0x40010c00
 800298c:	200003e4 	.word	0x200003e4
 8002990:	40020030 	.word	0x40020030

08002994 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002996:	490d      	ldr	r1, [pc, #52]	; (80029cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800299c:	e002      	b.n	80029a4 <LoopCopyDataInit>

0800299e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029a2:	3304      	adds	r3, #4

080029a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a8:	d3f9      	bcc.n	800299e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029ac:	4c0a      	ldr	r4, [pc, #40]	; (80029d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b0:	e001      	b.n	80029b6 <LoopFillZerobss>

080029b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b4:	3204      	adds	r2, #4

080029b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b8:	d3fb      	bcc.n	80029b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029ba:	f7ff fc29 	bl	8002210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029be:	f003 fb3f 	bl	8006040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029c2:	f7fe fd6b 	bl	800149c <main>
  bx lr
 80029c6:	4770      	bx	lr
  ldr r0, =_sdata
 80029c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029cc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80029d0:	0800adbc 	.word	0x0800adbc
  ldr r2, =_sbss
 80029d4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80029d8:	200004c4 	.word	0x200004c4

080029dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029dc:	e7fe      	b.n	80029dc <ADC1_2_IRQHandler>
	...

080029e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e4:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <HAL_Init+0x28>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <HAL_Init+0x28>)
 80029ea:	f043 0310 	orr.w	r3, r3, #16
 80029ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f0:	2003      	movs	r0, #3
 80029f2:	f000 fd09 	bl	8003408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f000 f808 	bl	8002a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029fc:	f7ff fabe 	bl	8001f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40022000 	.word	0x40022000

08002a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_InitTick+0x54>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_InitTick+0x58>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fd21 	bl	8003472 <HAL_SYSTICK_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00e      	b.n	8002a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0f      	cmp	r3, #15
 8002a3e:	d80a      	bhi.n	8002a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a40:	2200      	movs	r2, #0
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f000 fce9 	bl	800341e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a4c:	4a06      	ldr	r2, [pc, #24]	; (8002a68 <HAL_InitTick+0x5c>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e000      	b.n	8002a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000008 	.word	0x20000008
 8002a68:	20000004 	.word	0x20000004

08002a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_IncTick+0x1c>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_IncTick+0x20>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a03      	ldr	r2, [pc, #12]	; (8002a8c <HAL_IncTick+0x20>)
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	20000008 	.word	0x20000008
 8002a8c:	200004b0 	.word	0x200004b0

08002a90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return uwTick;
 8002a94:	4b02      	ldr	r3, [pc, #8]	; (8002aa0 <HAL_GetTick+0x10>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	200004b0 	.word	0x200004b0

08002aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff fff0 	bl	8002a90 <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d005      	beq.n	8002aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_Delay+0x44>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aca:	bf00      	nop
 8002acc:	f7ff ffe0 	bl	8002a90 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d8f7      	bhi.n	8002acc <HAL_Delay+0x28>
  {
  }
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000008 	.word	0x20000008

08002aec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0be      	b.n	8002c8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe fb76 	bl	800121c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 faf5 	bl	8003120 <ADC_ConversionStop_Disable>
 8002b36:	4603      	mov	r3, r0
 8002b38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 8099 	bne.w	8002c7a <HAL_ADC_Init+0x18e>
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f040 8095 	bne.w	8002c7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b58:	f023 0302 	bic.w	r3, r3, #2
 8002b5c:	f043 0202 	orr.w	r2, r3, #2
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7b1b      	ldrb	r3, [r3, #12]
 8002b72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b84:	d003      	beq.n	8002b8e <HAL_ADC_Init+0xa2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_ADC_Init+0xa8>
 8002b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b92:	e000      	b.n	8002b96 <HAL_ADC_Init+0xaa>
 8002b94:	2300      	movs	r3, #0
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7d1b      	ldrb	r3, [r3, #20]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d119      	bne.n	8002bd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7b1b      	ldrb	r3, [r3, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	035a      	lsls	r2, r3, #13
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	f043 0201 	orr.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <HAL_ADC_Init+0x1a8>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c08:	d003      	beq.n	8002c12 <HAL_ADC_Init+0x126>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d104      	bne.n	8002c1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	051b      	lsls	r3, r3, #20
 8002c1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_ADC_Init+0x1ac>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d10b      	bne.n	8002c58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	f023 0303 	bic.w	r3, r3, #3
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c56:	e018      	b.n	8002c8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	f023 0312 	bic.w	r3, r3, #18
 8002c60:	f043 0210 	orr.w	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c78:	e007      	b.n	8002c8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f043 0210 	orr.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	ffe1f7fd 	.word	0xffe1f7fd
 8002c98:	ff1f0efe 	.word	0xff1f0efe

08002c9c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a64      	ldr	r2, [pc, #400]	; (8002e44 <HAL_ADC_Start_DMA+0x1a8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d004      	beq.n	8002cc0 <HAL_ADC_Start_DMA+0x24>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a63      	ldr	r2, [pc, #396]	; (8002e48 <HAL_ADC_Start_DMA+0x1ac>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d106      	bne.n	8002cce <HAL_ADC_Start_DMA+0x32>
 8002cc0:	4b60      	ldr	r3, [pc, #384]	; (8002e44 <HAL_ADC_Start_DMA+0x1a8>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f040 80b3 	bne.w	8002e34 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_Start_DMA+0x40>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e0ae      	b.n	8002e3a <HAL_ADC_Start_DMA+0x19e>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f9c1 	bl	800306c <ADC_Enable>
 8002cea:	4603      	mov	r3, r0
 8002cec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f040 809a 	bne.w	8002e2a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a4e      	ldr	r2, [pc, #312]	; (8002e48 <HAL_ADC_Start_DMA+0x1ac>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d105      	bne.n	8002d20 <HAL_ADC_Start_DMA+0x84>
 8002d14:	4b4b      	ldr	r3, [pc, #300]	; (8002e44 <HAL_ADC_Start_DMA+0x1a8>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d115      	bne.n	8002d4c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d026      	beq.n	8002d88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d4a:	e01d      	b.n	8002d88 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a39      	ldr	r2, [pc, #228]	; (8002e44 <HAL_ADC_Start_DMA+0x1a8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <HAL_ADC_Start_DMA+0xd0>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a38      	ldr	r2, [pc, #224]	; (8002e48 <HAL_ADC_Start_DMA+0x1ac>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d10d      	bne.n	8002d88 <HAL_ADC_Start_DMA+0xec>
 8002d6c:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <HAL_ADC_Start_DMA+0x1a8>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	f023 0206 	bic.w	r2, r3, #6
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002da0:	e002      	b.n	8002da8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <HAL_ADC_Start_DMA+0x1b0>)
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <HAL_ADC_Start_DMA+0x1b4>)
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <HAL_ADC_Start_DMA+0x1b8>)
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0202 	mvn.w	r2, #2
 8002dd0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002de0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a18      	ldr	r0, [r3, #32]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	334c      	adds	r3, #76	; 0x4c
 8002dec:	4619      	mov	r1, r3
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f000 fba5 	bl	8003540 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e00:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e04:	d108      	bne.n	8002e18 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002e14:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002e16:	e00f      	b.n	8002e38 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e26:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002e28:	e006      	b.n	8002e38 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002e32:	e001      	b.n	8002e38 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40012400 	.word	0x40012400
 8002e48:	40012800 	.word	0x40012800
 8002e4c:	080031a3 	.word	0x080031a3
 8002e50:	0800321f 	.word	0x0800321f
 8002e54:	0800323b 	.word	0x0800323b

08002e58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x20>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e0dc      	b.n	8003056 <HAL_ADC_ConfigChannel+0x1da>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b06      	cmp	r3, #6
 8002eaa:	d81c      	bhi.n	8002ee6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	3b05      	subs	r3, #5
 8002ebe:	221f      	movs	r2, #31
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	4019      	ands	r1, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3b05      	subs	r3, #5
 8002ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee4:	e03c      	b.n	8002f60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b0c      	cmp	r3, #12
 8002eec:	d81c      	bhi.n	8002f28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	3b23      	subs	r3, #35	; 0x23
 8002f00:	221f      	movs	r2, #31
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	4019      	ands	r1, r3
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	3b23      	subs	r3, #35	; 0x23
 8002f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
 8002f26:	e01b      	b.n	8002f60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	3b41      	subs	r3, #65	; 0x41
 8002f3a:	221f      	movs	r2, #31
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	4019      	ands	r1, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	3b41      	subs	r3, #65	; 0x41
 8002f54:	fa00 f203 	lsl.w	r2, r0, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b09      	cmp	r3, #9
 8002f66:	d91c      	bls.n	8002fa2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68d9      	ldr	r1, [r3, #12]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	3b1e      	subs	r3, #30
 8002f7a:	2207      	movs	r2, #7
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	4019      	ands	r1, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	6898      	ldr	r0, [r3, #8]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	3b1e      	subs	r3, #30
 8002f94:	fa00 f203 	lsl.w	r2, r0, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	60da      	str	r2, [r3, #12]
 8002fa0:	e019      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6919      	ldr	r1, [r3, #16]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	2207      	movs	r2, #7
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	4019      	ands	r1, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	6898      	ldr	r0, [r3, #8]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4413      	add	r3, r2
 8002fca:	fa00 f203 	lsl.w	r2, r0, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d003      	beq.n	8002fe6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fe2:	2b11      	cmp	r3, #17
 8002fe4:	d132      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <HAL_ADC_ConfigChannel+0x1e4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d125      	bne.n	800303c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d126      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800300c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b10      	cmp	r3, #16
 8003014:	d11a      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <HAL_ADC_ConfigChannel+0x1e8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a13      	ldr	r2, [pc, #76]	; (8003068 <HAL_ADC_ConfigChannel+0x1ec>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	0c9a      	lsrs	r2, r3, #18
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800302c:	e002      	b.n	8003034 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3b01      	subs	r3, #1
 8003032:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f9      	bne.n	800302e <HAL_ADC_ConfigChannel+0x1b2>
 800303a:	e007      	b.n	800304c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	f043 0220 	orr.w	r2, r3, #32
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	40012400 	.word	0x40012400
 8003064:	20000000 	.word	0x20000000
 8003068:	431bde83 	.word	0x431bde83

0800306c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d040      	beq.n	800310c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800309a:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <ADC_Enable+0xac>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1f      	ldr	r2, [pc, #124]	; (800311c <ADC_Enable+0xb0>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	0c9b      	lsrs	r3, r3, #18
 80030a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80030a8:	e002      	b.n	80030b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f9      	bne.n	80030aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030b6:	f7ff fceb 	bl	8002a90 <HAL_GetTick>
 80030ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030bc:	e01f      	b.n	80030fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030be:	f7ff fce7 	bl	8002a90 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d918      	bls.n	80030fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d011      	beq.n	80030fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	f043 0210 	orr.w	r2, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e007      	b.n	800310e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d1d8      	bne.n	80030be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000000 	.word	0x20000000
 800311c:	431bde83 	.word	0x431bde83

08003120 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d12e      	bne.n	8003198 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0201 	bic.w	r2, r2, #1
 8003148:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800314a:	f7ff fca1 	bl	8002a90 <HAL_GetTick>
 800314e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003150:	e01b      	b.n	800318a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003152:	f7ff fc9d 	bl	8002a90 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d914      	bls.n	800318a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10d      	bne.n	800318a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	f043 0210 	orr.w	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e007      	b.n	800319a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d0dc      	beq.n	8003152 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d127      	bne.n	800320c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031d6:	d115      	bne.n	8003204 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d111      	bne.n	8003204 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7fe fe37 	bl	8001e78 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800320a:	e004      	b.n	8003216 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f7ff fe13 	bl	8002e58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	f043 0204 	orr.w	r2, r3, #4
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f7ff fe02 	bl	8002e6a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800328c:	4013      	ands	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800329c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032a2:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <__NVIC_SetPriorityGrouping+0x44>)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	60d3      	str	r3, [r2, #12]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <__NVIC_GetPriorityGrouping+0x18>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	f003 0307 	and.w	r3, r3, #7
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	db0b      	blt.n	80032fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	f003 021f 	and.w	r2, r3, #31
 80032ec:	4906      	ldr	r1, [pc, #24]	; (8003308 <__NVIC_EnableIRQ+0x34>)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2001      	movs	r0, #1
 80032f6:	fa00 f202 	lsl.w	r2, r0, r2
 80032fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	e000e100 	.word	0xe000e100

0800330c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	6039      	str	r1, [r7, #0]
 8003316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331c:	2b00      	cmp	r3, #0
 800331e:	db0a      	blt.n	8003336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	490c      	ldr	r1, [pc, #48]	; (8003358 <__NVIC_SetPriority+0x4c>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	0112      	lsls	r2, r2, #4
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	440b      	add	r3, r1
 8003330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003334:	e00a      	b.n	800334c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4908      	ldr	r1, [pc, #32]	; (800335c <__NVIC_SetPriority+0x50>)
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	3b04      	subs	r3, #4
 8003344:	0112      	lsls	r2, r2, #4
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	440b      	add	r3, r1
 800334a:	761a      	strb	r2, [r3, #24]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000e100 	.word	0xe000e100
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	; 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f1c3 0307 	rsb	r3, r3, #7
 800337a:	2b04      	cmp	r3, #4
 800337c:	bf28      	it	cs
 800337e:	2304      	movcs	r3, #4
 8003380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3304      	adds	r3, #4
 8003386:	2b06      	cmp	r3, #6
 8003388:	d902      	bls.n	8003390 <NVIC_EncodePriority+0x30>
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	3b03      	subs	r3, #3
 800338e:	e000      	b.n	8003392 <NVIC_EncodePriority+0x32>
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003394:	f04f 32ff 	mov.w	r2, #4294967295
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43da      	mvns	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	401a      	ands	r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	43d9      	mvns	r1, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	4313      	orrs	r3, r2
         );
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3724      	adds	r7, #36	; 0x24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr

080033c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d4:	d301      	bcc.n	80033da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d6:	2301      	movs	r3, #1
 80033d8:	e00f      	b.n	80033fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <SysTick_Config+0x40>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033e2:	210f      	movs	r1, #15
 80033e4:	f04f 30ff 	mov.w	r0, #4294967295
 80033e8:	f7ff ff90 	bl	800330c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <SysTick_Config+0x40>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033f2:	4b04      	ldr	r3, [pc, #16]	; (8003404 <SysTick_Config+0x40>)
 80033f4:	2207      	movs	r2, #7
 80033f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	e000e010 	.word	0xe000e010

08003408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ff2d 	bl	8003270 <__NVIC_SetPriorityGrouping>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	4603      	mov	r3, r0
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003430:	f7ff ff42 	bl	80032b8 <__NVIC_GetPriorityGrouping>
 8003434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	6978      	ldr	r0, [r7, #20]
 800343c:	f7ff ff90 	bl	8003360 <NVIC_EncodePriority>
 8003440:	4602      	mov	r2, r0
 8003442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff5f 	bl	800330c <__NVIC_SetPriority>
}
 800344e:	bf00      	nop
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	4603      	mov	r3, r0
 800345e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff35 	bl	80032d4 <__NVIC_EnableIRQ>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ffa2 	bl	80033c4 <SysTick_Config>
 8003480:	4603      	mov	r3, r0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e043      	b.n	800352a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	4b22      	ldr	r3, [pc, #136]	; (8003534 <HAL_DMA_Init+0xa8>)
 80034aa:	4413      	add	r3, r2
 80034ac:	4a22      	ldr	r2, [pc, #136]	; (8003538 <HAL_DMA_Init+0xac>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	009a      	lsls	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1f      	ldr	r2, [pc, #124]	; (800353c <HAL_DMA_Init+0xb0>)
 80034be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80034d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80034da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	bffdfff8 	.word	0xbffdfff8
 8003538:	cccccccd 	.word	0xcccccccd
 800353c:	40020000 	.word	0x40020000

08003540 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_DMA_Start_IT+0x20>
 800355c:	2302      	movs	r3, #2
 800355e:	e04a      	b.n	80035f6 <HAL_DMA_Start_IT+0xb6>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800356e:	2b01      	cmp	r3, #1
 8003570:	d13a      	bne.n	80035e8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2202      	movs	r2, #2
 8003576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f938 	bl	800380c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 020e 	orr.w	r2, r2, #14
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e00f      	b.n	80035d6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0204 	bic.w	r2, r2, #4
 80035c4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 020a 	orr.w	r2, r2, #10
 80035d4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e005      	b.n	80035f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
 80035f2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	2204      	movs	r2, #4
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d04f      	beq.n	80036c8 <HAL_DMA_IRQHandler+0xc8>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d04a      	beq.n	80036c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d107      	bne.n	8003650 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0204 	bic.w	r2, r2, #4
 800364e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a66      	ldr	r2, [pc, #408]	; (80037f0 <HAL_DMA_IRQHandler+0x1f0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d029      	beq.n	80036ae <HAL_DMA_IRQHandler+0xae>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a65      	ldr	r2, [pc, #404]	; (80037f4 <HAL_DMA_IRQHandler+0x1f4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d022      	beq.n	80036aa <HAL_DMA_IRQHandler+0xaa>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a63      	ldr	r2, [pc, #396]	; (80037f8 <HAL_DMA_IRQHandler+0x1f8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01a      	beq.n	80036a4 <HAL_DMA_IRQHandler+0xa4>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a62      	ldr	r2, [pc, #392]	; (80037fc <HAL_DMA_IRQHandler+0x1fc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d012      	beq.n	800369e <HAL_DMA_IRQHandler+0x9e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a60      	ldr	r2, [pc, #384]	; (8003800 <HAL_DMA_IRQHandler+0x200>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00a      	beq.n	8003698 <HAL_DMA_IRQHandler+0x98>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5f      	ldr	r2, [pc, #380]	; (8003804 <HAL_DMA_IRQHandler+0x204>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d102      	bne.n	8003692 <HAL_DMA_IRQHandler+0x92>
 800368c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003690:	e00e      	b.n	80036b0 <HAL_DMA_IRQHandler+0xb0>
 8003692:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003696:	e00b      	b.n	80036b0 <HAL_DMA_IRQHandler+0xb0>
 8003698:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800369c:	e008      	b.n	80036b0 <HAL_DMA_IRQHandler+0xb0>
 800369e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036a2:	e005      	b.n	80036b0 <HAL_DMA_IRQHandler+0xb0>
 80036a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a8:	e002      	b.n	80036b0 <HAL_DMA_IRQHandler+0xb0>
 80036aa:	2340      	movs	r3, #64	; 0x40
 80036ac:	e000      	b.n	80036b0 <HAL_DMA_IRQHandler+0xb0>
 80036ae:	2304      	movs	r3, #4
 80036b0:	4a55      	ldr	r2, [pc, #340]	; (8003808 <HAL_DMA_IRQHandler+0x208>)
 80036b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 8094 	beq.w	80037e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80036c6:	e08e      	b.n	80037e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	2202      	movs	r2, #2
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d056      	beq.n	8003786 <HAL_DMA_IRQHandler+0x186>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d051      	beq.n	8003786 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 020a 	bic.w	r2, r2, #10
 80036fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <HAL_DMA_IRQHandler+0x1f0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d029      	beq.n	8003766 <HAL_DMA_IRQHandler+0x166>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a37      	ldr	r2, [pc, #220]	; (80037f4 <HAL_DMA_IRQHandler+0x1f4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d022      	beq.n	8003762 <HAL_DMA_IRQHandler+0x162>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a35      	ldr	r2, [pc, #212]	; (80037f8 <HAL_DMA_IRQHandler+0x1f8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d01a      	beq.n	800375c <HAL_DMA_IRQHandler+0x15c>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a34      	ldr	r2, [pc, #208]	; (80037fc <HAL_DMA_IRQHandler+0x1fc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d012      	beq.n	8003756 <HAL_DMA_IRQHandler+0x156>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a32      	ldr	r2, [pc, #200]	; (8003800 <HAL_DMA_IRQHandler+0x200>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00a      	beq.n	8003750 <HAL_DMA_IRQHandler+0x150>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a31      	ldr	r2, [pc, #196]	; (8003804 <HAL_DMA_IRQHandler+0x204>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d102      	bne.n	800374a <HAL_DMA_IRQHandler+0x14a>
 8003744:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003748:	e00e      	b.n	8003768 <HAL_DMA_IRQHandler+0x168>
 800374a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800374e:	e00b      	b.n	8003768 <HAL_DMA_IRQHandler+0x168>
 8003750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003754:	e008      	b.n	8003768 <HAL_DMA_IRQHandler+0x168>
 8003756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800375a:	e005      	b.n	8003768 <HAL_DMA_IRQHandler+0x168>
 800375c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003760:	e002      	b.n	8003768 <HAL_DMA_IRQHandler+0x168>
 8003762:	2320      	movs	r3, #32
 8003764:	e000      	b.n	8003768 <HAL_DMA_IRQHandler+0x168>
 8003766:	2302      	movs	r3, #2
 8003768:	4a27      	ldr	r2, [pc, #156]	; (8003808 <HAL_DMA_IRQHandler+0x208>)
 800376a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d034      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003784:	e02f      	b.n	80037e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2208      	movs	r2, #8
 800378c:	409a      	lsls	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d028      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x1e8>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d023      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 020e 	bic.w	r2, r2, #14
 80037ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	2101      	movs	r1, #1
 80037ba:	fa01 f202 	lsl.w	r2, r1, r2
 80037be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d004      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
    }
  }
  return;
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
}
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40020008 	.word	0x40020008
 80037f4:	4002001c 	.word	0x4002001c
 80037f8:	40020030 	.word	0x40020030
 80037fc:	40020044 	.word	0x40020044
 8003800:	40020058 	.word	0x40020058
 8003804:	4002006c 	.word	0x4002006c
 8003808:	40020000 	.word	0x40020000

0800380c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f202 	lsl.w	r2, r1, r2
 8003828:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b10      	cmp	r3, #16
 8003838:	d108      	bne.n	800384c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800384a:	e007      	b.n	800385c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	60da      	str	r2, [r3, #12]
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
	...

08003868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003868:	b480      	push	{r7}
 800386a:	b08b      	sub	sp, #44	; 0x2c
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003876:	2300      	movs	r3, #0
 8003878:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800387a:	e169      	b.n	8003b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800387c:	2201      	movs	r2, #1
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	429a      	cmp	r2, r3
 8003896:	f040 8158 	bne.w	8003b4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4a9a      	ldr	r2, [pc, #616]	; (8003b08 <HAL_GPIO_Init+0x2a0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d05e      	beq.n	8003962 <HAL_GPIO_Init+0xfa>
 80038a4:	4a98      	ldr	r2, [pc, #608]	; (8003b08 <HAL_GPIO_Init+0x2a0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d875      	bhi.n	8003996 <HAL_GPIO_Init+0x12e>
 80038aa:	4a98      	ldr	r2, [pc, #608]	; (8003b0c <HAL_GPIO_Init+0x2a4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d058      	beq.n	8003962 <HAL_GPIO_Init+0xfa>
 80038b0:	4a96      	ldr	r2, [pc, #600]	; (8003b0c <HAL_GPIO_Init+0x2a4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d86f      	bhi.n	8003996 <HAL_GPIO_Init+0x12e>
 80038b6:	4a96      	ldr	r2, [pc, #600]	; (8003b10 <HAL_GPIO_Init+0x2a8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d052      	beq.n	8003962 <HAL_GPIO_Init+0xfa>
 80038bc:	4a94      	ldr	r2, [pc, #592]	; (8003b10 <HAL_GPIO_Init+0x2a8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d869      	bhi.n	8003996 <HAL_GPIO_Init+0x12e>
 80038c2:	4a94      	ldr	r2, [pc, #592]	; (8003b14 <HAL_GPIO_Init+0x2ac>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d04c      	beq.n	8003962 <HAL_GPIO_Init+0xfa>
 80038c8:	4a92      	ldr	r2, [pc, #584]	; (8003b14 <HAL_GPIO_Init+0x2ac>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d863      	bhi.n	8003996 <HAL_GPIO_Init+0x12e>
 80038ce:	4a92      	ldr	r2, [pc, #584]	; (8003b18 <HAL_GPIO_Init+0x2b0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d046      	beq.n	8003962 <HAL_GPIO_Init+0xfa>
 80038d4:	4a90      	ldr	r2, [pc, #576]	; (8003b18 <HAL_GPIO_Init+0x2b0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d85d      	bhi.n	8003996 <HAL_GPIO_Init+0x12e>
 80038da:	2b12      	cmp	r3, #18
 80038dc:	d82a      	bhi.n	8003934 <HAL_GPIO_Init+0xcc>
 80038de:	2b12      	cmp	r3, #18
 80038e0:	d859      	bhi.n	8003996 <HAL_GPIO_Init+0x12e>
 80038e2:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <HAL_GPIO_Init+0x80>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	08003963 	.word	0x08003963
 80038ec:	0800393d 	.word	0x0800393d
 80038f0:	0800394f 	.word	0x0800394f
 80038f4:	08003991 	.word	0x08003991
 80038f8:	08003997 	.word	0x08003997
 80038fc:	08003997 	.word	0x08003997
 8003900:	08003997 	.word	0x08003997
 8003904:	08003997 	.word	0x08003997
 8003908:	08003997 	.word	0x08003997
 800390c:	08003997 	.word	0x08003997
 8003910:	08003997 	.word	0x08003997
 8003914:	08003997 	.word	0x08003997
 8003918:	08003997 	.word	0x08003997
 800391c:	08003997 	.word	0x08003997
 8003920:	08003997 	.word	0x08003997
 8003924:	08003997 	.word	0x08003997
 8003928:	08003997 	.word	0x08003997
 800392c:	08003945 	.word	0x08003945
 8003930:	08003959 	.word	0x08003959
 8003934:	4a79      	ldr	r2, [pc, #484]	; (8003b1c <HAL_GPIO_Init+0x2b4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800393a:	e02c      	b.n	8003996 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	623b      	str	r3, [r7, #32]
          break;
 8003942:	e029      	b.n	8003998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	3304      	adds	r3, #4
 800394a:	623b      	str	r3, [r7, #32]
          break;
 800394c:	e024      	b.n	8003998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	3308      	adds	r3, #8
 8003954:	623b      	str	r3, [r7, #32]
          break;
 8003956:	e01f      	b.n	8003998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	330c      	adds	r3, #12
 800395e:	623b      	str	r3, [r7, #32]
          break;
 8003960:	e01a      	b.n	8003998 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800396a:	2304      	movs	r3, #4
 800396c:	623b      	str	r3, [r7, #32]
          break;
 800396e:	e013      	b.n	8003998 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003978:	2308      	movs	r3, #8
 800397a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	611a      	str	r2, [r3, #16]
          break;
 8003982:	e009      	b.n	8003998 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003984:	2308      	movs	r3, #8
 8003986:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	615a      	str	r2, [r3, #20]
          break;
 800398e:	e003      	b.n	8003998 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003990:	2300      	movs	r3, #0
 8003992:	623b      	str	r3, [r7, #32]
          break;
 8003994:	e000      	b.n	8003998 <HAL_GPIO_Init+0x130>
          break;
 8003996:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2bff      	cmp	r3, #255	; 0xff
 800399c:	d801      	bhi.n	80039a2 <HAL_GPIO_Init+0x13a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	e001      	b.n	80039a6 <HAL_GPIO_Init+0x13e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3304      	adds	r3, #4
 80039a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2bff      	cmp	r3, #255	; 0xff
 80039ac:	d802      	bhi.n	80039b4 <HAL_GPIO_Init+0x14c>
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	e002      	b.n	80039ba <HAL_GPIO_Init+0x152>
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	3b08      	subs	r3, #8
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	210f      	movs	r1, #15
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	401a      	ands	r2, r3
 80039cc:	6a39      	ldr	r1, [r7, #32]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	fa01 f303 	lsl.w	r3, r1, r3
 80039d4:	431a      	orrs	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80b1 	beq.w	8003b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039e8:	4b4d      	ldr	r3, [pc, #308]	; (8003b20 <HAL_GPIO_Init+0x2b8>)
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	4a4c      	ldr	r2, [pc, #304]	; (8003b20 <HAL_GPIO_Init+0x2b8>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6193      	str	r3, [r2, #24]
 80039f4:	4b4a      	ldr	r3, [pc, #296]	; (8003b20 <HAL_GPIO_Init+0x2b8>)
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a00:	4a48      	ldr	r2, [pc, #288]	; (8003b24 <HAL_GPIO_Init+0x2bc>)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	089b      	lsrs	r3, r3, #2
 8003a06:	3302      	adds	r3, #2
 8003a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	220f      	movs	r2, #15
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4013      	ands	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a40      	ldr	r2, [pc, #256]	; (8003b28 <HAL_GPIO_Init+0x2c0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <HAL_GPIO_Init+0x1ec>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a3f      	ldr	r2, [pc, #252]	; (8003b2c <HAL_GPIO_Init+0x2c4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00d      	beq.n	8003a50 <HAL_GPIO_Init+0x1e8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a3e      	ldr	r2, [pc, #248]	; (8003b30 <HAL_GPIO_Init+0x2c8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <HAL_GPIO_Init+0x1e4>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a3d      	ldr	r2, [pc, #244]	; (8003b34 <HAL_GPIO_Init+0x2cc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_GPIO_Init+0x1e0>
 8003a44:	2303      	movs	r3, #3
 8003a46:	e006      	b.n	8003a56 <HAL_GPIO_Init+0x1ee>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	e004      	b.n	8003a56 <HAL_GPIO_Init+0x1ee>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e002      	b.n	8003a56 <HAL_GPIO_Init+0x1ee>
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <HAL_GPIO_Init+0x1ee>
 8003a54:	2300      	movs	r3, #0
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	f002 0203 	and.w	r2, r2, #3
 8003a5c:	0092      	lsls	r2, r2, #2
 8003a5e:	4093      	lsls	r3, r2
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a66:	492f      	ldr	r1, [pc, #188]	; (8003b24 <HAL_GPIO_Init+0x2bc>)
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	089b      	lsrs	r3, r3, #2
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d006      	beq.n	8003a8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a80:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	492c      	ldr	r1, [pc, #176]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]
 8003a8c:	e006      	b.n	8003a9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a8e:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	4928      	ldr	r1, [pc, #160]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003aa8:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	4922      	ldr	r1, [pc, #136]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
 8003ab4:	e006      	b.n	8003ac4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	491e      	ldr	r1, [pc, #120]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	4918      	ldr	r1, [pc, #96]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]
 8003adc:	e006      	b.n	8003aec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ade:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	4914      	ldr	r1, [pc, #80]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d021      	beq.n	8003b3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003af8:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	490e      	ldr	r1, [pc, #56]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60cb      	str	r3, [r1, #12]
 8003b04:	e021      	b.n	8003b4a <HAL_GPIO_Init+0x2e2>
 8003b06:	bf00      	nop
 8003b08:	10320000 	.word	0x10320000
 8003b0c:	10310000 	.word	0x10310000
 8003b10:	10220000 	.word	0x10220000
 8003b14:	10210000 	.word	0x10210000
 8003b18:	10120000 	.word	0x10120000
 8003b1c:	10110000 	.word	0x10110000
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40010800 	.word	0x40010800
 8003b2c:	40010c00 	.word	0x40010c00
 8003b30:	40011000 	.word	0x40011000
 8003b34:	40011400 	.word	0x40011400
 8003b38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	4909      	ldr	r1, [pc, #36]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f47f ae8e 	bne.w	800387c <HAL_GPIO_Init+0x14>
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	372c      	adds	r7, #44	; 0x2c
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	40010400 	.word	0x40010400

08003b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b80:	787b      	ldrb	r3, [r7, #1]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b86:	887a      	ldrh	r2, [r7, #2]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b8c:	e003      	b.n	8003b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b8e:	887b      	ldrh	r3, [r7, #2]
 8003b90:	041a      	lsls	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	611a      	str	r2, [r3, #16]
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	041a      	lsls	r2, r3, #16
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	43d9      	mvns	r1, r3
 8003bbe:	887b      	ldrh	r3, [r7, #2]
 8003bc0:	400b      	ands	r3, r1
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	611a      	str	r2, [r3, #16]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
	...

08003bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d006      	beq.n	8003bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bea:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f806 	bl	8003c04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40010400 	.word	0x40010400

08003c04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e26c      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8087 	beq.w	8003d46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c38:	4b92      	ldr	r3, [pc, #584]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d00c      	beq.n	8003c5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c44:	4b8f      	ldr	r3, [pc, #572]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d112      	bne.n	8003c76 <HAL_RCC_OscConfig+0x5e>
 8003c50:	4b8c      	ldr	r3, [pc, #560]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5c:	d10b      	bne.n	8003c76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5e:	4b89      	ldr	r3, [pc, #548]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d06c      	beq.n	8003d44 <HAL_RCC_OscConfig+0x12c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d168      	bne.n	8003d44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e246      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x76>
 8003c80:	4b80      	ldr	r3, [pc, #512]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a7f      	ldr	r2, [pc, #508]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	e02e      	b.n	8003cec <HAL_RCC_OscConfig+0xd4>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x98>
 8003c96:	4b7b      	ldr	r3, [pc, #492]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a7a      	ldr	r2, [pc, #488]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	4b78      	ldr	r3, [pc, #480]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a77      	ldr	r2, [pc, #476]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	e01d      	b.n	8003cec <HAL_RCC_OscConfig+0xd4>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0xbc>
 8003cba:	4b72      	ldr	r3, [pc, #456]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a71      	ldr	r2, [pc, #452]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	4b6f      	ldr	r3, [pc, #444]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6e      	ldr	r2, [pc, #440]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	e00b      	b.n	8003cec <HAL_RCC_OscConfig+0xd4>
 8003cd4:	4b6b      	ldr	r3, [pc, #428]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6a      	ldr	r2, [pc, #424]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	4b68      	ldr	r3, [pc, #416]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a67      	ldr	r2, [pc, #412]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d013      	beq.n	8003d1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fecc 	bl	8002a90 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fe fec8 	bl	8002a90 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1fa      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	4b5d      	ldr	r3, [pc, #372]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0xe4>
 8003d1a:	e014      	b.n	8003d46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fe feb8 	bl	8002a90 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fe feb4 	bl	8002a90 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e1e6      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	4b53      	ldr	r3, [pc, #332]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x10c>
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d063      	beq.n	8003e1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d52:	4b4c      	ldr	r3, [pc, #304]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d5e:	4b49      	ldr	r3, [pc, #292]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d11c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x18c>
 8003d6a:	4b46      	ldr	r3, [pc, #280]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d116      	bne.n	8003da4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_RCC_OscConfig+0x176>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d001      	beq.n	8003d8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e1ba      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8e:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4939      	ldr	r1, [pc, #228]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da2:	e03a      	b.n	8003e1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d020      	beq.n	8003dee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dac:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fe fe6d 	bl	8002a90 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dba:	f7fe fe69 	bl	8002a90 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e19b      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4927      	ldr	r1, [pc, #156]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	600b      	str	r3, [r1, #0]
 8003dec:	e015      	b.n	8003e1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dee:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fe fe4c 	bl	8002a90 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfc:	f7fe fe48 	bl	8002a90 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e17a      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0e:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d03a      	beq.n	8003e9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d019      	beq.n	8003e62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2e:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e34:	f7fe fe2c 	bl	8002a90 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3c:	f7fe fe28 	bl	8002a90 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e15a      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	f000 fad8 	bl	8004410 <RCC_Delay>
 8003e60:	e01c      	b.n	8003e9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e68:	f7fe fe12 	bl	8002a90 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6e:	e00f      	b.n	8003e90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e70:	f7fe fe0e 	bl	8002a90 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d908      	bls.n	8003e90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e140      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	42420000 	.word	0x42420000
 8003e8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e90:	4b9e      	ldr	r3, [pc, #632]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e9      	bne.n	8003e70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80a6 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eae:	4b97      	ldr	r3, [pc, #604]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	4b94      	ldr	r3, [pc, #592]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4a93      	ldr	r2, [pc, #588]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	61d3      	str	r3, [r2, #28]
 8003ec6:	4b91      	ldr	r3, [pc, #580]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed6:	4b8e      	ldr	r3, [pc, #568]	; (8004110 <HAL_RCC_OscConfig+0x4f8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d118      	bne.n	8003f14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee2:	4b8b      	ldr	r3, [pc, #556]	; (8004110 <HAL_RCC_OscConfig+0x4f8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a8a      	ldr	r2, [pc, #552]	; (8004110 <HAL_RCC_OscConfig+0x4f8>)
 8003ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eee:	f7fe fdcf 	bl	8002a90 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef6:	f7fe fdcb 	bl	8002a90 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b64      	cmp	r3, #100	; 0x64
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e0fd      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f08:	4b81      	ldr	r3, [pc, #516]	; (8004110 <HAL_RCC_OscConfig+0x4f8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCC_OscConfig+0x312>
 8003f1c:	4b7b      	ldr	r3, [pc, #492]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	4a7a      	ldr	r2, [pc, #488]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6213      	str	r3, [r2, #32]
 8003f28:	e02d      	b.n	8003f86 <HAL_RCC_OscConfig+0x36e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x334>
 8003f32:	4b76      	ldr	r3, [pc, #472]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	4a75      	ldr	r2, [pc, #468]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	6213      	str	r3, [r2, #32]
 8003f3e:	4b73      	ldr	r3, [pc, #460]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	4a72      	ldr	r2, [pc, #456]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f44:	f023 0304 	bic.w	r3, r3, #4
 8003f48:	6213      	str	r3, [r2, #32]
 8003f4a:	e01c      	b.n	8003f86 <HAL_RCC_OscConfig+0x36e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d10c      	bne.n	8003f6e <HAL_RCC_OscConfig+0x356>
 8003f54:	4b6d      	ldr	r3, [pc, #436]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	4a6c      	ldr	r2, [pc, #432]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f5a:	f043 0304 	orr.w	r3, r3, #4
 8003f5e:	6213      	str	r3, [r2, #32]
 8003f60:	4b6a      	ldr	r3, [pc, #424]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	4a69      	ldr	r2, [pc, #420]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6213      	str	r3, [r2, #32]
 8003f6c:	e00b      	b.n	8003f86 <HAL_RCC_OscConfig+0x36e>
 8003f6e:	4b67      	ldr	r3, [pc, #412]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	4a66      	ldr	r2, [pc, #408]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	6213      	str	r3, [r2, #32]
 8003f7a:	4b64      	ldr	r3, [pc, #400]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4a63      	ldr	r2, [pc, #396]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f80:	f023 0304 	bic.w	r3, r3, #4
 8003f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d015      	beq.n	8003fba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8e:	f7fe fd7f 	bl	8002a90 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f94:	e00a      	b.n	8003fac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fe fd7b 	bl	8002a90 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e0ab      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	4b57      	ldr	r3, [pc, #348]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ee      	beq.n	8003f96 <HAL_RCC_OscConfig+0x37e>
 8003fb8:	e014      	b.n	8003fe4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fba:	f7fe fd69 	bl	8002a90 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fe fd65 	bl	8002a90 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e095      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	4b4c      	ldr	r3, [pc, #304]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ee      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d105      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fea:	4b48      	ldr	r3, [pc, #288]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	4a47      	ldr	r2, [pc, #284]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8081 	beq.w	8004102 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004000:	4b42      	ldr	r3, [pc, #264]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b08      	cmp	r3, #8
 800400a:	d061      	beq.n	80040d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d146      	bne.n	80040a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004014:	4b3f      	ldr	r3, [pc, #252]	; (8004114 <HAL_RCC_OscConfig+0x4fc>)
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401a:	f7fe fd39 	bl	8002a90 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004022:	f7fe fd35 	bl	8002a90 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e067      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004034:	4b35      	ldr	r3, [pc, #212]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f0      	bne.n	8004022 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004048:	d108      	bne.n	800405c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800404a:	4b30      	ldr	r3, [pc, #192]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	492d      	ldr	r1, [pc, #180]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800405c:	4b2b      	ldr	r3, [pc, #172]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a19      	ldr	r1, [r3, #32]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	430b      	orrs	r3, r1
 800406e:	4927      	ldr	r1, [pc, #156]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004074:	4b27      	ldr	r3, [pc, #156]	; (8004114 <HAL_RCC_OscConfig+0x4fc>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fe fd09 	bl	8002a90 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004082:	f7fe fd05 	bl	8002a90 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e037      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004094:	4b1d      	ldr	r3, [pc, #116]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x46a>
 80040a0:	e02f      	b.n	8004102 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a2:	4b1c      	ldr	r3, [pc, #112]	; (8004114 <HAL_RCC_OscConfig+0x4fc>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fe fcf2 	bl	8002a90 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fe fcee 	bl	8002a90 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e020      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x498>
 80040ce:	e018      	b.n	8004102 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e013      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_RCC_OscConfig+0x4f4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d001      	beq.n	8004102 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000
 8004110:	40007000 	.word	0x40007000
 8004114:	42420060 	.word	0x42420060

08004118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0d0      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b6a      	ldr	r3, [pc, #424]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d910      	bls.n	800415c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b67      	ldr	r3, [pc, #412]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 0207 	bic.w	r2, r3, #7
 8004142:	4965      	ldr	r1, [pc, #404]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b8      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004174:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a58      	ldr	r2, [pc, #352]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800417e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4a52      	ldr	r2, [pc, #328]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004196:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	494d      	ldr	r1, [pc, #308]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d040      	beq.n	8004238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d115      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d6:	4b41      	ldr	r3, [pc, #260]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e073      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e6:	4b3d      	ldr	r3, [pc, #244]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e06b      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f6:	4b39      	ldr	r3, [pc, #228]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4936      	ldr	r1, [pc, #216]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004208:	f7fe fc42 	bl	8002a90 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	e00a      	b.n	8004226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fe fc3e 	bl	8002a90 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e053      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	4b2d      	ldr	r3, [pc, #180]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 020c 	and.w	r2, r3, #12
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	429a      	cmp	r2, r3
 8004236:	d1eb      	bne.n	8004210 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d210      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 0207 	bic.w	r2, r3, #7
 800424e:	4922      	ldr	r1, [pc, #136]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e032      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004274:	4b19      	ldr	r3, [pc, #100]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4916      	ldr	r1, [pc, #88]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	490e      	ldr	r1, [pc, #56]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042a6:	f000 f821 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	490a      	ldr	r1, [pc, #40]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042b8:	5ccb      	ldrb	r3, [r1, r3]
 80042ba:	fa22 f303 	lsr.w	r3, r2, r3
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <HAL_RCC_ClockConfig+0x1cc>)
 80042c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_ClockConfig+0x1d0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fba0 	bl	8002a0c <HAL_InitTick>

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40022000 	.word	0x40022000
 80042dc:	40021000 	.word	0x40021000
 80042e0:	0800a8e8 	.word	0x0800a8e8
 80042e4:	20000000 	.word	0x20000000
 80042e8:	20000004 	.word	0x20000004

080042ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ec:	b490      	push	{r4, r7}
 80042ee:	b08a      	sub	sp, #40	; 0x28
 80042f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042f2:	4b2a      	ldr	r3, [pc, #168]	; (800439c <HAL_RCC_GetSysClockFreq+0xb0>)
 80042f4:	1d3c      	adds	r4, r7, #4
 80042f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80042fc:	f240 2301 	movw	r3, #513	; 0x201
 8004300:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	2300      	movs	r3, #0
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004316:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b04      	cmp	r3, #4
 8004324:	d002      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x40>
 8004326:	2b08      	cmp	r3, #8
 8004328:	d003      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x46>
 800432a:	e02d      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800432c:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800432e:	623b      	str	r3, [r7, #32]
      break;
 8004330:	e02d      	b.n	800438e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	0c9b      	lsrs	r3, r3, #18
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800433e:	4413      	add	r3, r2
 8004340:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004344:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004350:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	0c5b      	lsrs	r3, r3, #17
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800435e:	4413      	add	r3, r2
 8004360:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004364:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800436a:	fb02 f203 	mul.w	r2, r2, r3
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	e004      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800437c:	fb02 f303 	mul.w	r3, r2, r3
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	623b      	str	r3, [r7, #32]
      break;
 8004386:	e002      	b.n	800438e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800438a:	623b      	str	r3, [r7, #32]
      break;
 800438c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800438e:	6a3b      	ldr	r3, [r7, #32]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3728      	adds	r7, #40	; 0x28
 8004394:	46bd      	mov	sp, r7
 8004396:	bc90      	pop	{r4, r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	0800a8d8 	.word	0x0800a8d8
 80043a0:	40021000 	.word	0x40021000
 80043a4:	007a1200 	.word	0x007a1200
 80043a8:	003d0900 	.word	0x003d0900

080043ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b0:	4b02      	ldr	r3, [pc, #8]	; (80043bc <HAL_RCC_GetHCLKFreq+0x10>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr
 80043bc:	20000000 	.word	0x20000000

080043c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043c4:	f7ff fff2 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	4903      	ldr	r1, [pc, #12]	; (80043e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043dc:	4618      	mov	r0, r3
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40021000 	.word	0x40021000
 80043e4:	0800a8f8 	.word	0x0800a8f8

080043e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043ec:	f7ff ffde 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	0adb      	lsrs	r3, r3, #11
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	4903      	ldr	r1, [pc, #12]	; (800440c <HAL_RCC_GetPCLK2Freq+0x24>)
 80043fe:	5ccb      	ldrb	r3, [r1, r3]
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004404:	4618      	mov	r0, r3
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	0800a8f8 	.word	0x0800a8f8

08004410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <RCC_Delay+0x34>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <RCC_Delay+0x38>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	0a5b      	lsrs	r3, r3, #9
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800442c:	bf00      	nop
  }
  while (Delay --);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1e5a      	subs	r2, r3, #1
 8004432:	60fa      	str	r2, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f9      	bne.n	800442c <RCC_Delay+0x1c>
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	20000000 	.word	0x20000000
 8004448:	10624dd3 	.word	0x10624dd3

0800444c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d07d      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446c:	4b4f      	ldr	r3, [pc, #316]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10d      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004478:	4b4c      	ldr	r3, [pc, #304]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	4a4b      	ldr	r2, [pc, #300]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004482:	61d3      	str	r3, [r2, #28]
 8004484:	4b49      	ldr	r3, [pc, #292]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	4b46      	ldr	r3, [pc, #280]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d118      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a0:	4b43      	ldr	r3, [pc, #268]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a42      	ldr	r2, [pc, #264]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ac:	f7fe faf0 	bl	8002a90 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b2:	e008      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b4:	f7fe faec 	bl	8002a90 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e06d      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c6:	4b3a      	ldr	r3, [pc, #232]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044d2:	4b36      	ldr	r3, [pc, #216]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d02e      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d027      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044f0:	4b2e      	ldr	r3, [pc, #184]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044fa:	4b2e      	ldr	r3, [pc, #184]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004500:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004506:	4a29      	ldr	r2, [pc, #164]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d014      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fe fabb 	bl	8002a90 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	e00a      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fe fab7 	bl	8002a90 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e036      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ee      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004540:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4917      	ldr	r1, [pc, #92]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454e:	4313      	orrs	r3, r2
 8004550:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d105      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004558:	4b14      	ldr	r3, [pc, #80]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	4a13      	ldr	r2, [pc, #76]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004562:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004570:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	490b      	ldr	r1, [pc, #44]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	d008      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800458e:	4b07      	ldr	r3, [pc, #28]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	4904      	ldr	r1, [pc, #16]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459c:	4313      	orrs	r3, r2
 800459e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40007000 	.word	0x40007000
 80045b4:	42420440 	.word	0x42420440

080045b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e041      	b.n	800464e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fe f808 	bl	80025f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f000 fe0a 	bl	8005210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	d001      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e03a      	b.n	80046e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <HAL_TIM_Base_Start_IT+0x98>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00e      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x58>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469a:	d009      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x58>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x58>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d111      	bne.n	80046d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d010      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0201 	orr.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d2:	e007      	b.n	80046e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40000800 	.word	0x40000800

080046fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e041      	b.n	8004792 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f839 	bl	800479a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f000 fd68 	bl	8005210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <HAL_TIM_PWM_Start+0x24>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	bf14      	ite	ne
 80047c8:	2301      	movne	r3, #1
 80047ca:	2300      	moveq	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e022      	b.n	8004816 <HAL_TIM_PWM_Start+0x6a>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d109      	bne.n	80047ea <HAL_TIM_PWM_Start+0x3e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	bf14      	ite	ne
 80047e2:	2301      	movne	r3, #1
 80047e4:	2300      	moveq	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	e015      	b.n	8004816 <HAL_TIM_PWM_Start+0x6a>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d109      	bne.n	8004804 <HAL_TIM_PWM_Start+0x58>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e008      	b.n	8004816 <HAL_TIM_PWM_Start+0x6a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	bf14      	ite	ne
 8004810:	2301      	movne	r3, #1
 8004812:	2300      	moveq	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e05e      	b.n	80048dc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d104      	bne.n	800482e <HAL_TIM_PWM_Start+0x82>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800482c:	e013      	b.n	8004856 <HAL_TIM_PWM_Start+0xaa>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b04      	cmp	r3, #4
 8004832:	d104      	bne.n	800483e <HAL_TIM_PWM_Start+0x92>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800483c:	e00b      	b.n	8004856 <HAL_TIM_PWM_Start+0xaa>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d104      	bne.n	800484e <HAL_TIM_PWM_Start+0xa2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800484c:	e003      	b.n	8004856 <HAL_TIM_PWM_Start+0xaa>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2201      	movs	r2, #1
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f001 f863 	bl	800592a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <HAL_TIM_PWM_Start+0x138>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d107      	bne.n	800487e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800487c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <HAL_TIM_PWM_Start+0x138>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00e      	beq.n	80048a6 <HAL_TIM_PWM_Start+0xfa>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004890:	d009      	beq.n	80048a6 <HAL_TIM_PWM_Start+0xfa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a14      	ldr	r2, [pc, #80]	; (80048e8 <HAL_TIM_PWM_Start+0x13c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d004      	beq.n	80048a6 <HAL_TIM_PWM_Start+0xfa>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a12      	ldr	r2, [pc, #72]	; (80048ec <HAL_TIM_PWM_Start+0x140>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d111      	bne.n	80048ca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b06      	cmp	r3, #6
 80048b6:	d010      	beq.n	80048da <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c8:	e007      	b.n	80048da <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800

080048f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e041      	b.n	8004986 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fd feb0 	bl	800267c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f000 fc6e 	bl	8005210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d104      	bne.n	80049aa <HAL_TIM_IC_Start_IT+0x1a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	e013      	b.n	80049d2 <HAL_TIM_IC_Start_IT+0x42>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d104      	bne.n	80049ba <HAL_TIM_IC_Start_IT+0x2a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e00b      	b.n	80049d2 <HAL_TIM_IC_Start_IT+0x42>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d104      	bne.n	80049ca <HAL_TIM_IC_Start_IT+0x3a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	e003      	b.n	80049d2 <HAL_TIM_IC_Start_IT+0x42>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <HAL_TIM_IC_Start_IT+0x54>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e013      	b.n	8004a0c <HAL_TIM_IC_Start_IT+0x7c>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d104      	bne.n	80049f4 <HAL_TIM_IC_Start_IT+0x64>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	e00b      	b.n	8004a0c <HAL_TIM_IC_Start_IT+0x7c>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d104      	bne.n	8004a04 <HAL_TIM_IC_Start_IT+0x74>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e003      	b.n	8004a0c <HAL_TIM_IC_Start_IT+0x7c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d102      	bne.n	8004a1a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a14:	7bbb      	ldrb	r3, [r7, #14]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d001      	beq.n	8004a1e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e0b3      	b.n	8004b86 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d104      	bne.n	8004a2e <HAL_TIM_IC_Start_IT+0x9e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a2c:	e013      	b.n	8004a56 <HAL_TIM_IC_Start_IT+0xc6>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d104      	bne.n	8004a3e <HAL_TIM_IC_Start_IT+0xae>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a3c:	e00b      	b.n	8004a56 <HAL_TIM_IC_Start_IT+0xc6>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_IC_Start_IT+0xbe>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a4c:	e003      	b.n	8004a56 <HAL_TIM_IC_Start_IT+0xc6>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_IC_Start_IT+0xd6>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a64:	e013      	b.n	8004a8e <HAL_TIM_IC_Start_IT+0xfe>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_IC_Start_IT+0xe6>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a74:	e00b      	b.n	8004a8e <HAL_TIM_IC_Start_IT+0xfe>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d104      	bne.n	8004a86 <HAL_TIM_IC_Start_IT+0xf6>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a84:	e003      	b.n	8004a8e <HAL_TIM_IC_Start_IT+0xfe>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b0c      	cmp	r3, #12
 8004a92:	d841      	bhi.n	8004b18 <HAL_TIM_IC_Start_IT+0x188>
 8004a94:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <HAL_TIM_IC_Start_IT+0x10c>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004ad1 	.word	0x08004ad1
 8004aa0:	08004b19 	.word	0x08004b19
 8004aa4:	08004b19 	.word	0x08004b19
 8004aa8:	08004b19 	.word	0x08004b19
 8004aac:	08004ae3 	.word	0x08004ae3
 8004ab0:	08004b19 	.word	0x08004b19
 8004ab4:	08004b19 	.word	0x08004b19
 8004ab8:	08004b19 	.word	0x08004b19
 8004abc:	08004af5 	.word	0x08004af5
 8004ac0:	08004b19 	.word	0x08004b19
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004b19 	.word	0x08004b19
 8004acc:	08004b07 	.word	0x08004b07
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0202 	orr.w	r2, r2, #2
 8004ade:	60da      	str	r2, [r3, #12]
      break;
 8004ae0:	e01b      	b.n	8004b1a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0204 	orr.w	r2, r2, #4
 8004af0:	60da      	str	r2, [r3, #12]
      break;
 8004af2:	e012      	b.n	8004b1a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	60da      	str	r2, [r3, #12]
      break;
 8004b04:	e009      	b.n	8004b1a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0210 	orr.w	r2, r2, #16
 8004b14:	60da      	str	r2, [r3, #12]
      break;
 8004b16:	e000      	b.n	8004b1a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004b18:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 ff01 	bl	800592a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <HAL_TIM_IC_Start_IT+0x200>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00e      	beq.n	8004b50 <HAL_TIM_IC_Start_IT+0x1c0>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3a:	d009      	beq.n	8004b50 <HAL_TIM_IC_Start_IT+0x1c0>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a14      	ldr	r2, [pc, #80]	; (8004b94 <HAL_TIM_IC_Start_IT+0x204>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <HAL_TIM_IC_Start_IT+0x1c0>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <HAL_TIM_IC_Start_IT+0x208>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d111      	bne.n	8004b74 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b06      	cmp	r3, #6
 8004b60:	d010      	beq.n	8004b84 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0201 	orr.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b72:	e007      	b.n	8004b84 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800

08004b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d122      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0202 	mvn.w	r2, #2
 8004bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fd f912 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8004be4:	e005      	b.n	8004bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 faf6 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fafc 	bl	80051ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d122      	bne.n	8004c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d11b      	bne.n	8004c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0204 	mvn.w	r2, #4
 8004c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fd f8e8 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 facc 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fad2 	bl	80051ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d122      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d11b      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0208 	mvn.w	r2, #8
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2204      	movs	r2, #4
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fd f8be 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 faa2 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 faa8 	bl	80051ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d122      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d11b      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0210 	mvn.w	r2, #16
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2208      	movs	r2, #8
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fd f894 	bl	8001e08 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fa78 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fa7e 	bl	80051ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10e      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d107      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0201 	mvn.w	r2, #1
 8004d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fd f904 	bl	8001f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2a:	2b80      	cmp	r3, #128	; 0x80
 8004d2c:	d10e      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d107      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fecc 	bl	8005ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	d10e      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b40      	cmp	r3, #64	; 0x40
 8004d66:	d107      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fa42 	bl	80051fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d10e      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d107      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0220 	mvn.w	r2, #32
 8004d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fe97 	bl	8005ad2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004da4:	bf00      	nop
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e082      	b.n	8004ecc <HAL_TIM_IC_ConfigChannel+0x120>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d11b      	bne.n	8004e0c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	6819      	ldr	r1, [r3, #0]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f000 fbfe 	bl	80055e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 020c 	bic.w	r2, r2, #12
 8004df6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6999      	ldr	r1, [r3, #24]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	619a      	str	r2, [r3, #24]
 8004e0a:	e05a      	b.n	8004ec2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d11c      	bne.n	8004e4c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6819      	ldr	r1, [r3, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f000 fc67 	bl	80056f4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699a      	ldr	r2, [r3, #24]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e34:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6999      	ldr	r1, [r3, #24]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	021a      	lsls	r2, r3, #8
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	619a      	str	r2, [r3, #24]
 8004e4a:	e03a      	b.n	8004ec2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d11b      	bne.n	8004e8a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	6819      	ldr	r1, [r3, #0]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f000 fcb2 	bl	80057ca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 020c 	bic.w	r2, r2, #12
 8004e74:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69d9      	ldr	r1, [r3, #28]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	61da      	str	r2, [r3, #28]
 8004e88:	e01b      	b.n	8004ec2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6819      	ldr	r1, [r3, #0]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f000 fcd1 	bl	8005840 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004eac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69d9      	ldr	r1, [r3, #28]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	021a      	lsls	r2, r3, #8
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e0ac      	b.n	8005048 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b0c      	cmp	r3, #12
 8004efa:	f200 809f 	bhi.w	800503c <HAL_TIM_PWM_ConfigChannel+0x168>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f39 	.word	0x08004f39
 8004f08:	0800503d 	.word	0x0800503d
 8004f0c:	0800503d 	.word	0x0800503d
 8004f10:	0800503d 	.word	0x0800503d
 8004f14:	08004f79 	.word	0x08004f79
 8004f18:	0800503d 	.word	0x0800503d
 8004f1c:	0800503d 	.word	0x0800503d
 8004f20:	0800503d 	.word	0x0800503d
 8004f24:	08004fbb 	.word	0x08004fbb
 8004f28:	0800503d 	.word	0x0800503d
 8004f2c:	0800503d 	.word	0x0800503d
 8004f30:	0800503d 	.word	0x0800503d
 8004f34:	08004ffb 	.word	0x08004ffb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f9c8 	bl	80052d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0208 	orr.w	r2, r2, #8
 8004f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0204 	bic.w	r2, r2, #4
 8004f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6999      	ldr	r1, [r3, #24]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	619a      	str	r2, [r3, #24]
      break;
 8004f76:	e062      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fa0e 	bl	80053a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6999      	ldr	r1, [r3, #24]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	021a      	lsls	r2, r3, #8
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	619a      	str	r2, [r3, #24]
      break;
 8004fb8:	e041      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fa57 	bl	8005474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0208 	orr.w	r2, r2, #8
 8004fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0204 	bic.w	r2, r2, #4
 8004fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69d9      	ldr	r1, [r3, #28]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	61da      	str	r2, [r3, #28]
      break;
 8004ff8:	e021      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	4618      	mov	r0, r3
 8005002:	f000 faa1 	bl	8005548 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69d9      	ldr	r1, [r3, #28]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	021a      	lsls	r2, r3, #8
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	61da      	str	r2, [r3, #28]
      break;
 800503a:	e000      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800503c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_TIM_ConfigClockSource+0x18>
 8005064:	2302      	movs	r3, #2
 8005066:	e0b3      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x180>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005086:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800508e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a0:	d03e      	beq.n	8005120 <HAL_TIM_ConfigClockSource+0xd0>
 80050a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a6:	f200 8087 	bhi.w	80051b8 <HAL_TIM_ConfigClockSource+0x168>
 80050aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ae:	f000 8085 	beq.w	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b6:	d87f      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x168>
 80050b8:	2b70      	cmp	r3, #112	; 0x70
 80050ba:	d01a      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0xa2>
 80050bc:	2b70      	cmp	r3, #112	; 0x70
 80050be:	d87b      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x168>
 80050c0:	2b60      	cmp	r3, #96	; 0x60
 80050c2:	d050      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x116>
 80050c4:	2b60      	cmp	r3, #96	; 0x60
 80050c6:	d877      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x168>
 80050c8:	2b50      	cmp	r3, #80	; 0x50
 80050ca:	d03c      	beq.n	8005146 <HAL_TIM_ConfigClockSource+0xf6>
 80050cc:	2b50      	cmp	r3, #80	; 0x50
 80050ce:	d873      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x168>
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d058      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0x136>
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d86f      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x168>
 80050d8:	2b30      	cmp	r3, #48	; 0x30
 80050da:	d064      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x156>
 80050dc:	2b30      	cmp	r3, #48	; 0x30
 80050de:	d86b      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x168>
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	d060      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x156>
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d867      	bhi.n	80051b8 <HAL_TIM_ConfigClockSource+0x168>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d05c      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x156>
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d05a      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80050f0:	e062      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6899      	ldr	r1, [r3, #8]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f000 fbf3 	bl	80058ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005114:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	609a      	str	r2, [r3, #8]
      break;
 800511e:	e04e      	b.n	80051be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	6899      	ldr	r1, [r3, #8]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f000 fbdc 	bl	80058ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005142:	609a      	str	r2, [r3, #8]
      break;
 8005144:	e03b      	b.n	80051be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6859      	ldr	r1, [r3, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	461a      	mov	r2, r3
 8005154:	f000 faa0 	bl	8005698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2150      	movs	r1, #80	; 0x50
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fbaa 	bl	80058b8 <TIM_ITRx_SetConfig>
      break;
 8005164:	e02b      	b.n	80051be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6859      	ldr	r1, [r3, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	461a      	mov	r2, r3
 8005174:	f000 fafa 	bl	800576c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2160      	movs	r1, #96	; 0x60
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fb9a 	bl	80058b8 <TIM_ITRx_SetConfig>
      break;
 8005184:	e01b      	b.n	80051be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6859      	ldr	r1, [r3, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	461a      	mov	r2, r3
 8005194:	f000 fa80 	bl	8005698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2140      	movs	r1, #64	; 0x40
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fb8a 	bl	80058b8 <TIM_ITRx_SetConfig>
      break;
 80051a4:	e00b      	b.n	80051be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f000 fb81 	bl	80058b8 <TIM_ITRx_SetConfig>
        break;
 80051b6:	e002      	b.n	80051be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051b8:	bf00      	nop
 80051ba:	e000      	b.n	80051be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr

080051ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr

080051fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr
	...

08005210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a29      	ldr	r2, [pc, #164]	; (80052c8 <TIM_Base_SetConfig+0xb8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00b      	beq.n	8005240 <TIM_Base_SetConfig+0x30>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522e:	d007      	beq.n	8005240 <TIM_Base_SetConfig+0x30>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a26      	ldr	r2, [pc, #152]	; (80052cc <TIM_Base_SetConfig+0xbc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_Base_SetConfig+0x30>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <TIM_Base_SetConfig+0xc0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d108      	bne.n	8005252 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a1c      	ldr	r2, [pc, #112]	; (80052c8 <TIM_Base_SetConfig+0xb8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00b      	beq.n	8005272 <TIM_Base_SetConfig+0x62>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d007      	beq.n	8005272 <TIM_Base_SetConfig+0x62>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <TIM_Base_SetConfig+0xbc>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_Base_SetConfig+0x62>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a18      	ldr	r2, [pc, #96]	; (80052d0 <TIM_Base_SetConfig+0xc0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d108      	bne.n	8005284 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a07      	ldr	r2, [pc, #28]	; (80052c8 <TIM_Base_SetConfig+0xb8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d103      	bne.n	80052b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	615a      	str	r2, [r3, #20]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800

080052d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f023 0201 	bic.w	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0303 	bic.w	r3, r3, #3
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f023 0302 	bic.w	r3, r3, #2
 800531c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a1c      	ldr	r2, [pc, #112]	; (800539c <TIM_OC1_SetConfig+0xc8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d10c      	bne.n	800534a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0308 	bic.w	r3, r3, #8
 8005336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f023 0304 	bic.w	r3, r3, #4
 8005348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a13      	ldr	r2, [pc, #76]	; (800539c <TIM_OC1_SetConfig+0xc8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d111      	bne.n	8005376 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	621a      	str	r2, [r3, #32]
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40012c00 	.word	0x40012c00

080053a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f023 0210 	bic.w	r2, r3, #16
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f023 0320 	bic.w	r3, r3, #32
 80053ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <TIM_OC2_SetConfig+0xd0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10d      	bne.n	800541c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800541a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a14      	ldr	r2, [pc, #80]	; (8005470 <TIM_OC2_SetConfig+0xd0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d113      	bne.n	800544c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800542a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr
 8005470:	40012c00 	.word	0x40012c00

08005474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0303 	bic.w	r3, r3, #3
 80054aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <TIM_OC3_SetConfig+0xd0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d10d      	bne.n	80054ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a14      	ldr	r2, [pc, #80]	; (8005544 <TIM_OC3_SetConfig+0xd0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d113      	bne.n	800551e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	621a      	str	r2, [r3, #32]
}
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40012c00 	.word	0x40012c00

08005548 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	031b      	lsls	r3, r3, #12
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a0f      	ldr	r2, [pc, #60]	; (80055e0 <TIM_OC4_SetConfig+0x98>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d109      	bne.n	80055bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	019b      	lsls	r3, r3, #6
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr
 80055e0:	40012c00 	.word	0x40012c00

080055e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0201 	bic.w	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4a1f      	ldr	r2, [pc, #124]	; (800568c <TIM_TI1_SetConfig+0xa8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00b      	beq.n	800562a <TIM_TI1_SetConfig+0x46>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005618:	d007      	beq.n	800562a <TIM_TI1_SetConfig+0x46>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4a1c      	ldr	r2, [pc, #112]	; (8005690 <TIM_TI1_SetConfig+0xac>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_TI1_SetConfig+0x46>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4a1b      	ldr	r2, [pc, #108]	; (8005694 <TIM_TI1_SetConfig+0xb0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d101      	bne.n	800562e <TIM_TI1_SetConfig+0x4a>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <TIM_TI1_SetConfig+0x4c>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f023 0303 	bic.w	r3, r3, #3
 800563a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e003      	b.n	800564e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	b2db      	uxtb	r3, r3
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f023 030a 	bic.w	r3, r3, #10
 8005668:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f003 030a 	and.w	r3, r3, #10
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	621a      	str	r2, [r3, #32]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr
 800568c:	40012c00 	.word	0x40012c00
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800

08005698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f023 0201 	bic.w	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f023 030a 	bic.w	r3, r3, #10
 80056d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f023 0210 	bic.w	r2, r3, #16
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005732:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	031b      	lsls	r3, r3, #12
 8005738:	b29b      	uxth	r3, r3
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005746:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr

0800576c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f023 0210 	bic.w	r2, r3, #16
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005796:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	031b      	lsls	r3, r3, #12
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	621a      	str	r2, [r3, #32]
}
 80057c0:	bf00      	nop
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr

080057ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b087      	sub	sp, #28
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005806:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	b2db      	uxtb	r3, r3
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800581a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	621a      	str	r2, [r3, #32]
}
 8005836:	bf00      	nop
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800587e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	031b      	lsls	r3, r3, #12
 8005884:	b29b      	uxth	r3, r3
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005892:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	031b      	lsls	r3, r3, #12
 8005898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr

080058b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f043 0307 	orr.w	r3, r3, #7
 80058da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	609a      	str	r2, [r3, #8]
}
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr

080058ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	431a      	orrs	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4313      	orrs	r3, r2
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	609a      	str	r2, [r3, #8]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	bc80      	pop	{r7}
 8005928:	4770      	bx	lr

0800592a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800592a:	b480      	push	{r7}
 800592c:	b087      	sub	sp, #28
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	2201      	movs	r2, #1
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a1a      	ldr	r2, [r3, #32]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	43db      	mvns	r3, r3
 800594c:	401a      	ands	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1a      	ldr	r2, [r3, #32]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	fa01 f303 	lsl.w	r3, r1, r3
 8005962:	431a      	orrs	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	621a      	str	r2, [r3, #32]
}
 8005968:	bf00      	nop
 800596a:	371c      	adds	r7, #28
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr
	...

08005974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005988:	2302      	movs	r3, #2
 800598a:	e046      	b.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00e      	beq.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d8:	d009      	beq.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a12      	ldr	r2, [pc, #72]	; (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d004      	beq.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a10      	ldr	r2, [pc, #64]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d10c      	bne.n	8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800

08005a30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e03d      	b.n	8005ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr

08005af6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e03f      	b.n	8005b88 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7fc fe95 	bl	800284c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2224      	movs	r2, #36	; 0x24
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b38:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f9e8 	bl	8005f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691a      	ldr	r2, [r3, #16]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695a      	ldr	r2, [r3, #20]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b5e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b6e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d13c      	bne.n	8005c24 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e035      	b.n	8005c26 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e02e      	b.n	8005c26 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f8f1 	bl	8005dc4 <UART_Start_Receive_DMA>
 8005be2:	4603      	mov	r3, r0
 8005be4:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d119      	bne.n	8005c20 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d113      	bne.n	8005c1c <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	613b      	str	r3, [r7, #16]
 8005c08:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0210 	orr.w	r2, r2, #16
 8005c18:	60da      	str	r2, [r3, #12]
 8005c1a:	e001      	b.n	8005c20 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	e000      	b.n	8005c26 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr

08005c40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr

08005c52 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr

08005c64 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d12a      	bne.n	8005cd6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c94:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695a      	ldr	r2, [r3, #20]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0201 	bic.w	r2, r2, #1
 8005ca4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d107      	bne.n	8005cd6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0210 	bic.w	r2, r2, #16
 8005cd4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d106      	bne.n	8005cec <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7fc f867 	bl	8001db8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cea:	e002      	b.n	8005cf2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff ff9e 	bl	8005c2e <HAL_UART_RxCpltCallback>
}
 8005cf2:	bf00      	nop
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d108      	bne.n	8005d22 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	4619      	mov	r1, r3
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7fc f84c 	bl	8001db8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d20:	e002      	b.n	8005d28 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7ff ff8c 	bl	8005c40 <HAL_UART_RxHalfCpltCallback>
}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bf14      	ite	ne
 8005d50:	2301      	movne	r3, #1
 8005d52:	2300      	moveq	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b21      	cmp	r3, #33	; 0x21
 8005d62:	d108      	bne.n	8005d76 <UART_DMAError+0x46>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d005      	beq.n	8005d76 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d70:	68b8      	ldr	r0, [r7, #8]
 8005d72:	f000 f88b 	bl	8005e8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	bf14      	ite	ne
 8005d84:	2301      	movne	r3, #1
 8005d86:	2300      	moveq	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b22      	cmp	r3, #34	; 0x22
 8005d96:	d108      	bne.n	8005daa <UART_DMAError+0x7a>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2200      	movs	r2, #0
 8005da2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005da4:	68b8      	ldr	r0, [r7, #8]
 8005da6:	f000 f886 	bl	8005eb6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	f043 0210 	orr.w	r2, r3, #16
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005db6:	68b8      	ldr	r0, [r7, #8]
 8005db8:	f7ff ff4b 	bl	8005c52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	88fa      	ldrh	r2, [r7, #6]
 8005ddc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2222      	movs	r2, #34	; 0x22
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	4a23      	ldr	r2, [pc, #140]	; (8005e80 <UART_Start_Receive_DMA+0xbc>)
 8005df2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	4a22      	ldr	r2, [pc, #136]	; (8005e84 <UART_Start_Receive_DMA+0xc0>)
 8005dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <UART_Start_Receive_DMA+0xc4>)
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	2200      	movs	r2, #0
 8005e0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005e0c:	f107 0308 	add.w	r3, r7, #8
 8005e10:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	f7fd fb8c 	bl	8003540 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e54:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0201 	orr.w	r2, r2, #1
 8005e64:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695a      	ldr	r2, [r3, #20]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e74:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	08005c65 	.word	0x08005c65
 8005e84:	08005cfb 	.word	0x08005cfb
 8005e88:	08005d31 	.word	0x08005d31

08005e8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005ea2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr

08005eb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ecc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695a      	ldr	r2, [r3, #20]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0201 	bic.w	r2, r2, #1
 8005edc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d107      	bne.n	8005ef6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0210 	bic.w	r2, r2, #16
 8005ef4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr
	...

08005f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f4a:	f023 030c 	bic.w	r3, r3, #12
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	430b      	orrs	r3, r1
 8005f56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2c      	ldr	r2, [pc, #176]	; (8006024 <UART_SetConfig+0x114>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d103      	bne.n	8005f80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f78:	f7fe fa36 	bl	80043e8 <HAL_RCC_GetPCLK2Freq>
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	e002      	b.n	8005f86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f80:	f7fe fa1e 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8005f84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009a      	lsls	r2, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	4a22      	ldr	r2, [pc, #136]	; (8006028 <UART_SetConfig+0x118>)
 8005f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	0119      	lsls	r1, r3, #4
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009a      	lsls	r2, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fbc:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <UART_SetConfig+0x118>)
 8005fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	2064      	movs	r0, #100	; 0x64
 8005fc6:	fb00 f303 	mul.w	r3, r0, r3
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	3332      	adds	r3, #50	; 0x32
 8005fd0:	4a15      	ldr	r2, [pc, #84]	; (8006028 <UART_SetConfig+0x118>)
 8005fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd6:	095b      	lsrs	r3, r3, #5
 8005fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fdc:	4419      	add	r1, r3
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009a      	lsls	r2, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <UART_SetConfig+0x118>)
 8005ff6:	fba3 0302 	umull	r0, r3, r3, r2
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	2064      	movs	r0, #100	; 0x64
 8005ffe:	fb00 f303 	mul.w	r3, r0, r3
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	3332      	adds	r3, #50	; 0x32
 8006008:	4a07      	ldr	r2, [pc, #28]	; (8006028 <UART_SetConfig+0x118>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	f003 020f 	and.w	r2, r3, #15
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	440a      	add	r2, r1
 800601a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40013800 	.word	0x40013800
 8006028:	51eb851f 	.word	0x51eb851f

0800602c <atoi>:
 800602c:	220a      	movs	r2, #10
 800602e:	2100      	movs	r1, #0
 8006030:	f001 bd6c 	b.w	8007b0c <strtol>

08006034 <__errno>:
 8006034:	4b01      	ldr	r3, [pc, #4]	; (800603c <__errno+0x8>)
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	2000000c 	.word	0x2000000c

08006040 <__libc_init_array>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	2600      	movs	r6, #0
 8006044:	4d0c      	ldr	r5, [pc, #48]	; (8006078 <__libc_init_array+0x38>)
 8006046:	4c0d      	ldr	r4, [pc, #52]	; (800607c <__libc_init_array+0x3c>)
 8006048:	1b64      	subs	r4, r4, r5
 800604a:	10a4      	asrs	r4, r4, #2
 800604c:	42a6      	cmp	r6, r4
 800604e:	d109      	bne.n	8006064 <__libc_init_array+0x24>
 8006050:	f004 fc34 	bl	800a8bc <_init>
 8006054:	2600      	movs	r6, #0
 8006056:	4d0a      	ldr	r5, [pc, #40]	; (8006080 <__libc_init_array+0x40>)
 8006058:	4c0a      	ldr	r4, [pc, #40]	; (8006084 <__libc_init_array+0x44>)
 800605a:	1b64      	subs	r4, r4, r5
 800605c:	10a4      	asrs	r4, r4, #2
 800605e:	42a6      	cmp	r6, r4
 8006060:	d105      	bne.n	800606e <__libc_init_array+0x2e>
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	f855 3b04 	ldr.w	r3, [r5], #4
 8006068:	4798      	blx	r3
 800606a:	3601      	adds	r6, #1
 800606c:	e7ee      	b.n	800604c <__libc_init_array+0xc>
 800606e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006072:	4798      	blx	r3
 8006074:	3601      	adds	r6, #1
 8006076:	e7f2      	b.n	800605e <__libc_init_array+0x1e>
 8006078:	0800adb4 	.word	0x0800adb4
 800607c:	0800adb4 	.word	0x0800adb4
 8006080:	0800adb4 	.word	0x0800adb4
 8006084:	0800adb8 	.word	0x0800adb8

08006088 <memset>:
 8006088:	4603      	mov	r3, r0
 800608a:	4402      	add	r2, r0
 800608c:	4293      	cmp	r3, r2
 800608e:	d100      	bne.n	8006092 <memset+0xa>
 8006090:	4770      	bx	lr
 8006092:	f803 1b01 	strb.w	r1, [r3], #1
 8006096:	e7f9      	b.n	800608c <memset+0x4>

08006098 <__cvt>:
 8006098:	2b00      	cmp	r3, #0
 800609a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800609e:	461f      	mov	r7, r3
 80060a0:	bfbb      	ittet	lt
 80060a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80060a6:	461f      	movlt	r7, r3
 80060a8:	2300      	movge	r3, #0
 80060aa:	232d      	movlt	r3, #45	; 0x2d
 80060ac:	b088      	sub	sp, #32
 80060ae:	4614      	mov	r4, r2
 80060b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80060b4:	7013      	strb	r3, [r2, #0]
 80060b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80060bc:	f023 0820 	bic.w	r8, r3, #32
 80060c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060c4:	d005      	beq.n	80060d2 <__cvt+0x3a>
 80060c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060ca:	d100      	bne.n	80060ce <__cvt+0x36>
 80060cc:	3501      	adds	r5, #1
 80060ce:	2302      	movs	r3, #2
 80060d0:	e000      	b.n	80060d4 <__cvt+0x3c>
 80060d2:	2303      	movs	r3, #3
 80060d4:	aa07      	add	r2, sp, #28
 80060d6:	9204      	str	r2, [sp, #16]
 80060d8:	aa06      	add	r2, sp, #24
 80060da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80060de:	e9cd 3500 	strd	r3, r5, [sp]
 80060e2:	4622      	mov	r2, r4
 80060e4:	463b      	mov	r3, r7
 80060e6:	f001 fdab 	bl	8007c40 <_dtoa_r>
 80060ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060ee:	4606      	mov	r6, r0
 80060f0:	d102      	bne.n	80060f8 <__cvt+0x60>
 80060f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060f4:	07db      	lsls	r3, r3, #31
 80060f6:	d522      	bpl.n	800613e <__cvt+0xa6>
 80060f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060fc:	eb06 0905 	add.w	r9, r6, r5
 8006100:	d110      	bne.n	8006124 <__cvt+0x8c>
 8006102:	7833      	ldrb	r3, [r6, #0]
 8006104:	2b30      	cmp	r3, #48	; 0x30
 8006106:	d10a      	bne.n	800611e <__cvt+0x86>
 8006108:	2200      	movs	r2, #0
 800610a:	2300      	movs	r3, #0
 800610c:	4620      	mov	r0, r4
 800610e:	4639      	mov	r1, r7
 8006110:	f7fa fc4a 	bl	80009a8 <__aeabi_dcmpeq>
 8006114:	b918      	cbnz	r0, 800611e <__cvt+0x86>
 8006116:	f1c5 0501 	rsb	r5, r5, #1
 800611a:	f8ca 5000 	str.w	r5, [sl]
 800611e:	f8da 3000 	ldr.w	r3, [sl]
 8006122:	4499      	add	r9, r3
 8006124:	2200      	movs	r2, #0
 8006126:	2300      	movs	r3, #0
 8006128:	4620      	mov	r0, r4
 800612a:	4639      	mov	r1, r7
 800612c:	f7fa fc3c 	bl	80009a8 <__aeabi_dcmpeq>
 8006130:	b108      	cbz	r0, 8006136 <__cvt+0x9e>
 8006132:	f8cd 901c 	str.w	r9, [sp, #28]
 8006136:	2230      	movs	r2, #48	; 0x30
 8006138:	9b07      	ldr	r3, [sp, #28]
 800613a:	454b      	cmp	r3, r9
 800613c:	d307      	bcc.n	800614e <__cvt+0xb6>
 800613e:	4630      	mov	r0, r6
 8006140:	9b07      	ldr	r3, [sp, #28]
 8006142:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006144:	1b9b      	subs	r3, r3, r6
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	b008      	add	sp, #32
 800614a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614e:	1c59      	adds	r1, r3, #1
 8006150:	9107      	str	r1, [sp, #28]
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e7f0      	b.n	8006138 <__cvt+0xa0>

08006156 <__exponent>:
 8006156:	4603      	mov	r3, r0
 8006158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800615a:	2900      	cmp	r1, #0
 800615c:	f803 2b02 	strb.w	r2, [r3], #2
 8006160:	bfb6      	itet	lt
 8006162:	222d      	movlt	r2, #45	; 0x2d
 8006164:	222b      	movge	r2, #43	; 0x2b
 8006166:	4249      	neglt	r1, r1
 8006168:	2909      	cmp	r1, #9
 800616a:	7042      	strb	r2, [r0, #1]
 800616c:	dd2b      	ble.n	80061c6 <__exponent+0x70>
 800616e:	f10d 0407 	add.w	r4, sp, #7
 8006172:	46a4      	mov	ip, r4
 8006174:	270a      	movs	r7, #10
 8006176:	fb91 f6f7 	sdiv	r6, r1, r7
 800617a:	460a      	mov	r2, r1
 800617c:	46a6      	mov	lr, r4
 800617e:	fb07 1516 	mls	r5, r7, r6, r1
 8006182:	2a63      	cmp	r2, #99	; 0x63
 8006184:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006188:	4631      	mov	r1, r6
 800618a:	f104 34ff 	add.w	r4, r4, #4294967295
 800618e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006192:	dcf0      	bgt.n	8006176 <__exponent+0x20>
 8006194:	3130      	adds	r1, #48	; 0x30
 8006196:	f1ae 0502 	sub.w	r5, lr, #2
 800619a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800619e:	4629      	mov	r1, r5
 80061a0:	1c44      	adds	r4, r0, #1
 80061a2:	4561      	cmp	r1, ip
 80061a4:	d30a      	bcc.n	80061bc <__exponent+0x66>
 80061a6:	f10d 0209 	add.w	r2, sp, #9
 80061aa:	eba2 020e 	sub.w	r2, r2, lr
 80061ae:	4565      	cmp	r5, ip
 80061b0:	bf88      	it	hi
 80061b2:	2200      	movhi	r2, #0
 80061b4:	4413      	add	r3, r2
 80061b6:	1a18      	subs	r0, r3, r0
 80061b8:	b003      	add	sp, #12
 80061ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061c0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80061c4:	e7ed      	b.n	80061a2 <__exponent+0x4c>
 80061c6:	2330      	movs	r3, #48	; 0x30
 80061c8:	3130      	adds	r1, #48	; 0x30
 80061ca:	7083      	strb	r3, [r0, #2]
 80061cc:	70c1      	strb	r1, [r0, #3]
 80061ce:	1d03      	adds	r3, r0, #4
 80061d0:	e7f1      	b.n	80061b6 <__exponent+0x60>
	...

080061d4 <_printf_float>:
 80061d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d8:	b091      	sub	sp, #68	; 0x44
 80061da:	460c      	mov	r4, r1
 80061dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80061e0:	4616      	mov	r6, r2
 80061e2:	461f      	mov	r7, r3
 80061e4:	4605      	mov	r5, r0
 80061e6:	f002 fe7f 	bl	8008ee8 <_localeconv_r>
 80061ea:	6803      	ldr	r3, [r0, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	9309      	str	r3, [sp, #36]	; 0x24
 80061f0:	f7f9 ffae 	bl	8000150 <strlen>
 80061f4:	2300      	movs	r3, #0
 80061f6:	930e      	str	r3, [sp, #56]	; 0x38
 80061f8:	f8d8 3000 	ldr.w	r3, [r8]
 80061fc:	900a      	str	r0, [sp, #40]	; 0x28
 80061fe:	3307      	adds	r3, #7
 8006200:	f023 0307 	bic.w	r3, r3, #7
 8006204:	f103 0208 	add.w	r2, r3, #8
 8006208:	f894 9018 	ldrb.w	r9, [r4, #24]
 800620c:	f8d4 b000 	ldr.w	fp, [r4]
 8006210:	f8c8 2000 	str.w	r2, [r8]
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800621c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006220:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006224:	930b      	str	r3, [sp, #44]	; 0x2c
 8006226:	f04f 32ff 	mov.w	r2, #4294967295
 800622a:	4640      	mov	r0, r8
 800622c:	4b9c      	ldr	r3, [pc, #624]	; (80064a0 <_printf_float+0x2cc>)
 800622e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006230:	f7fa fbec 	bl	8000a0c <__aeabi_dcmpun>
 8006234:	bb70      	cbnz	r0, 8006294 <_printf_float+0xc0>
 8006236:	f04f 32ff 	mov.w	r2, #4294967295
 800623a:	4640      	mov	r0, r8
 800623c:	4b98      	ldr	r3, [pc, #608]	; (80064a0 <_printf_float+0x2cc>)
 800623e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006240:	f7fa fbc6 	bl	80009d0 <__aeabi_dcmple>
 8006244:	bb30      	cbnz	r0, 8006294 <_printf_float+0xc0>
 8006246:	2200      	movs	r2, #0
 8006248:	2300      	movs	r3, #0
 800624a:	4640      	mov	r0, r8
 800624c:	4651      	mov	r1, sl
 800624e:	f7fa fbb5 	bl	80009bc <__aeabi_dcmplt>
 8006252:	b110      	cbz	r0, 800625a <_printf_float+0x86>
 8006254:	232d      	movs	r3, #45	; 0x2d
 8006256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800625a:	4b92      	ldr	r3, [pc, #584]	; (80064a4 <_printf_float+0x2d0>)
 800625c:	4892      	ldr	r0, [pc, #584]	; (80064a8 <_printf_float+0x2d4>)
 800625e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006262:	bf94      	ite	ls
 8006264:	4698      	movls	r8, r3
 8006266:	4680      	movhi	r8, r0
 8006268:	2303      	movs	r3, #3
 800626a:	f04f 0a00 	mov.w	sl, #0
 800626e:	6123      	str	r3, [r4, #16]
 8006270:	f02b 0304 	bic.w	r3, fp, #4
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	4633      	mov	r3, r6
 8006278:	4621      	mov	r1, r4
 800627a:	4628      	mov	r0, r5
 800627c:	9700      	str	r7, [sp, #0]
 800627e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006280:	f000 f9d4 	bl	800662c <_printf_common>
 8006284:	3001      	adds	r0, #1
 8006286:	f040 8090 	bne.w	80063aa <_printf_float+0x1d6>
 800628a:	f04f 30ff 	mov.w	r0, #4294967295
 800628e:	b011      	add	sp, #68	; 0x44
 8006290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006294:	4642      	mov	r2, r8
 8006296:	4653      	mov	r3, sl
 8006298:	4640      	mov	r0, r8
 800629a:	4651      	mov	r1, sl
 800629c:	f7fa fbb6 	bl	8000a0c <__aeabi_dcmpun>
 80062a0:	b148      	cbz	r0, 80062b6 <_printf_float+0xe2>
 80062a2:	f1ba 0f00 	cmp.w	sl, #0
 80062a6:	bfb8      	it	lt
 80062a8:	232d      	movlt	r3, #45	; 0x2d
 80062aa:	4880      	ldr	r0, [pc, #512]	; (80064ac <_printf_float+0x2d8>)
 80062ac:	bfb8      	it	lt
 80062ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062b2:	4b7f      	ldr	r3, [pc, #508]	; (80064b0 <_printf_float+0x2dc>)
 80062b4:	e7d3      	b.n	800625e <_printf_float+0x8a>
 80062b6:	6863      	ldr	r3, [r4, #4]
 80062b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	d142      	bne.n	8006346 <_printf_float+0x172>
 80062c0:	2306      	movs	r3, #6
 80062c2:	6063      	str	r3, [r4, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	9206      	str	r2, [sp, #24]
 80062c8:	aa0e      	add	r2, sp, #56	; 0x38
 80062ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80062ce:	aa0d      	add	r2, sp, #52	; 0x34
 80062d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80062d4:	9203      	str	r2, [sp, #12]
 80062d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80062da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	6863      	ldr	r3, [r4, #4]
 80062e2:	4642      	mov	r2, r8
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	4628      	mov	r0, r5
 80062e8:	4653      	mov	r3, sl
 80062ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80062ec:	f7ff fed4 	bl	8006098 <__cvt>
 80062f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062f2:	4680      	mov	r8, r0
 80062f4:	2947      	cmp	r1, #71	; 0x47
 80062f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062f8:	d108      	bne.n	800630c <_printf_float+0x138>
 80062fa:	1cc8      	adds	r0, r1, #3
 80062fc:	db02      	blt.n	8006304 <_printf_float+0x130>
 80062fe:	6863      	ldr	r3, [r4, #4]
 8006300:	4299      	cmp	r1, r3
 8006302:	dd40      	ble.n	8006386 <_printf_float+0x1b2>
 8006304:	f1a9 0902 	sub.w	r9, r9, #2
 8006308:	fa5f f989 	uxtb.w	r9, r9
 800630c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006310:	d81f      	bhi.n	8006352 <_printf_float+0x17e>
 8006312:	464a      	mov	r2, r9
 8006314:	3901      	subs	r1, #1
 8006316:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800631a:	910d      	str	r1, [sp, #52]	; 0x34
 800631c:	f7ff ff1b 	bl	8006156 <__exponent>
 8006320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006322:	4682      	mov	sl, r0
 8006324:	1813      	adds	r3, r2, r0
 8006326:	2a01      	cmp	r2, #1
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	dc02      	bgt.n	8006332 <_printf_float+0x15e>
 800632c:	6822      	ldr	r2, [r4, #0]
 800632e:	07d2      	lsls	r2, r2, #31
 8006330:	d501      	bpl.n	8006336 <_printf_float+0x162>
 8006332:	3301      	adds	r3, #1
 8006334:	6123      	str	r3, [r4, #16]
 8006336:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800633a:	2b00      	cmp	r3, #0
 800633c:	d09b      	beq.n	8006276 <_printf_float+0xa2>
 800633e:	232d      	movs	r3, #45	; 0x2d
 8006340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006344:	e797      	b.n	8006276 <_printf_float+0xa2>
 8006346:	2947      	cmp	r1, #71	; 0x47
 8006348:	d1bc      	bne.n	80062c4 <_printf_float+0xf0>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1ba      	bne.n	80062c4 <_printf_float+0xf0>
 800634e:	2301      	movs	r3, #1
 8006350:	e7b7      	b.n	80062c2 <_printf_float+0xee>
 8006352:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006356:	d118      	bne.n	800638a <_printf_float+0x1b6>
 8006358:	2900      	cmp	r1, #0
 800635a:	6863      	ldr	r3, [r4, #4]
 800635c:	dd0b      	ble.n	8006376 <_printf_float+0x1a2>
 800635e:	6121      	str	r1, [r4, #16]
 8006360:	b913      	cbnz	r3, 8006368 <_printf_float+0x194>
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	07d0      	lsls	r0, r2, #31
 8006366:	d502      	bpl.n	800636e <_printf_float+0x19a>
 8006368:	3301      	adds	r3, #1
 800636a:	440b      	add	r3, r1
 800636c:	6123      	str	r3, [r4, #16]
 800636e:	f04f 0a00 	mov.w	sl, #0
 8006372:	65a1      	str	r1, [r4, #88]	; 0x58
 8006374:	e7df      	b.n	8006336 <_printf_float+0x162>
 8006376:	b913      	cbnz	r3, 800637e <_printf_float+0x1aa>
 8006378:	6822      	ldr	r2, [r4, #0]
 800637a:	07d2      	lsls	r2, r2, #31
 800637c:	d501      	bpl.n	8006382 <_printf_float+0x1ae>
 800637e:	3302      	adds	r3, #2
 8006380:	e7f4      	b.n	800636c <_printf_float+0x198>
 8006382:	2301      	movs	r3, #1
 8006384:	e7f2      	b.n	800636c <_printf_float+0x198>
 8006386:	f04f 0967 	mov.w	r9, #103	; 0x67
 800638a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800638c:	4299      	cmp	r1, r3
 800638e:	db05      	blt.n	800639c <_printf_float+0x1c8>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	6121      	str	r1, [r4, #16]
 8006394:	07d8      	lsls	r0, r3, #31
 8006396:	d5ea      	bpl.n	800636e <_printf_float+0x19a>
 8006398:	1c4b      	adds	r3, r1, #1
 800639a:	e7e7      	b.n	800636c <_printf_float+0x198>
 800639c:	2900      	cmp	r1, #0
 800639e:	bfcc      	ite	gt
 80063a0:	2201      	movgt	r2, #1
 80063a2:	f1c1 0202 	rsble	r2, r1, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	e7e0      	b.n	800636c <_printf_float+0x198>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	055a      	lsls	r2, r3, #21
 80063ae:	d407      	bmi.n	80063c0 <_printf_float+0x1ec>
 80063b0:	6923      	ldr	r3, [r4, #16]
 80063b2:	4642      	mov	r2, r8
 80063b4:	4631      	mov	r1, r6
 80063b6:	4628      	mov	r0, r5
 80063b8:	47b8      	blx	r7
 80063ba:	3001      	adds	r0, #1
 80063bc:	d12b      	bne.n	8006416 <_printf_float+0x242>
 80063be:	e764      	b.n	800628a <_printf_float+0xb6>
 80063c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80063c4:	f240 80dd 	bls.w	8006582 <_printf_float+0x3ae>
 80063c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063cc:	2200      	movs	r2, #0
 80063ce:	2300      	movs	r3, #0
 80063d0:	f7fa faea 	bl	80009a8 <__aeabi_dcmpeq>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d033      	beq.n	8006440 <_printf_float+0x26c>
 80063d8:	2301      	movs	r3, #1
 80063da:	4631      	mov	r1, r6
 80063dc:	4628      	mov	r0, r5
 80063de:	4a35      	ldr	r2, [pc, #212]	; (80064b4 <_printf_float+0x2e0>)
 80063e0:	47b8      	blx	r7
 80063e2:	3001      	adds	r0, #1
 80063e4:	f43f af51 	beq.w	800628a <_printf_float+0xb6>
 80063e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80063ec:	429a      	cmp	r2, r3
 80063ee:	db02      	blt.n	80063f6 <_printf_float+0x222>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	07d8      	lsls	r0, r3, #31
 80063f4:	d50f      	bpl.n	8006416 <_printf_float+0x242>
 80063f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063fa:	4631      	mov	r1, r6
 80063fc:	4628      	mov	r0, r5
 80063fe:	47b8      	blx	r7
 8006400:	3001      	adds	r0, #1
 8006402:	f43f af42 	beq.w	800628a <_printf_float+0xb6>
 8006406:	f04f 0800 	mov.w	r8, #0
 800640a:	f104 091a 	add.w	r9, r4, #26
 800640e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006410:	3b01      	subs	r3, #1
 8006412:	4543      	cmp	r3, r8
 8006414:	dc09      	bgt.n	800642a <_printf_float+0x256>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	079b      	lsls	r3, r3, #30
 800641a:	f100 8102 	bmi.w	8006622 <_printf_float+0x44e>
 800641e:	68e0      	ldr	r0, [r4, #12]
 8006420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006422:	4298      	cmp	r0, r3
 8006424:	bfb8      	it	lt
 8006426:	4618      	movlt	r0, r3
 8006428:	e731      	b.n	800628e <_printf_float+0xba>
 800642a:	2301      	movs	r3, #1
 800642c:	464a      	mov	r2, r9
 800642e:	4631      	mov	r1, r6
 8006430:	4628      	mov	r0, r5
 8006432:	47b8      	blx	r7
 8006434:	3001      	adds	r0, #1
 8006436:	f43f af28 	beq.w	800628a <_printf_float+0xb6>
 800643a:	f108 0801 	add.w	r8, r8, #1
 800643e:	e7e6      	b.n	800640e <_printf_float+0x23a>
 8006440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006442:	2b00      	cmp	r3, #0
 8006444:	dc38      	bgt.n	80064b8 <_printf_float+0x2e4>
 8006446:	2301      	movs	r3, #1
 8006448:	4631      	mov	r1, r6
 800644a:	4628      	mov	r0, r5
 800644c:	4a19      	ldr	r2, [pc, #100]	; (80064b4 <_printf_float+0x2e0>)
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	f43f af1a 	beq.w	800628a <_printf_float+0xb6>
 8006456:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800645a:	4313      	orrs	r3, r2
 800645c:	d102      	bne.n	8006464 <_printf_float+0x290>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	07d9      	lsls	r1, r3, #31
 8006462:	d5d8      	bpl.n	8006416 <_printf_float+0x242>
 8006464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006468:	4631      	mov	r1, r6
 800646a:	4628      	mov	r0, r5
 800646c:	47b8      	blx	r7
 800646e:	3001      	adds	r0, #1
 8006470:	f43f af0b 	beq.w	800628a <_printf_float+0xb6>
 8006474:	f04f 0900 	mov.w	r9, #0
 8006478:	f104 0a1a 	add.w	sl, r4, #26
 800647c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800647e:	425b      	negs	r3, r3
 8006480:	454b      	cmp	r3, r9
 8006482:	dc01      	bgt.n	8006488 <_printf_float+0x2b4>
 8006484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006486:	e794      	b.n	80063b2 <_printf_float+0x1de>
 8006488:	2301      	movs	r3, #1
 800648a:	4652      	mov	r2, sl
 800648c:	4631      	mov	r1, r6
 800648e:	4628      	mov	r0, r5
 8006490:	47b8      	blx	r7
 8006492:	3001      	adds	r0, #1
 8006494:	f43f aef9 	beq.w	800628a <_printf_float+0xb6>
 8006498:	f109 0901 	add.w	r9, r9, #1
 800649c:	e7ee      	b.n	800647c <_printf_float+0x2a8>
 800649e:	bf00      	nop
 80064a0:	7fefffff 	.word	0x7fefffff
 80064a4:	0800a904 	.word	0x0800a904
 80064a8:	0800a908 	.word	0x0800a908
 80064ac:	0800a910 	.word	0x0800a910
 80064b0:	0800a90c 	.word	0x0800a90c
 80064b4:	0800a914 	.word	0x0800a914
 80064b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064bc:	429a      	cmp	r2, r3
 80064be:	bfa8      	it	ge
 80064c0:	461a      	movge	r2, r3
 80064c2:	2a00      	cmp	r2, #0
 80064c4:	4691      	mov	r9, r2
 80064c6:	dc37      	bgt.n	8006538 <_printf_float+0x364>
 80064c8:	f04f 0b00 	mov.w	fp, #0
 80064cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064d0:	f104 021a 	add.w	r2, r4, #26
 80064d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80064d8:	ebaa 0309 	sub.w	r3, sl, r9
 80064dc:	455b      	cmp	r3, fp
 80064de:	dc33      	bgt.n	8006548 <_printf_float+0x374>
 80064e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064e4:	429a      	cmp	r2, r3
 80064e6:	db3b      	blt.n	8006560 <_printf_float+0x38c>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	07da      	lsls	r2, r3, #31
 80064ec:	d438      	bmi.n	8006560 <_printf_float+0x38c>
 80064ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064f2:	eba2 030a 	sub.w	r3, r2, sl
 80064f6:	eba2 0901 	sub.w	r9, r2, r1
 80064fa:	4599      	cmp	r9, r3
 80064fc:	bfa8      	it	ge
 80064fe:	4699      	movge	r9, r3
 8006500:	f1b9 0f00 	cmp.w	r9, #0
 8006504:	dc34      	bgt.n	8006570 <_printf_float+0x39c>
 8006506:	f04f 0800 	mov.w	r8, #0
 800650a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800650e:	f104 0a1a 	add.w	sl, r4, #26
 8006512:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006516:	1a9b      	subs	r3, r3, r2
 8006518:	eba3 0309 	sub.w	r3, r3, r9
 800651c:	4543      	cmp	r3, r8
 800651e:	f77f af7a 	ble.w	8006416 <_printf_float+0x242>
 8006522:	2301      	movs	r3, #1
 8006524:	4652      	mov	r2, sl
 8006526:	4631      	mov	r1, r6
 8006528:	4628      	mov	r0, r5
 800652a:	47b8      	blx	r7
 800652c:	3001      	adds	r0, #1
 800652e:	f43f aeac 	beq.w	800628a <_printf_float+0xb6>
 8006532:	f108 0801 	add.w	r8, r8, #1
 8006536:	e7ec      	b.n	8006512 <_printf_float+0x33e>
 8006538:	4613      	mov	r3, r2
 800653a:	4631      	mov	r1, r6
 800653c:	4642      	mov	r2, r8
 800653e:	4628      	mov	r0, r5
 8006540:	47b8      	blx	r7
 8006542:	3001      	adds	r0, #1
 8006544:	d1c0      	bne.n	80064c8 <_printf_float+0x2f4>
 8006546:	e6a0      	b.n	800628a <_printf_float+0xb6>
 8006548:	2301      	movs	r3, #1
 800654a:	4631      	mov	r1, r6
 800654c:	4628      	mov	r0, r5
 800654e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f ae99 	beq.w	800628a <_printf_float+0xb6>
 8006558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800655a:	f10b 0b01 	add.w	fp, fp, #1
 800655e:	e7b9      	b.n	80064d4 <_printf_float+0x300>
 8006560:	4631      	mov	r1, r6
 8006562:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006566:	4628      	mov	r0, r5
 8006568:	47b8      	blx	r7
 800656a:	3001      	adds	r0, #1
 800656c:	d1bf      	bne.n	80064ee <_printf_float+0x31a>
 800656e:	e68c      	b.n	800628a <_printf_float+0xb6>
 8006570:	464b      	mov	r3, r9
 8006572:	4631      	mov	r1, r6
 8006574:	4628      	mov	r0, r5
 8006576:	eb08 020a 	add.w	r2, r8, sl
 800657a:	47b8      	blx	r7
 800657c:	3001      	adds	r0, #1
 800657e:	d1c2      	bne.n	8006506 <_printf_float+0x332>
 8006580:	e683      	b.n	800628a <_printf_float+0xb6>
 8006582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006584:	2a01      	cmp	r2, #1
 8006586:	dc01      	bgt.n	800658c <_printf_float+0x3b8>
 8006588:	07db      	lsls	r3, r3, #31
 800658a:	d537      	bpl.n	80065fc <_printf_float+0x428>
 800658c:	2301      	movs	r3, #1
 800658e:	4642      	mov	r2, r8
 8006590:	4631      	mov	r1, r6
 8006592:	4628      	mov	r0, r5
 8006594:	47b8      	blx	r7
 8006596:	3001      	adds	r0, #1
 8006598:	f43f ae77 	beq.w	800628a <_printf_float+0xb6>
 800659c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a0:	4631      	mov	r1, r6
 80065a2:	4628      	mov	r0, r5
 80065a4:	47b8      	blx	r7
 80065a6:	3001      	adds	r0, #1
 80065a8:	f43f ae6f 	beq.w	800628a <_printf_float+0xb6>
 80065ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065b0:	2200      	movs	r2, #0
 80065b2:	2300      	movs	r3, #0
 80065b4:	f7fa f9f8 	bl	80009a8 <__aeabi_dcmpeq>
 80065b8:	b9d8      	cbnz	r0, 80065f2 <_printf_float+0x41e>
 80065ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065bc:	f108 0201 	add.w	r2, r8, #1
 80065c0:	3b01      	subs	r3, #1
 80065c2:	4631      	mov	r1, r6
 80065c4:	4628      	mov	r0, r5
 80065c6:	47b8      	blx	r7
 80065c8:	3001      	adds	r0, #1
 80065ca:	d10e      	bne.n	80065ea <_printf_float+0x416>
 80065cc:	e65d      	b.n	800628a <_printf_float+0xb6>
 80065ce:	2301      	movs	r3, #1
 80065d0:	464a      	mov	r2, r9
 80065d2:	4631      	mov	r1, r6
 80065d4:	4628      	mov	r0, r5
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	f43f ae56 	beq.w	800628a <_printf_float+0xb6>
 80065de:	f108 0801 	add.w	r8, r8, #1
 80065e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065e4:	3b01      	subs	r3, #1
 80065e6:	4543      	cmp	r3, r8
 80065e8:	dcf1      	bgt.n	80065ce <_printf_float+0x3fa>
 80065ea:	4653      	mov	r3, sl
 80065ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80065f0:	e6e0      	b.n	80063b4 <_printf_float+0x1e0>
 80065f2:	f04f 0800 	mov.w	r8, #0
 80065f6:	f104 091a 	add.w	r9, r4, #26
 80065fa:	e7f2      	b.n	80065e2 <_printf_float+0x40e>
 80065fc:	2301      	movs	r3, #1
 80065fe:	4642      	mov	r2, r8
 8006600:	e7df      	b.n	80065c2 <_printf_float+0x3ee>
 8006602:	2301      	movs	r3, #1
 8006604:	464a      	mov	r2, r9
 8006606:	4631      	mov	r1, r6
 8006608:	4628      	mov	r0, r5
 800660a:	47b8      	blx	r7
 800660c:	3001      	adds	r0, #1
 800660e:	f43f ae3c 	beq.w	800628a <_printf_float+0xb6>
 8006612:	f108 0801 	add.w	r8, r8, #1
 8006616:	68e3      	ldr	r3, [r4, #12]
 8006618:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800661a:	1a5b      	subs	r3, r3, r1
 800661c:	4543      	cmp	r3, r8
 800661e:	dcf0      	bgt.n	8006602 <_printf_float+0x42e>
 8006620:	e6fd      	b.n	800641e <_printf_float+0x24a>
 8006622:	f04f 0800 	mov.w	r8, #0
 8006626:	f104 0919 	add.w	r9, r4, #25
 800662a:	e7f4      	b.n	8006616 <_printf_float+0x442>

0800662c <_printf_common>:
 800662c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006630:	4616      	mov	r6, r2
 8006632:	4699      	mov	r9, r3
 8006634:	688a      	ldr	r2, [r1, #8]
 8006636:	690b      	ldr	r3, [r1, #16]
 8006638:	4607      	mov	r7, r0
 800663a:	4293      	cmp	r3, r2
 800663c:	bfb8      	it	lt
 800663e:	4613      	movlt	r3, r2
 8006640:	6033      	str	r3, [r6, #0]
 8006642:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006646:	460c      	mov	r4, r1
 8006648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800664c:	b10a      	cbz	r2, 8006652 <_printf_common+0x26>
 800664e:	3301      	adds	r3, #1
 8006650:	6033      	str	r3, [r6, #0]
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	0699      	lsls	r1, r3, #26
 8006656:	bf42      	ittt	mi
 8006658:	6833      	ldrmi	r3, [r6, #0]
 800665a:	3302      	addmi	r3, #2
 800665c:	6033      	strmi	r3, [r6, #0]
 800665e:	6825      	ldr	r5, [r4, #0]
 8006660:	f015 0506 	ands.w	r5, r5, #6
 8006664:	d106      	bne.n	8006674 <_printf_common+0x48>
 8006666:	f104 0a19 	add.w	sl, r4, #25
 800666a:	68e3      	ldr	r3, [r4, #12]
 800666c:	6832      	ldr	r2, [r6, #0]
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	42ab      	cmp	r3, r5
 8006672:	dc28      	bgt.n	80066c6 <_printf_common+0x9a>
 8006674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006678:	1e13      	subs	r3, r2, #0
 800667a:	6822      	ldr	r2, [r4, #0]
 800667c:	bf18      	it	ne
 800667e:	2301      	movne	r3, #1
 8006680:	0692      	lsls	r2, r2, #26
 8006682:	d42d      	bmi.n	80066e0 <_printf_common+0xb4>
 8006684:	4649      	mov	r1, r9
 8006686:	4638      	mov	r0, r7
 8006688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800668c:	47c0      	blx	r8
 800668e:	3001      	adds	r0, #1
 8006690:	d020      	beq.n	80066d4 <_printf_common+0xa8>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	68e5      	ldr	r5, [r4, #12]
 8006696:	f003 0306 	and.w	r3, r3, #6
 800669a:	2b04      	cmp	r3, #4
 800669c:	bf18      	it	ne
 800669e:	2500      	movne	r5, #0
 80066a0:	6832      	ldr	r2, [r6, #0]
 80066a2:	f04f 0600 	mov.w	r6, #0
 80066a6:	68a3      	ldr	r3, [r4, #8]
 80066a8:	bf08      	it	eq
 80066aa:	1aad      	subeq	r5, r5, r2
 80066ac:	6922      	ldr	r2, [r4, #16]
 80066ae:	bf08      	it	eq
 80066b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066b4:	4293      	cmp	r3, r2
 80066b6:	bfc4      	itt	gt
 80066b8:	1a9b      	subgt	r3, r3, r2
 80066ba:	18ed      	addgt	r5, r5, r3
 80066bc:	341a      	adds	r4, #26
 80066be:	42b5      	cmp	r5, r6
 80066c0:	d11a      	bne.n	80066f8 <_printf_common+0xcc>
 80066c2:	2000      	movs	r0, #0
 80066c4:	e008      	b.n	80066d8 <_printf_common+0xac>
 80066c6:	2301      	movs	r3, #1
 80066c8:	4652      	mov	r2, sl
 80066ca:	4649      	mov	r1, r9
 80066cc:	4638      	mov	r0, r7
 80066ce:	47c0      	blx	r8
 80066d0:	3001      	adds	r0, #1
 80066d2:	d103      	bne.n	80066dc <_printf_common+0xb0>
 80066d4:	f04f 30ff 	mov.w	r0, #4294967295
 80066d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066dc:	3501      	adds	r5, #1
 80066de:	e7c4      	b.n	800666a <_printf_common+0x3e>
 80066e0:	2030      	movs	r0, #48	; 0x30
 80066e2:	18e1      	adds	r1, r4, r3
 80066e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066ee:	4422      	add	r2, r4
 80066f0:	3302      	adds	r3, #2
 80066f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066f6:	e7c5      	b.n	8006684 <_printf_common+0x58>
 80066f8:	2301      	movs	r3, #1
 80066fa:	4622      	mov	r2, r4
 80066fc:	4649      	mov	r1, r9
 80066fe:	4638      	mov	r0, r7
 8006700:	47c0      	blx	r8
 8006702:	3001      	adds	r0, #1
 8006704:	d0e6      	beq.n	80066d4 <_printf_common+0xa8>
 8006706:	3601      	adds	r6, #1
 8006708:	e7d9      	b.n	80066be <_printf_common+0x92>
	...

0800670c <_printf_i>:
 800670c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006710:	460c      	mov	r4, r1
 8006712:	7e27      	ldrb	r7, [r4, #24]
 8006714:	4691      	mov	r9, r2
 8006716:	2f78      	cmp	r7, #120	; 0x78
 8006718:	4680      	mov	r8, r0
 800671a:	469a      	mov	sl, r3
 800671c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800671e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006722:	d807      	bhi.n	8006734 <_printf_i+0x28>
 8006724:	2f62      	cmp	r7, #98	; 0x62
 8006726:	d80a      	bhi.n	800673e <_printf_i+0x32>
 8006728:	2f00      	cmp	r7, #0
 800672a:	f000 80d9 	beq.w	80068e0 <_printf_i+0x1d4>
 800672e:	2f58      	cmp	r7, #88	; 0x58
 8006730:	f000 80a4 	beq.w	800687c <_printf_i+0x170>
 8006734:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800673c:	e03a      	b.n	80067b4 <_printf_i+0xa8>
 800673e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006742:	2b15      	cmp	r3, #21
 8006744:	d8f6      	bhi.n	8006734 <_printf_i+0x28>
 8006746:	a001      	add	r0, pc, #4	; (adr r0, 800674c <_printf_i+0x40>)
 8006748:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800674c:	080067a5 	.word	0x080067a5
 8006750:	080067b9 	.word	0x080067b9
 8006754:	08006735 	.word	0x08006735
 8006758:	08006735 	.word	0x08006735
 800675c:	08006735 	.word	0x08006735
 8006760:	08006735 	.word	0x08006735
 8006764:	080067b9 	.word	0x080067b9
 8006768:	08006735 	.word	0x08006735
 800676c:	08006735 	.word	0x08006735
 8006770:	08006735 	.word	0x08006735
 8006774:	08006735 	.word	0x08006735
 8006778:	080068c7 	.word	0x080068c7
 800677c:	080067e9 	.word	0x080067e9
 8006780:	080068a9 	.word	0x080068a9
 8006784:	08006735 	.word	0x08006735
 8006788:	08006735 	.word	0x08006735
 800678c:	080068e9 	.word	0x080068e9
 8006790:	08006735 	.word	0x08006735
 8006794:	080067e9 	.word	0x080067e9
 8006798:	08006735 	.word	0x08006735
 800679c:	08006735 	.word	0x08006735
 80067a0:	080068b1 	.word	0x080068b1
 80067a4:	680b      	ldr	r3, [r1, #0]
 80067a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067aa:	1d1a      	adds	r2, r3, #4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	600a      	str	r2, [r1, #0]
 80067b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0a4      	b.n	8006902 <_printf_i+0x1f6>
 80067b8:	6825      	ldr	r5, [r4, #0]
 80067ba:	6808      	ldr	r0, [r1, #0]
 80067bc:	062e      	lsls	r6, r5, #24
 80067be:	f100 0304 	add.w	r3, r0, #4
 80067c2:	d50a      	bpl.n	80067da <_printf_i+0xce>
 80067c4:	6805      	ldr	r5, [r0, #0]
 80067c6:	600b      	str	r3, [r1, #0]
 80067c8:	2d00      	cmp	r5, #0
 80067ca:	da03      	bge.n	80067d4 <_printf_i+0xc8>
 80067cc:	232d      	movs	r3, #45	; 0x2d
 80067ce:	426d      	negs	r5, r5
 80067d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d4:	230a      	movs	r3, #10
 80067d6:	485e      	ldr	r0, [pc, #376]	; (8006950 <_printf_i+0x244>)
 80067d8:	e019      	b.n	800680e <_printf_i+0x102>
 80067da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80067de:	6805      	ldr	r5, [r0, #0]
 80067e0:	600b      	str	r3, [r1, #0]
 80067e2:	bf18      	it	ne
 80067e4:	b22d      	sxthne	r5, r5
 80067e6:	e7ef      	b.n	80067c8 <_printf_i+0xbc>
 80067e8:	680b      	ldr	r3, [r1, #0]
 80067ea:	6825      	ldr	r5, [r4, #0]
 80067ec:	1d18      	adds	r0, r3, #4
 80067ee:	6008      	str	r0, [r1, #0]
 80067f0:	0628      	lsls	r0, r5, #24
 80067f2:	d501      	bpl.n	80067f8 <_printf_i+0xec>
 80067f4:	681d      	ldr	r5, [r3, #0]
 80067f6:	e002      	b.n	80067fe <_printf_i+0xf2>
 80067f8:	0669      	lsls	r1, r5, #25
 80067fa:	d5fb      	bpl.n	80067f4 <_printf_i+0xe8>
 80067fc:	881d      	ldrh	r5, [r3, #0]
 80067fe:	2f6f      	cmp	r7, #111	; 0x6f
 8006800:	bf0c      	ite	eq
 8006802:	2308      	moveq	r3, #8
 8006804:	230a      	movne	r3, #10
 8006806:	4852      	ldr	r0, [pc, #328]	; (8006950 <_printf_i+0x244>)
 8006808:	2100      	movs	r1, #0
 800680a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800680e:	6866      	ldr	r6, [r4, #4]
 8006810:	2e00      	cmp	r6, #0
 8006812:	bfa8      	it	ge
 8006814:	6821      	ldrge	r1, [r4, #0]
 8006816:	60a6      	str	r6, [r4, #8]
 8006818:	bfa4      	itt	ge
 800681a:	f021 0104 	bicge.w	r1, r1, #4
 800681e:	6021      	strge	r1, [r4, #0]
 8006820:	b90d      	cbnz	r5, 8006826 <_printf_i+0x11a>
 8006822:	2e00      	cmp	r6, #0
 8006824:	d04d      	beq.n	80068c2 <_printf_i+0x1b6>
 8006826:	4616      	mov	r6, r2
 8006828:	fbb5 f1f3 	udiv	r1, r5, r3
 800682c:	fb03 5711 	mls	r7, r3, r1, r5
 8006830:	5dc7      	ldrb	r7, [r0, r7]
 8006832:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006836:	462f      	mov	r7, r5
 8006838:	42bb      	cmp	r3, r7
 800683a:	460d      	mov	r5, r1
 800683c:	d9f4      	bls.n	8006828 <_printf_i+0x11c>
 800683e:	2b08      	cmp	r3, #8
 8006840:	d10b      	bne.n	800685a <_printf_i+0x14e>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	07df      	lsls	r7, r3, #31
 8006846:	d508      	bpl.n	800685a <_printf_i+0x14e>
 8006848:	6923      	ldr	r3, [r4, #16]
 800684a:	6861      	ldr	r1, [r4, #4]
 800684c:	4299      	cmp	r1, r3
 800684e:	bfde      	ittt	le
 8006850:	2330      	movle	r3, #48	; 0x30
 8006852:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006856:	f106 36ff 	addle.w	r6, r6, #4294967295
 800685a:	1b92      	subs	r2, r2, r6
 800685c:	6122      	str	r2, [r4, #16]
 800685e:	464b      	mov	r3, r9
 8006860:	4621      	mov	r1, r4
 8006862:	4640      	mov	r0, r8
 8006864:	f8cd a000 	str.w	sl, [sp]
 8006868:	aa03      	add	r2, sp, #12
 800686a:	f7ff fedf 	bl	800662c <_printf_common>
 800686e:	3001      	adds	r0, #1
 8006870:	d14c      	bne.n	800690c <_printf_i+0x200>
 8006872:	f04f 30ff 	mov.w	r0, #4294967295
 8006876:	b004      	add	sp, #16
 8006878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687c:	4834      	ldr	r0, [pc, #208]	; (8006950 <_printf_i+0x244>)
 800687e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006882:	680e      	ldr	r6, [r1, #0]
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	f856 5b04 	ldr.w	r5, [r6], #4
 800688a:	061f      	lsls	r7, r3, #24
 800688c:	600e      	str	r6, [r1, #0]
 800688e:	d514      	bpl.n	80068ba <_printf_i+0x1ae>
 8006890:	07d9      	lsls	r1, r3, #31
 8006892:	bf44      	itt	mi
 8006894:	f043 0320 	orrmi.w	r3, r3, #32
 8006898:	6023      	strmi	r3, [r4, #0]
 800689a:	b91d      	cbnz	r5, 80068a4 <_printf_i+0x198>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	f023 0320 	bic.w	r3, r3, #32
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	2310      	movs	r3, #16
 80068a6:	e7af      	b.n	8006808 <_printf_i+0xfc>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	f043 0320 	orr.w	r3, r3, #32
 80068ae:	6023      	str	r3, [r4, #0]
 80068b0:	2378      	movs	r3, #120	; 0x78
 80068b2:	4828      	ldr	r0, [pc, #160]	; (8006954 <_printf_i+0x248>)
 80068b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068b8:	e7e3      	b.n	8006882 <_printf_i+0x176>
 80068ba:	065e      	lsls	r6, r3, #25
 80068bc:	bf48      	it	mi
 80068be:	b2ad      	uxthmi	r5, r5
 80068c0:	e7e6      	b.n	8006890 <_printf_i+0x184>
 80068c2:	4616      	mov	r6, r2
 80068c4:	e7bb      	b.n	800683e <_printf_i+0x132>
 80068c6:	680b      	ldr	r3, [r1, #0]
 80068c8:	6826      	ldr	r6, [r4, #0]
 80068ca:	1d1d      	adds	r5, r3, #4
 80068cc:	6960      	ldr	r0, [r4, #20]
 80068ce:	600d      	str	r5, [r1, #0]
 80068d0:	0635      	lsls	r5, r6, #24
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	d501      	bpl.n	80068da <_printf_i+0x1ce>
 80068d6:	6018      	str	r0, [r3, #0]
 80068d8:	e002      	b.n	80068e0 <_printf_i+0x1d4>
 80068da:	0671      	lsls	r1, r6, #25
 80068dc:	d5fb      	bpl.n	80068d6 <_printf_i+0x1ca>
 80068de:	8018      	strh	r0, [r3, #0]
 80068e0:	2300      	movs	r3, #0
 80068e2:	4616      	mov	r6, r2
 80068e4:	6123      	str	r3, [r4, #16]
 80068e6:	e7ba      	b.n	800685e <_printf_i+0x152>
 80068e8:	680b      	ldr	r3, [r1, #0]
 80068ea:	1d1a      	adds	r2, r3, #4
 80068ec:	600a      	str	r2, [r1, #0]
 80068ee:	681e      	ldr	r6, [r3, #0]
 80068f0:	2100      	movs	r1, #0
 80068f2:	4630      	mov	r0, r6
 80068f4:	6862      	ldr	r2, [r4, #4]
 80068f6:	f002 fb15 	bl	8008f24 <memchr>
 80068fa:	b108      	cbz	r0, 8006900 <_printf_i+0x1f4>
 80068fc:	1b80      	subs	r0, r0, r6
 80068fe:	6060      	str	r0, [r4, #4]
 8006900:	6863      	ldr	r3, [r4, #4]
 8006902:	6123      	str	r3, [r4, #16]
 8006904:	2300      	movs	r3, #0
 8006906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800690a:	e7a8      	b.n	800685e <_printf_i+0x152>
 800690c:	4632      	mov	r2, r6
 800690e:	4649      	mov	r1, r9
 8006910:	4640      	mov	r0, r8
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	47d0      	blx	sl
 8006916:	3001      	adds	r0, #1
 8006918:	d0ab      	beq.n	8006872 <_printf_i+0x166>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	079b      	lsls	r3, r3, #30
 800691e:	d413      	bmi.n	8006948 <_printf_i+0x23c>
 8006920:	68e0      	ldr	r0, [r4, #12]
 8006922:	9b03      	ldr	r3, [sp, #12]
 8006924:	4298      	cmp	r0, r3
 8006926:	bfb8      	it	lt
 8006928:	4618      	movlt	r0, r3
 800692a:	e7a4      	b.n	8006876 <_printf_i+0x16a>
 800692c:	2301      	movs	r3, #1
 800692e:	4632      	mov	r2, r6
 8006930:	4649      	mov	r1, r9
 8006932:	4640      	mov	r0, r8
 8006934:	47d0      	blx	sl
 8006936:	3001      	adds	r0, #1
 8006938:	d09b      	beq.n	8006872 <_printf_i+0x166>
 800693a:	3501      	adds	r5, #1
 800693c:	68e3      	ldr	r3, [r4, #12]
 800693e:	9903      	ldr	r1, [sp, #12]
 8006940:	1a5b      	subs	r3, r3, r1
 8006942:	42ab      	cmp	r3, r5
 8006944:	dcf2      	bgt.n	800692c <_printf_i+0x220>
 8006946:	e7eb      	b.n	8006920 <_printf_i+0x214>
 8006948:	2500      	movs	r5, #0
 800694a:	f104 0619 	add.w	r6, r4, #25
 800694e:	e7f5      	b.n	800693c <_printf_i+0x230>
 8006950:	0800a916 	.word	0x0800a916
 8006954:	0800a927 	.word	0x0800a927

08006958 <_scanf_float>:
 8006958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	b087      	sub	sp, #28
 800695e:	9303      	str	r3, [sp, #12]
 8006960:	688b      	ldr	r3, [r1, #8]
 8006962:	4617      	mov	r7, r2
 8006964:	1e5a      	subs	r2, r3, #1
 8006966:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800696a:	bf85      	ittet	hi
 800696c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006970:	195b      	addhi	r3, r3, r5
 8006972:	2300      	movls	r3, #0
 8006974:	9302      	strhi	r3, [sp, #8]
 8006976:	bf88      	it	hi
 8006978:	f240 135d 	movwhi	r3, #349	; 0x15d
 800697c:	468b      	mov	fp, r1
 800697e:	f04f 0500 	mov.w	r5, #0
 8006982:	bf8c      	ite	hi
 8006984:	608b      	strhi	r3, [r1, #8]
 8006986:	9302      	strls	r3, [sp, #8]
 8006988:	680b      	ldr	r3, [r1, #0]
 800698a:	4680      	mov	r8, r0
 800698c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006990:	f84b 3b1c 	str.w	r3, [fp], #28
 8006994:	460c      	mov	r4, r1
 8006996:	465e      	mov	r6, fp
 8006998:	46aa      	mov	sl, r5
 800699a:	46a9      	mov	r9, r5
 800699c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80069a0:	9501      	str	r5, [sp, #4]
 80069a2:	68a2      	ldr	r2, [r4, #8]
 80069a4:	b152      	cbz	r2, 80069bc <_scanf_float+0x64>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b4e      	cmp	r3, #78	; 0x4e
 80069ac:	d864      	bhi.n	8006a78 <_scanf_float+0x120>
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	d83c      	bhi.n	8006a2c <_scanf_float+0xd4>
 80069b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80069b6:	b2c8      	uxtb	r0, r1
 80069b8:	280e      	cmp	r0, #14
 80069ba:	d93a      	bls.n	8006a32 <_scanf_float+0xda>
 80069bc:	f1b9 0f00 	cmp.w	r9, #0
 80069c0:	d003      	beq.n	80069ca <_scanf_float+0x72>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ce:	f1ba 0f01 	cmp.w	sl, #1
 80069d2:	f200 8113 	bhi.w	8006bfc <_scanf_float+0x2a4>
 80069d6:	455e      	cmp	r6, fp
 80069d8:	f200 8105 	bhi.w	8006be6 <_scanf_float+0x28e>
 80069dc:	2501      	movs	r5, #1
 80069de:	4628      	mov	r0, r5
 80069e0:	b007      	add	sp, #28
 80069e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80069ea:	2a0d      	cmp	r2, #13
 80069ec:	d8e6      	bhi.n	80069bc <_scanf_float+0x64>
 80069ee:	a101      	add	r1, pc, #4	; (adr r1, 80069f4 <_scanf_float+0x9c>)
 80069f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069f4:	08006b33 	.word	0x08006b33
 80069f8:	080069bd 	.word	0x080069bd
 80069fc:	080069bd 	.word	0x080069bd
 8006a00:	080069bd 	.word	0x080069bd
 8006a04:	08006b93 	.word	0x08006b93
 8006a08:	08006b6b 	.word	0x08006b6b
 8006a0c:	080069bd 	.word	0x080069bd
 8006a10:	080069bd 	.word	0x080069bd
 8006a14:	08006b41 	.word	0x08006b41
 8006a18:	080069bd 	.word	0x080069bd
 8006a1c:	080069bd 	.word	0x080069bd
 8006a20:	080069bd 	.word	0x080069bd
 8006a24:	080069bd 	.word	0x080069bd
 8006a28:	08006af9 	.word	0x08006af9
 8006a2c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006a30:	e7db      	b.n	80069ea <_scanf_float+0x92>
 8006a32:	290e      	cmp	r1, #14
 8006a34:	d8c2      	bhi.n	80069bc <_scanf_float+0x64>
 8006a36:	a001      	add	r0, pc, #4	; (adr r0, 8006a3c <_scanf_float+0xe4>)
 8006a38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006a3c:	08006aeb 	.word	0x08006aeb
 8006a40:	080069bd 	.word	0x080069bd
 8006a44:	08006aeb 	.word	0x08006aeb
 8006a48:	08006b7f 	.word	0x08006b7f
 8006a4c:	080069bd 	.word	0x080069bd
 8006a50:	08006a99 	.word	0x08006a99
 8006a54:	08006ad5 	.word	0x08006ad5
 8006a58:	08006ad5 	.word	0x08006ad5
 8006a5c:	08006ad5 	.word	0x08006ad5
 8006a60:	08006ad5 	.word	0x08006ad5
 8006a64:	08006ad5 	.word	0x08006ad5
 8006a68:	08006ad5 	.word	0x08006ad5
 8006a6c:	08006ad5 	.word	0x08006ad5
 8006a70:	08006ad5 	.word	0x08006ad5
 8006a74:	08006ad5 	.word	0x08006ad5
 8006a78:	2b6e      	cmp	r3, #110	; 0x6e
 8006a7a:	d809      	bhi.n	8006a90 <_scanf_float+0x138>
 8006a7c:	2b60      	cmp	r3, #96	; 0x60
 8006a7e:	d8b2      	bhi.n	80069e6 <_scanf_float+0x8e>
 8006a80:	2b54      	cmp	r3, #84	; 0x54
 8006a82:	d077      	beq.n	8006b74 <_scanf_float+0x21c>
 8006a84:	2b59      	cmp	r3, #89	; 0x59
 8006a86:	d199      	bne.n	80069bc <_scanf_float+0x64>
 8006a88:	2d07      	cmp	r5, #7
 8006a8a:	d197      	bne.n	80069bc <_scanf_float+0x64>
 8006a8c:	2508      	movs	r5, #8
 8006a8e:	e029      	b.n	8006ae4 <_scanf_float+0x18c>
 8006a90:	2b74      	cmp	r3, #116	; 0x74
 8006a92:	d06f      	beq.n	8006b74 <_scanf_float+0x21c>
 8006a94:	2b79      	cmp	r3, #121	; 0x79
 8006a96:	e7f6      	b.n	8006a86 <_scanf_float+0x12e>
 8006a98:	6821      	ldr	r1, [r4, #0]
 8006a9a:	05c8      	lsls	r0, r1, #23
 8006a9c:	d51a      	bpl.n	8006ad4 <_scanf_float+0x17c>
 8006a9e:	9b02      	ldr	r3, [sp, #8]
 8006aa0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006aa4:	6021      	str	r1, [r4, #0]
 8006aa6:	f109 0901 	add.w	r9, r9, #1
 8006aaa:	b11b      	cbz	r3, 8006ab4 <_scanf_float+0x15c>
 8006aac:	3b01      	subs	r3, #1
 8006aae:	3201      	adds	r2, #1
 8006ab0:	9302      	str	r3, [sp, #8]
 8006ab2:	60a2      	str	r2, [r4, #8]
 8006ab4:	68a3      	ldr	r3, [r4, #8]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	60a3      	str	r3, [r4, #8]
 8006aba:	6923      	ldr	r3, [r4, #16]
 8006abc:	3301      	adds	r3, #1
 8006abe:	6123      	str	r3, [r4, #16]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	607b      	str	r3, [r7, #4]
 8006ac8:	f340 8084 	ble.w	8006bd4 <_scanf_float+0x27c>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	603b      	str	r3, [r7, #0]
 8006ad2:	e766      	b.n	80069a2 <_scanf_float+0x4a>
 8006ad4:	eb1a 0f05 	cmn.w	sl, r5
 8006ad8:	f47f af70 	bne.w	80069bc <_scanf_float+0x64>
 8006adc:	6822      	ldr	r2, [r4, #0]
 8006ade:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006ae2:	6022      	str	r2, [r4, #0]
 8006ae4:	f806 3b01 	strb.w	r3, [r6], #1
 8006ae8:	e7e4      	b.n	8006ab4 <_scanf_float+0x15c>
 8006aea:	6822      	ldr	r2, [r4, #0]
 8006aec:	0610      	lsls	r0, r2, #24
 8006aee:	f57f af65 	bpl.w	80069bc <_scanf_float+0x64>
 8006af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006af6:	e7f4      	b.n	8006ae2 <_scanf_float+0x18a>
 8006af8:	f1ba 0f00 	cmp.w	sl, #0
 8006afc:	d10e      	bne.n	8006b1c <_scanf_float+0x1c4>
 8006afe:	f1b9 0f00 	cmp.w	r9, #0
 8006b02:	d10e      	bne.n	8006b22 <_scanf_float+0x1ca>
 8006b04:	6822      	ldr	r2, [r4, #0]
 8006b06:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b0e:	d108      	bne.n	8006b22 <_scanf_float+0x1ca>
 8006b10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b14:	f04f 0a01 	mov.w	sl, #1
 8006b18:	6022      	str	r2, [r4, #0]
 8006b1a:	e7e3      	b.n	8006ae4 <_scanf_float+0x18c>
 8006b1c:	f1ba 0f02 	cmp.w	sl, #2
 8006b20:	d055      	beq.n	8006bce <_scanf_float+0x276>
 8006b22:	2d01      	cmp	r5, #1
 8006b24:	d002      	beq.n	8006b2c <_scanf_float+0x1d4>
 8006b26:	2d04      	cmp	r5, #4
 8006b28:	f47f af48 	bne.w	80069bc <_scanf_float+0x64>
 8006b2c:	3501      	adds	r5, #1
 8006b2e:	b2ed      	uxtb	r5, r5
 8006b30:	e7d8      	b.n	8006ae4 <_scanf_float+0x18c>
 8006b32:	f1ba 0f01 	cmp.w	sl, #1
 8006b36:	f47f af41 	bne.w	80069bc <_scanf_float+0x64>
 8006b3a:	f04f 0a02 	mov.w	sl, #2
 8006b3e:	e7d1      	b.n	8006ae4 <_scanf_float+0x18c>
 8006b40:	b97d      	cbnz	r5, 8006b62 <_scanf_float+0x20a>
 8006b42:	f1b9 0f00 	cmp.w	r9, #0
 8006b46:	f47f af3c 	bne.w	80069c2 <_scanf_float+0x6a>
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b54:	f47f af39 	bne.w	80069ca <_scanf_float+0x72>
 8006b58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b5c:	2501      	movs	r5, #1
 8006b5e:	6022      	str	r2, [r4, #0]
 8006b60:	e7c0      	b.n	8006ae4 <_scanf_float+0x18c>
 8006b62:	2d03      	cmp	r5, #3
 8006b64:	d0e2      	beq.n	8006b2c <_scanf_float+0x1d4>
 8006b66:	2d05      	cmp	r5, #5
 8006b68:	e7de      	b.n	8006b28 <_scanf_float+0x1d0>
 8006b6a:	2d02      	cmp	r5, #2
 8006b6c:	f47f af26 	bne.w	80069bc <_scanf_float+0x64>
 8006b70:	2503      	movs	r5, #3
 8006b72:	e7b7      	b.n	8006ae4 <_scanf_float+0x18c>
 8006b74:	2d06      	cmp	r5, #6
 8006b76:	f47f af21 	bne.w	80069bc <_scanf_float+0x64>
 8006b7a:	2507      	movs	r5, #7
 8006b7c:	e7b2      	b.n	8006ae4 <_scanf_float+0x18c>
 8006b7e:	6822      	ldr	r2, [r4, #0]
 8006b80:	0591      	lsls	r1, r2, #22
 8006b82:	f57f af1b 	bpl.w	80069bc <_scanf_float+0x64>
 8006b86:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006b8a:	6022      	str	r2, [r4, #0]
 8006b8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b90:	e7a8      	b.n	8006ae4 <_scanf_float+0x18c>
 8006b92:	6822      	ldr	r2, [r4, #0]
 8006b94:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006b98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006b9c:	d006      	beq.n	8006bac <_scanf_float+0x254>
 8006b9e:	0550      	lsls	r0, r2, #21
 8006ba0:	f57f af0c 	bpl.w	80069bc <_scanf_float+0x64>
 8006ba4:	f1b9 0f00 	cmp.w	r9, #0
 8006ba8:	f43f af0f 	beq.w	80069ca <_scanf_float+0x72>
 8006bac:	0591      	lsls	r1, r2, #22
 8006bae:	bf58      	it	pl
 8006bb0:	9901      	ldrpl	r1, [sp, #4]
 8006bb2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bb6:	bf58      	it	pl
 8006bb8:	eba9 0101 	subpl.w	r1, r9, r1
 8006bbc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006bc0:	f04f 0900 	mov.w	r9, #0
 8006bc4:	bf58      	it	pl
 8006bc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006bca:	6022      	str	r2, [r4, #0]
 8006bcc:	e78a      	b.n	8006ae4 <_scanf_float+0x18c>
 8006bce:	f04f 0a03 	mov.w	sl, #3
 8006bd2:	e787      	b.n	8006ae4 <_scanf_float+0x18c>
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006bdc:	4798      	blx	r3
 8006bde:	2800      	cmp	r0, #0
 8006be0:	f43f aedf 	beq.w	80069a2 <_scanf_float+0x4a>
 8006be4:	e6ea      	b.n	80069bc <_scanf_float+0x64>
 8006be6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bea:	463a      	mov	r2, r7
 8006bec:	4640      	mov	r0, r8
 8006bee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bf2:	4798      	blx	r3
 8006bf4:	6923      	ldr	r3, [r4, #16]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	6123      	str	r3, [r4, #16]
 8006bfa:	e6ec      	b.n	80069d6 <_scanf_float+0x7e>
 8006bfc:	1e6b      	subs	r3, r5, #1
 8006bfe:	2b06      	cmp	r3, #6
 8006c00:	d825      	bhi.n	8006c4e <_scanf_float+0x2f6>
 8006c02:	2d02      	cmp	r5, #2
 8006c04:	d836      	bhi.n	8006c74 <_scanf_float+0x31c>
 8006c06:	455e      	cmp	r6, fp
 8006c08:	f67f aee8 	bls.w	80069dc <_scanf_float+0x84>
 8006c0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c10:	463a      	mov	r2, r7
 8006c12:	4640      	mov	r0, r8
 8006c14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c18:	4798      	blx	r3
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	6123      	str	r3, [r4, #16]
 8006c20:	e7f1      	b.n	8006c06 <_scanf_float+0x2ae>
 8006c22:	9802      	ldr	r0, [sp, #8]
 8006c24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006c2c:	463a      	mov	r2, r7
 8006c2e:	9002      	str	r0, [sp, #8]
 8006c30:	4640      	mov	r0, r8
 8006c32:	4798      	blx	r3
 8006c34:	6923      	ldr	r3, [r4, #16]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	6123      	str	r3, [r4, #16]
 8006c3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c3e:	fa5f fa8a 	uxtb.w	sl, sl
 8006c42:	f1ba 0f02 	cmp.w	sl, #2
 8006c46:	d1ec      	bne.n	8006c22 <_scanf_float+0x2ca>
 8006c48:	3d03      	subs	r5, #3
 8006c4a:	b2ed      	uxtb	r5, r5
 8006c4c:	1b76      	subs	r6, r6, r5
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	05da      	lsls	r2, r3, #23
 8006c52:	d52f      	bpl.n	8006cb4 <_scanf_float+0x35c>
 8006c54:	055b      	lsls	r3, r3, #21
 8006c56:	d510      	bpl.n	8006c7a <_scanf_float+0x322>
 8006c58:	455e      	cmp	r6, fp
 8006c5a:	f67f aebf 	bls.w	80069dc <_scanf_float+0x84>
 8006c5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c62:	463a      	mov	r2, r7
 8006c64:	4640      	mov	r0, r8
 8006c66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c6a:	4798      	blx	r3
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	6123      	str	r3, [r4, #16]
 8006c72:	e7f1      	b.n	8006c58 <_scanf_float+0x300>
 8006c74:	46aa      	mov	sl, r5
 8006c76:	9602      	str	r6, [sp, #8]
 8006c78:	e7df      	b.n	8006c3a <_scanf_float+0x2e2>
 8006c7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	2965      	cmp	r1, #101	; 0x65
 8006c82:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c86:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c8a:	6123      	str	r3, [r4, #16]
 8006c8c:	d00c      	beq.n	8006ca8 <_scanf_float+0x350>
 8006c8e:	2945      	cmp	r1, #69	; 0x45
 8006c90:	d00a      	beq.n	8006ca8 <_scanf_float+0x350>
 8006c92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c96:	463a      	mov	r2, r7
 8006c98:	4640      	mov	r0, r8
 8006c9a:	4798      	blx	r3
 8006c9c:	6923      	ldr	r3, [r4, #16]
 8006c9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	1eb5      	subs	r5, r6, #2
 8006ca6:	6123      	str	r3, [r4, #16]
 8006ca8:	463a      	mov	r2, r7
 8006caa:	4640      	mov	r0, r8
 8006cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cb0:	4798      	blx	r3
 8006cb2:	462e      	mov	r6, r5
 8006cb4:	6825      	ldr	r5, [r4, #0]
 8006cb6:	f015 0510 	ands.w	r5, r5, #16
 8006cba:	d159      	bne.n	8006d70 <_scanf_float+0x418>
 8006cbc:	7035      	strb	r5, [r6, #0]
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc8:	d11c      	bne.n	8006d04 <_scanf_float+0x3ac>
 8006cca:	9b01      	ldr	r3, [sp, #4]
 8006ccc:	454b      	cmp	r3, r9
 8006cce:	eba3 0209 	sub.w	r2, r3, r9
 8006cd2:	d124      	bne.n	8006d1e <_scanf_float+0x3c6>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4659      	mov	r1, fp
 8006cd8:	4640      	mov	r0, r8
 8006cda:	f000 fe89 	bl	80079f0 <_strtod_r>
 8006cde:	f8d4 c000 	ldr.w	ip, [r4]
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	f01c 0f02 	tst.w	ip, #2
 8006ce8:	4606      	mov	r6, r0
 8006cea:	460f      	mov	r7, r1
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	d021      	beq.n	8006d34 <_scanf_float+0x3dc>
 8006cf0:	9903      	ldr	r1, [sp, #12]
 8006cf2:	1d1a      	adds	r2, r3, #4
 8006cf4:	600a      	str	r2, [r1, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	e9c3 6700 	strd	r6, r7, [r3]
 8006cfc:	68e3      	ldr	r3, [r4, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60e3      	str	r3, [r4, #12]
 8006d02:	e66c      	b.n	80069de <_scanf_float+0x86>
 8006d04:	9b04      	ldr	r3, [sp, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0e4      	beq.n	8006cd4 <_scanf_float+0x37c>
 8006d0a:	9905      	ldr	r1, [sp, #20]
 8006d0c:	230a      	movs	r3, #10
 8006d0e:	462a      	mov	r2, r5
 8006d10:	4640      	mov	r0, r8
 8006d12:	3101      	adds	r1, #1
 8006d14:	f000 fef8 	bl	8007b08 <_strtol_r>
 8006d18:	9b04      	ldr	r3, [sp, #16]
 8006d1a:	9e05      	ldr	r6, [sp, #20]
 8006d1c:	1ac2      	subs	r2, r0, r3
 8006d1e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d22:	429e      	cmp	r6, r3
 8006d24:	bf28      	it	cs
 8006d26:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	4911      	ldr	r1, [pc, #68]	; (8006d74 <_scanf_float+0x41c>)
 8006d2e:	f000 f829 	bl	8006d84 <siprintf>
 8006d32:	e7cf      	b.n	8006cd4 <_scanf_float+0x37c>
 8006d34:	f01c 0f04 	tst.w	ip, #4
 8006d38:	f103 0e04 	add.w	lr, r3, #4
 8006d3c:	d003      	beq.n	8006d46 <_scanf_float+0x3ee>
 8006d3e:	9903      	ldr	r1, [sp, #12]
 8006d40:	f8c1 e000 	str.w	lr, [r1]
 8006d44:	e7d7      	b.n	8006cf6 <_scanf_float+0x39e>
 8006d46:	9a03      	ldr	r2, [sp, #12]
 8006d48:	f8c2 e000 	str.w	lr, [r2]
 8006d4c:	f8d3 8000 	ldr.w	r8, [r3]
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	f7f9 fe5a 	bl	8000a0c <__aeabi_dcmpun>
 8006d58:	b128      	cbz	r0, 8006d66 <_scanf_float+0x40e>
 8006d5a:	4807      	ldr	r0, [pc, #28]	; (8006d78 <_scanf_float+0x420>)
 8006d5c:	f000 f80e 	bl	8006d7c <nanf>
 8006d60:	f8c8 0000 	str.w	r0, [r8]
 8006d64:	e7ca      	b.n	8006cfc <_scanf_float+0x3a4>
 8006d66:	4630      	mov	r0, r6
 8006d68:	4639      	mov	r1, r7
 8006d6a:	f7f9 fead 	bl	8000ac8 <__aeabi_d2f>
 8006d6e:	e7f7      	b.n	8006d60 <_scanf_float+0x408>
 8006d70:	2500      	movs	r5, #0
 8006d72:	e634      	b.n	80069de <_scanf_float+0x86>
 8006d74:	0800a938 	.word	0x0800a938
 8006d78:	0800ad50 	.word	0x0800ad50

08006d7c <nanf>:
 8006d7c:	4800      	ldr	r0, [pc, #0]	; (8006d80 <nanf+0x4>)
 8006d7e:	4770      	bx	lr
 8006d80:	7fc00000 	.word	0x7fc00000

08006d84 <siprintf>:
 8006d84:	b40e      	push	{r1, r2, r3}
 8006d86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d8a:	b500      	push	{lr}
 8006d8c:	b09c      	sub	sp, #112	; 0x70
 8006d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006d90:	9002      	str	r0, [sp, #8]
 8006d92:	9006      	str	r0, [sp, #24]
 8006d94:	9107      	str	r1, [sp, #28]
 8006d96:	9104      	str	r1, [sp, #16]
 8006d98:	4808      	ldr	r0, [pc, #32]	; (8006dbc <siprintf+0x38>)
 8006d9a:	4909      	ldr	r1, [pc, #36]	; (8006dc0 <siprintf+0x3c>)
 8006d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da0:	9105      	str	r1, [sp, #20]
 8006da2:	6800      	ldr	r0, [r0, #0]
 8006da4:	a902      	add	r1, sp, #8
 8006da6:	9301      	str	r3, [sp, #4]
 8006da8:	f002 fea0 	bl	8009aec <_svfiprintf_r>
 8006dac:	2200      	movs	r2, #0
 8006dae:	9b02      	ldr	r3, [sp, #8]
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	b01c      	add	sp, #112	; 0x70
 8006db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db8:	b003      	add	sp, #12
 8006dba:	4770      	bx	lr
 8006dbc:	2000000c 	.word	0x2000000c
 8006dc0:	ffff0208 	.word	0xffff0208

08006dc4 <sulp>:
 8006dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc8:	460f      	mov	r7, r1
 8006dca:	4690      	mov	r8, r2
 8006dcc:	f002 fc36 	bl	800963c <__ulp>
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	460d      	mov	r5, r1
 8006dd4:	f1b8 0f00 	cmp.w	r8, #0
 8006dd8:	d011      	beq.n	8006dfe <sulp+0x3a>
 8006dda:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006dde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dd0b      	ble.n	8006dfe <sulp+0x3a>
 8006de6:	2400      	movs	r4, #0
 8006de8:	051b      	lsls	r3, r3, #20
 8006dea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006dee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006df2:	4622      	mov	r2, r4
 8006df4:	462b      	mov	r3, r5
 8006df6:	f7f9 fb6f 	bl	80004d8 <__aeabi_dmul>
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	460d      	mov	r5, r1
 8006dfe:	4620      	mov	r0, r4
 8006e00:	4629      	mov	r1, r5
 8006e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006e08 <_strtod_l>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	469b      	mov	fp, r3
 8006e0e:	2300      	movs	r3, #0
 8006e10:	b0a1      	sub	sp, #132	; 0x84
 8006e12:	931c      	str	r3, [sp, #112]	; 0x70
 8006e14:	4ba1      	ldr	r3, [pc, #644]	; (800709c <_strtod_l+0x294>)
 8006e16:	4682      	mov	sl, r0
 8006e18:	681f      	ldr	r7, [r3, #0]
 8006e1a:	460e      	mov	r6, r1
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e20:	f7f9 f996 	bl	8000150 <strlen>
 8006e24:	f04f 0800 	mov.w	r8, #0
 8006e28:	4604      	mov	r4, r0
 8006e2a:	f04f 0900 	mov.w	r9, #0
 8006e2e:	961b      	str	r6, [sp, #108]	; 0x6c
 8006e30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	2a2b      	cmp	r2, #43	; 0x2b
 8006e36:	d04c      	beq.n	8006ed2 <_strtod_l+0xca>
 8006e38:	d83a      	bhi.n	8006eb0 <_strtod_l+0xa8>
 8006e3a:	2a0d      	cmp	r2, #13
 8006e3c:	d833      	bhi.n	8006ea6 <_strtod_l+0x9e>
 8006e3e:	2a08      	cmp	r2, #8
 8006e40:	d833      	bhi.n	8006eaa <_strtod_l+0xa2>
 8006e42:	2a00      	cmp	r2, #0
 8006e44:	d03d      	beq.n	8006ec2 <_strtod_l+0xba>
 8006e46:	2300      	movs	r3, #0
 8006e48:	930c      	str	r3, [sp, #48]	; 0x30
 8006e4a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006e4c:	782b      	ldrb	r3, [r5, #0]
 8006e4e:	2b30      	cmp	r3, #48	; 0x30
 8006e50:	f040 80af 	bne.w	8006fb2 <_strtod_l+0x1aa>
 8006e54:	786b      	ldrb	r3, [r5, #1]
 8006e56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e5a:	2b58      	cmp	r3, #88	; 0x58
 8006e5c:	d16c      	bne.n	8006f38 <_strtod_l+0x130>
 8006e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e60:	4650      	mov	r0, sl
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	ab1c      	add	r3, sp, #112	; 0x70
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	4a8d      	ldr	r2, [pc, #564]	; (80070a0 <_strtod_l+0x298>)
 8006e6a:	f8cd b008 	str.w	fp, [sp, #8]
 8006e6e:	ab1d      	add	r3, sp, #116	; 0x74
 8006e70:	a91b      	add	r1, sp, #108	; 0x6c
 8006e72:	f001 fd3b 	bl	80088ec <__gethex>
 8006e76:	f010 0607 	ands.w	r6, r0, #7
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	d005      	beq.n	8006e8a <_strtod_l+0x82>
 8006e7e:	2e06      	cmp	r6, #6
 8006e80:	d129      	bne.n	8006ed6 <_strtod_l+0xce>
 8006e82:	2300      	movs	r3, #0
 8006e84:	3501      	adds	r5, #1
 8006e86:	951b      	str	r5, [sp, #108]	; 0x6c
 8006e88:	930c      	str	r3, [sp, #48]	; 0x30
 8006e8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f040 8596 	bne.w	80079be <_strtod_l+0xbb6>
 8006e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e94:	b1d3      	cbz	r3, 8006ecc <_strtod_l+0xc4>
 8006e96:	4642      	mov	r2, r8
 8006e98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	b021      	add	sp, #132	; 0x84
 8006ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea6:	2a20      	cmp	r2, #32
 8006ea8:	d1cd      	bne.n	8006e46 <_strtod_l+0x3e>
 8006eaa:	3301      	adds	r3, #1
 8006eac:	931b      	str	r3, [sp, #108]	; 0x6c
 8006eae:	e7bf      	b.n	8006e30 <_strtod_l+0x28>
 8006eb0:	2a2d      	cmp	r2, #45	; 0x2d
 8006eb2:	d1c8      	bne.n	8006e46 <_strtod_l+0x3e>
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	920c      	str	r2, [sp, #48]	; 0x30
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1c3      	bne.n	8006e4a <_strtod_l+0x42>
 8006ec2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ec4:	961b      	str	r6, [sp, #108]	; 0x6c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f040 8577 	bne.w	80079ba <_strtod_l+0xbb2>
 8006ecc:	4642      	mov	r2, r8
 8006ece:	464b      	mov	r3, r9
 8006ed0:	e7e4      	b.n	8006e9c <_strtod_l+0x94>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	e7ef      	b.n	8006eb6 <_strtod_l+0xae>
 8006ed6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006ed8:	b13a      	cbz	r2, 8006eea <_strtod_l+0xe2>
 8006eda:	2135      	movs	r1, #53	; 0x35
 8006edc:	a81e      	add	r0, sp, #120	; 0x78
 8006ede:	f002 fcb1 	bl	8009844 <__copybits>
 8006ee2:	4650      	mov	r0, sl
 8006ee4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ee6:	f002 f879 	bl	8008fdc <_Bfree>
 8006eea:	3e01      	subs	r6, #1
 8006eec:	2e05      	cmp	r6, #5
 8006eee:	d807      	bhi.n	8006f00 <_strtod_l+0xf8>
 8006ef0:	e8df f006 	tbb	[pc, r6]
 8006ef4:	1d180b0e 	.word	0x1d180b0e
 8006ef8:	030e      	.short	0x030e
 8006efa:	f04f 0900 	mov.w	r9, #0
 8006efe:	46c8      	mov	r8, r9
 8006f00:	0721      	lsls	r1, r4, #28
 8006f02:	d5c2      	bpl.n	8006e8a <_strtod_l+0x82>
 8006f04:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006f08:	e7bf      	b.n	8006e8a <_strtod_l+0x82>
 8006f0a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8006f0e:	e7f7      	b.n	8006f00 <_strtod_l+0xf8>
 8006f10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006f12:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8006f16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f1e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006f22:	e7ed      	b.n	8006f00 <_strtod_l+0xf8>
 8006f24:	f04f 0800 	mov.w	r8, #0
 8006f28:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80070a4 <_strtod_l+0x29c>
 8006f2c:	e7e8      	b.n	8006f00 <_strtod_l+0xf8>
 8006f2e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006f32:	f04f 38ff 	mov.w	r8, #4294967295
 8006f36:	e7e3      	b.n	8006f00 <_strtod_l+0xf8>
 8006f38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	921b      	str	r2, [sp, #108]	; 0x6c
 8006f3e:	785b      	ldrb	r3, [r3, #1]
 8006f40:	2b30      	cmp	r3, #48	; 0x30
 8006f42:	d0f9      	beq.n	8006f38 <_strtod_l+0x130>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0a0      	beq.n	8006e8a <_strtod_l+0x82>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	9307      	str	r3, [sp, #28]
 8006f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f4e:	220a      	movs	r2, #10
 8006f50:	9308      	str	r3, [sp, #32]
 8006f52:	2300      	movs	r3, #0
 8006f54:	469b      	mov	fp, r3
 8006f56:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006f5a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006f5c:	7805      	ldrb	r5, [r0, #0]
 8006f5e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006f62:	b2d9      	uxtb	r1, r3
 8006f64:	2909      	cmp	r1, #9
 8006f66:	d926      	bls.n	8006fb6 <_strtod_l+0x1ae>
 8006f68:	4622      	mov	r2, r4
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	f002 fed4 	bl	8009d18 <strncmp>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d032      	beq.n	8006fda <_strtod_l+0x1d2>
 8006f74:	2000      	movs	r0, #0
 8006f76:	462b      	mov	r3, r5
 8006f78:	465c      	mov	r4, fp
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	9004      	str	r0, [sp, #16]
 8006f7e:	2b65      	cmp	r3, #101	; 0x65
 8006f80:	d001      	beq.n	8006f86 <_strtod_l+0x17e>
 8006f82:	2b45      	cmp	r3, #69	; 0x45
 8006f84:	d113      	bne.n	8006fae <_strtod_l+0x1a6>
 8006f86:	b91c      	cbnz	r4, 8006f90 <_strtod_l+0x188>
 8006f88:	9b07      	ldr	r3, [sp, #28]
 8006f8a:	4303      	orrs	r3, r0
 8006f8c:	d099      	beq.n	8006ec2 <_strtod_l+0xba>
 8006f8e:	2400      	movs	r4, #0
 8006f90:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006f92:	1c73      	adds	r3, r6, #1
 8006f94:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f96:	7873      	ldrb	r3, [r6, #1]
 8006f98:	2b2b      	cmp	r3, #43	; 0x2b
 8006f9a:	d078      	beq.n	800708e <_strtod_l+0x286>
 8006f9c:	2b2d      	cmp	r3, #45	; 0x2d
 8006f9e:	d07b      	beq.n	8007098 <_strtod_l+0x290>
 8006fa0:	2700      	movs	r7, #0
 8006fa2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006fa6:	2909      	cmp	r1, #9
 8006fa8:	f240 8082 	bls.w	80070b0 <_strtod_l+0x2a8>
 8006fac:	961b      	str	r6, [sp, #108]	; 0x6c
 8006fae:	2500      	movs	r5, #0
 8006fb0:	e09e      	b.n	80070f0 <_strtod_l+0x2e8>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e7c9      	b.n	8006f4a <_strtod_l+0x142>
 8006fb6:	f1bb 0f08 	cmp.w	fp, #8
 8006fba:	bfd5      	itete	le
 8006fbc:	9906      	ldrle	r1, [sp, #24]
 8006fbe:	9905      	ldrgt	r1, [sp, #20]
 8006fc0:	fb02 3301 	mlale	r3, r2, r1, r3
 8006fc4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006fc8:	f100 0001 	add.w	r0, r0, #1
 8006fcc:	bfd4      	ite	le
 8006fce:	9306      	strle	r3, [sp, #24]
 8006fd0:	9305      	strgt	r3, [sp, #20]
 8006fd2:	f10b 0b01 	add.w	fp, fp, #1
 8006fd6:	901b      	str	r0, [sp, #108]	; 0x6c
 8006fd8:	e7bf      	b.n	8006f5a <_strtod_l+0x152>
 8006fda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fdc:	191a      	adds	r2, r3, r4
 8006fde:	921b      	str	r2, [sp, #108]	; 0x6c
 8006fe0:	5d1b      	ldrb	r3, [r3, r4]
 8006fe2:	f1bb 0f00 	cmp.w	fp, #0
 8006fe6:	d036      	beq.n	8007056 <_strtod_l+0x24e>
 8006fe8:	465c      	mov	r4, fp
 8006fea:	9004      	str	r0, [sp, #16]
 8006fec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006ff0:	2a09      	cmp	r2, #9
 8006ff2:	d912      	bls.n	800701a <_strtod_l+0x212>
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	e7c2      	b.n	8006f7e <_strtod_l+0x176>
 8006ff8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	921b      	str	r2, [sp, #108]	; 0x6c
 8007000:	785b      	ldrb	r3, [r3, #1]
 8007002:	2b30      	cmp	r3, #48	; 0x30
 8007004:	d0f8      	beq.n	8006ff8 <_strtod_l+0x1f0>
 8007006:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800700a:	2a08      	cmp	r2, #8
 800700c:	f200 84dc 	bhi.w	80079c8 <_strtod_l+0xbc0>
 8007010:	9004      	str	r0, [sp, #16]
 8007012:	2000      	movs	r0, #0
 8007014:	4604      	mov	r4, r0
 8007016:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007018:	9208      	str	r2, [sp, #32]
 800701a:	3b30      	subs	r3, #48	; 0x30
 800701c:	f100 0201 	add.w	r2, r0, #1
 8007020:	d013      	beq.n	800704a <_strtod_l+0x242>
 8007022:	9904      	ldr	r1, [sp, #16]
 8007024:	1905      	adds	r5, r0, r4
 8007026:	4411      	add	r1, r2
 8007028:	9104      	str	r1, [sp, #16]
 800702a:	4622      	mov	r2, r4
 800702c:	210a      	movs	r1, #10
 800702e:	42aa      	cmp	r2, r5
 8007030:	d113      	bne.n	800705a <_strtod_l+0x252>
 8007032:	1822      	adds	r2, r4, r0
 8007034:	2a08      	cmp	r2, #8
 8007036:	f104 0401 	add.w	r4, r4, #1
 800703a:	4404      	add	r4, r0
 800703c:	dc1b      	bgt.n	8007076 <_strtod_l+0x26e>
 800703e:	220a      	movs	r2, #10
 8007040:	9906      	ldr	r1, [sp, #24]
 8007042:	fb02 3301 	mla	r3, r2, r1, r3
 8007046:	9306      	str	r3, [sp, #24]
 8007048:	2200      	movs	r2, #0
 800704a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800704c:	4610      	mov	r0, r2
 800704e:	1c59      	adds	r1, r3, #1
 8007050:	911b      	str	r1, [sp, #108]	; 0x6c
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	e7ca      	b.n	8006fec <_strtod_l+0x1e4>
 8007056:	4658      	mov	r0, fp
 8007058:	e7d3      	b.n	8007002 <_strtod_l+0x1fa>
 800705a:	2a08      	cmp	r2, #8
 800705c:	dc04      	bgt.n	8007068 <_strtod_l+0x260>
 800705e:	9f06      	ldr	r7, [sp, #24]
 8007060:	434f      	muls	r7, r1
 8007062:	9706      	str	r7, [sp, #24]
 8007064:	3201      	adds	r2, #1
 8007066:	e7e2      	b.n	800702e <_strtod_l+0x226>
 8007068:	1c57      	adds	r7, r2, #1
 800706a:	2f10      	cmp	r7, #16
 800706c:	bfde      	ittt	le
 800706e:	9f05      	ldrle	r7, [sp, #20]
 8007070:	434f      	mulle	r7, r1
 8007072:	9705      	strle	r7, [sp, #20]
 8007074:	e7f6      	b.n	8007064 <_strtod_l+0x25c>
 8007076:	2c10      	cmp	r4, #16
 8007078:	bfdf      	itttt	le
 800707a:	220a      	movle	r2, #10
 800707c:	9905      	ldrle	r1, [sp, #20]
 800707e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007082:	9305      	strle	r3, [sp, #20]
 8007084:	e7e0      	b.n	8007048 <_strtod_l+0x240>
 8007086:	2300      	movs	r3, #0
 8007088:	2201      	movs	r2, #1
 800708a:	9304      	str	r3, [sp, #16]
 800708c:	e77c      	b.n	8006f88 <_strtod_l+0x180>
 800708e:	2700      	movs	r7, #0
 8007090:	1cb3      	adds	r3, r6, #2
 8007092:	931b      	str	r3, [sp, #108]	; 0x6c
 8007094:	78b3      	ldrb	r3, [r6, #2]
 8007096:	e784      	b.n	8006fa2 <_strtod_l+0x19a>
 8007098:	2701      	movs	r7, #1
 800709a:	e7f9      	b.n	8007090 <_strtod_l+0x288>
 800709c:	0800ab90 	.word	0x0800ab90
 80070a0:	0800a940 	.word	0x0800a940
 80070a4:	7ff00000 	.word	0x7ff00000
 80070a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070aa:	1c59      	adds	r1, r3, #1
 80070ac:	911b      	str	r1, [sp, #108]	; 0x6c
 80070ae:	785b      	ldrb	r3, [r3, #1]
 80070b0:	2b30      	cmp	r3, #48	; 0x30
 80070b2:	d0f9      	beq.n	80070a8 <_strtod_l+0x2a0>
 80070b4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80070b8:	2908      	cmp	r1, #8
 80070ba:	f63f af78 	bhi.w	8006fae <_strtod_l+0x1a6>
 80070be:	f04f 0e0a 	mov.w	lr, #10
 80070c2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80070c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070c8:	9309      	str	r3, [sp, #36]	; 0x24
 80070ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070cc:	1c59      	adds	r1, r3, #1
 80070ce:	911b      	str	r1, [sp, #108]	; 0x6c
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80070d6:	2d09      	cmp	r5, #9
 80070d8:	d935      	bls.n	8007146 <_strtod_l+0x33e>
 80070da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80070dc:	1b49      	subs	r1, r1, r5
 80070de:	2908      	cmp	r1, #8
 80070e0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80070e4:	dc02      	bgt.n	80070ec <_strtod_l+0x2e4>
 80070e6:	4565      	cmp	r5, ip
 80070e8:	bfa8      	it	ge
 80070ea:	4665      	movge	r5, ip
 80070ec:	b107      	cbz	r7, 80070f0 <_strtod_l+0x2e8>
 80070ee:	426d      	negs	r5, r5
 80070f0:	2c00      	cmp	r4, #0
 80070f2:	d14c      	bne.n	800718e <_strtod_l+0x386>
 80070f4:	9907      	ldr	r1, [sp, #28]
 80070f6:	4301      	orrs	r1, r0
 80070f8:	f47f aec7 	bne.w	8006e8a <_strtod_l+0x82>
 80070fc:	2a00      	cmp	r2, #0
 80070fe:	f47f aee0 	bne.w	8006ec2 <_strtod_l+0xba>
 8007102:	2b69      	cmp	r3, #105	; 0x69
 8007104:	d026      	beq.n	8007154 <_strtod_l+0x34c>
 8007106:	dc23      	bgt.n	8007150 <_strtod_l+0x348>
 8007108:	2b49      	cmp	r3, #73	; 0x49
 800710a:	d023      	beq.n	8007154 <_strtod_l+0x34c>
 800710c:	2b4e      	cmp	r3, #78	; 0x4e
 800710e:	f47f aed8 	bne.w	8006ec2 <_strtod_l+0xba>
 8007112:	499c      	ldr	r1, [pc, #624]	; (8007384 <_strtod_l+0x57c>)
 8007114:	a81b      	add	r0, sp, #108	; 0x6c
 8007116:	f001 fe37 	bl	8008d88 <__match>
 800711a:	2800      	cmp	r0, #0
 800711c:	f43f aed1 	beq.w	8006ec2 <_strtod_l+0xba>
 8007120:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b28      	cmp	r3, #40	; 0x28
 8007126:	d12c      	bne.n	8007182 <_strtod_l+0x37a>
 8007128:	4997      	ldr	r1, [pc, #604]	; (8007388 <_strtod_l+0x580>)
 800712a:	aa1e      	add	r2, sp, #120	; 0x78
 800712c:	a81b      	add	r0, sp, #108	; 0x6c
 800712e:	f001 fe3f 	bl	8008db0 <__hexnan>
 8007132:	2805      	cmp	r0, #5
 8007134:	d125      	bne.n	8007182 <_strtod_l+0x37a>
 8007136:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007138:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800713c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007140:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007144:	e6a1      	b.n	8006e8a <_strtod_l+0x82>
 8007146:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800714a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800714e:	e7bc      	b.n	80070ca <_strtod_l+0x2c2>
 8007150:	2b6e      	cmp	r3, #110	; 0x6e
 8007152:	e7dc      	b.n	800710e <_strtod_l+0x306>
 8007154:	498d      	ldr	r1, [pc, #564]	; (800738c <_strtod_l+0x584>)
 8007156:	a81b      	add	r0, sp, #108	; 0x6c
 8007158:	f001 fe16 	bl	8008d88 <__match>
 800715c:	2800      	cmp	r0, #0
 800715e:	f43f aeb0 	beq.w	8006ec2 <_strtod_l+0xba>
 8007162:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007164:	498a      	ldr	r1, [pc, #552]	; (8007390 <_strtod_l+0x588>)
 8007166:	3b01      	subs	r3, #1
 8007168:	a81b      	add	r0, sp, #108	; 0x6c
 800716a:	931b      	str	r3, [sp, #108]	; 0x6c
 800716c:	f001 fe0c 	bl	8008d88 <__match>
 8007170:	b910      	cbnz	r0, 8007178 <_strtod_l+0x370>
 8007172:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007174:	3301      	adds	r3, #1
 8007176:	931b      	str	r3, [sp, #108]	; 0x6c
 8007178:	f04f 0800 	mov.w	r8, #0
 800717c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80073a0 <_strtod_l+0x598>
 8007180:	e683      	b.n	8006e8a <_strtod_l+0x82>
 8007182:	4884      	ldr	r0, [pc, #528]	; (8007394 <_strtod_l+0x58c>)
 8007184:	f002 fdb2 	bl	8009cec <nan>
 8007188:	4680      	mov	r8, r0
 800718a:	4689      	mov	r9, r1
 800718c:	e67d      	b.n	8006e8a <_strtod_l+0x82>
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	f1bb 0f00 	cmp.w	fp, #0
 8007194:	bf08      	it	eq
 8007196:	46a3      	moveq	fp, r4
 8007198:	1aeb      	subs	r3, r5, r3
 800719a:	2c10      	cmp	r4, #16
 800719c:	9806      	ldr	r0, [sp, #24]
 800719e:	4626      	mov	r6, r4
 80071a0:	9307      	str	r3, [sp, #28]
 80071a2:	bfa8      	it	ge
 80071a4:	2610      	movge	r6, #16
 80071a6:	f7f9 f91d 	bl	80003e4 <__aeabi_ui2d>
 80071aa:	2c09      	cmp	r4, #9
 80071ac:	4680      	mov	r8, r0
 80071ae:	4689      	mov	r9, r1
 80071b0:	dd13      	ble.n	80071da <_strtod_l+0x3d2>
 80071b2:	4b79      	ldr	r3, [pc, #484]	; (8007398 <_strtod_l+0x590>)
 80071b4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80071b8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80071bc:	f7f9 f98c 	bl	80004d8 <__aeabi_dmul>
 80071c0:	4680      	mov	r8, r0
 80071c2:	9805      	ldr	r0, [sp, #20]
 80071c4:	4689      	mov	r9, r1
 80071c6:	f7f9 f90d 	bl	80003e4 <__aeabi_ui2d>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4640      	mov	r0, r8
 80071d0:	4649      	mov	r1, r9
 80071d2:	f7f8 ffcb 	bl	800016c <__adddf3>
 80071d6:	4680      	mov	r8, r0
 80071d8:	4689      	mov	r9, r1
 80071da:	2c0f      	cmp	r4, #15
 80071dc:	dc36      	bgt.n	800724c <_strtod_l+0x444>
 80071de:	9b07      	ldr	r3, [sp, #28]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f43f ae52 	beq.w	8006e8a <_strtod_l+0x82>
 80071e6:	dd22      	ble.n	800722e <_strtod_l+0x426>
 80071e8:	2b16      	cmp	r3, #22
 80071ea:	dc09      	bgt.n	8007200 <_strtod_l+0x3f8>
 80071ec:	4c6a      	ldr	r4, [pc, #424]	; (8007398 <_strtod_l+0x590>)
 80071ee:	4642      	mov	r2, r8
 80071f0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80071f4:	464b      	mov	r3, r9
 80071f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80071fa:	f7f9 f96d 	bl	80004d8 <__aeabi_dmul>
 80071fe:	e7c3      	b.n	8007188 <_strtod_l+0x380>
 8007200:	9a07      	ldr	r2, [sp, #28]
 8007202:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007206:	4293      	cmp	r3, r2
 8007208:	db20      	blt.n	800724c <_strtod_l+0x444>
 800720a:	4d63      	ldr	r5, [pc, #396]	; (8007398 <_strtod_l+0x590>)
 800720c:	f1c4 040f 	rsb	r4, r4, #15
 8007210:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007214:	4642      	mov	r2, r8
 8007216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800721a:	464b      	mov	r3, r9
 800721c:	f7f9 f95c 	bl	80004d8 <__aeabi_dmul>
 8007220:	9b07      	ldr	r3, [sp, #28]
 8007222:	1b1c      	subs	r4, r3, r4
 8007224:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007228:	e9d5 2300 	ldrd	r2, r3, [r5]
 800722c:	e7e5      	b.n	80071fa <_strtod_l+0x3f2>
 800722e:	9b07      	ldr	r3, [sp, #28]
 8007230:	3316      	adds	r3, #22
 8007232:	db0b      	blt.n	800724c <_strtod_l+0x444>
 8007234:	9b04      	ldr	r3, [sp, #16]
 8007236:	4a58      	ldr	r2, [pc, #352]	; (8007398 <_strtod_l+0x590>)
 8007238:	1b5d      	subs	r5, r3, r5
 800723a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800723e:	4640      	mov	r0, r8
 8007240:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007244:	4649      	mov	r1, r9
 8007246:	f7f9 fa71 	bl	800072c <__aeabi_ddiv>
 800724a:	e79d      	b.n	8007188 <_strtod_l+0x380>
 800724c:	9b07      	ldr	r3, [sp, #28]
 800724e:	1ba6      	subs	r6, r4, r6
 8007250:	441e      	add	r6, r3
 8007252:	2e00      	cmp	r6, #0
 8007254:	dd71      	ble.n	800733a <_strtod_l+0x532>
 8007256:	f016 030f 	ands.w	r3, r6, #15
 800725a:	d00a      	beq.n	8007272 <_strtod_l+0x46a>
 800725c:	494e      	ldr	r1, [pc, #312]	; (8007398 <_strtod_l+0x590>)
 800725e:	4642      	mov	r2, r8
 8007260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007268:	464b      	mov	r3, r9
 800726a:	f7f9 f935 	bl	80004d8 <__aeabi_dmul>
 800726e:	4680      	mov	r8, r0
 8007270:	4689      	mov	r9, r1
 8007272:	f036 060f 	bics.w	r6, r6, #15
 8007276:	d050      	beq.n	800731a <_strtod_l+0x512>
 8007278:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800727c:	dd27      	ble.n	80072ce <_strtod_l+0x4c6>
 800727e:	f04f 0b00 	mov.w	fp, #0
 8007282:	f8cd b010 	str.w	fp, [sp, #16]
 8007286:	f8cd b020 	str.w	fp, [sp, #32]
 800728a:	f8cd b018 	str.w	fp, [sp, #24]
 800728e:	2322      	movs	r3, #34	; 0x22
 8007290:	f04f 0800 	mov.w	r8, #0
 8007294:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80073a0 <_strtod_l+0x598>
 8007298:	f8ca 3000 	str.w	r3, [sl]
 800729c:	9b08      	ldr	r3, [sp, #32]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f43f adf3 	beq.w	8006e8a <_strtod_l+0x82>
 80072a4:	4650      	mov	r0, sl
 80072a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80072a8:	f001 fe98 	bl	8008fdc <_Bfree>
 80072ac:	4650      	mov	r0, sl
 80072ae:	9906      	ldr	r1, [sp, #24]
 80072b0:	f001 fe94 	bl	8008fdc <_Bfree>
 80072b4:	4650      	mov	r0, sl
 80072b6:	9904      	ldr	r1, [sp, #16]
 80072b8:	f001 fe90 	bl	8008fdc <_Bfree>
 80072bc:	4650      	mov	r0, sl
 80072be:	9908      	ldr	r1, [sp, #32]
 80072c0:	f001 fe8c 	bl	8008fdc <_Bfree>
 80072c4:	4659      	mov	r1, fp
 80072c6:	4650      	mov	r0, sl
 80072c8:	f001 fe88 	bl	8008fdc <_Bfree>
 80072cc:	e5dd      	b.n	8006e8a <_strtod_l+0x82>
 80072ce:	2300      	movs	r3, #0
 80072d0:	4640      	mov	r0, r8
 80072d2:	4649      	mov	r1, r9
 80072d4:	461f      	mov	r7, r3
 80072d6:	1136      	asrs	r6, r6, #4
 80072d8:	2e01      	cmp	r6, #1
 80072da:	dc21      	bgt.n	8007320 <_strtod_l+0x518>
 80072dc:	b10b      	cbz	r3, 80072e2 <_strtod_l+0x4da>
 80072de:	4680      	mov	r8, r0
 80072e0:	4689      	mov	r9, r1
 80072e2:	4b2e      	ldr	r3, [pc, #184]	; (800739c <_strtod_l+0x594>)
 80072e4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80072e8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80072ec:	4642      	mov	r2, r8
 80072ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072f2:	464b      	mov	r3, r9
 80072f4:	f7f9 f8f0 	bl	80004d8 <__aeabi_dmul>
 80072f8:	4b29      	ldr	r3, [pc, #164]	; (80073a0 <_strtod_l+0x598>)
 80072fa:	460a      	mov	r2, r1
 80072fc:	400b      	ands	r3, r1
 80072fe:	4929      	ldr	r1, [pc, #164]	; (80073a4 <_strtod_l+0x59c>)
 8007300:	4680      	mov	r8, r0
 8007302:	428b      	cmp	r3, r1
 8007304:	d8bb      	bhi.n	800727e <_strtod_l+0x476>
 8007306:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800730a:	428b      	cmp	r3, r1
 800730c:	bf86      	itte	hi
 800730e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007312:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80073a8 <_strtod_l+0x5a0>
 8007316:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800731a:	2300      	movs	r3, #0
 800731c:	9305      	str	r3, [sp, #20]
 800731e:	e07e      	b.n	800741e <_strtod_l+0x616>
 8007320:	07f2      	lsls	r2, r6, #31
 8007322:	d507      	bpl.n	8007334 <_strtod_l+0x52c>
 8007324:	4b1d      	ldr	r3, [pc, #116]	; (800739c <_strtod_l+0x594>)
 8007326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f7f9 f8d3 	bl	80004d8 <__aeabi_dmul>
 8007332:	2301      	movs	r3, #1
 8007334:	3701      	adds	r7, #1
 8007336:	1076      	asrs	r6, r6, #1
 8007338:	e7ce      	b.n	80072d8 <_strtod_l+0x4d0>
 800733a:	d0ee      	beq.n	800731a <_strtod_l+0x512>
 800733c:	4276      	negs	r6, r6
 800733e:	f016 020f 	ands.w	r2, r6, #15
 8007342:	d00a      	beq.n	800735a <_strtod_l+0x552>
 8007344:	4b14      	ldr	r3, [pc, #80]	; (8007398 <_strtod_l+0x590>)
 8007346:	4640      	mov	r0, r8
 8007348:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800734c:	4649      	mov	r1, r9
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f7f9 f9eb 	bl	800072c <__aeabi_ddiv>
 8007356:	4680      	mov	r8, r0
 8007358:	4689      	mov	r9, r1
 800735a:	1136      	asrs	r6, r6, #4
 800735c:	d0dd      	beq.n	800731a <_strtod_l+0x512>
 800735e:	2e1f      	cmp	r6, #31
 8007360:	dd24      	ble.n	80073ac <_strtod_l+0x5a4>
 8007362:	f04f 0b00 	mov.w	fp, #0
 8007366:	f8cd b010 	str.w	fp, [sp, #16]
 800736a:	f8cd b020 	str.w	fp, [sp, #32]
 800736e:	f8cd b018 	str.w	fp, [sp, #24]
 8007372:	2322      	movs	r3, #34	; 0x22
 8007374:	f04f 0800 	mov.w	r8, #0
 8007378:	f04f 0900 	mov.w	r9, #0
 800737c:	f8ca 3000 	str.w	r3, [sl]
 8007380:	e78c      	b.n	800729c <_strtod_l+0x494>
 8007382:	bf00      	nop
 8007384:	0800a911 	.word	0x0800a911
 8007388:	0800a954 	.word	0x0800a954
 800738c:	0800a909 	.word	0x0800a909
 8007390:	0800aa94 	.word	0x0800aa94
 8007394:	0800ad50 	.word	0x0800ad50
 8007398:	0800ac30 	.word	0x0800ac30
 800739c:	0800ac08 	.word	0x0800ac08
 80073a0:	7ff00000 	.word	0x7ff00000
 80073a4:	7ca00000 	.word	0x7ca00000
 80073a8:	7fefffff 	.word	0x7fefffff
 80073ac:	f016 0310 	ands.w	r3, r6, #16
 80073b0:	bf18      	it	ne
 80073b2:	236a      	movne	r3, #106	; 0x6a
 80073b4:	4640      	mov	r0, r8
 80073b6:	9305      	str	r3, [sp, #20]
 80073b8:	4649      	mov	r1, r9
 80073ba:	2300      	movs	r3, #0
 80073bc:	4fb2      	ldr	r7, [pc, #712]	; (8007688 <_strtod_l+0x880>)
 80073be:	07f2      	lsls	r2, r6, #31
 80073c0:	d504      	bpl.n	80073cc <_strtod_l+0x5c4>
 80073c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073c6:	f7f9 f887 	bl	80004d8 <__aeabi_dmul>
 80073ca:	2301      	movs	r3, #1
 80073cc:	1076      	asrs	r6, r6, #1
 80073ce:	f107 0708 	add.w	r7, r7, #8
 80073d2:	d1f4      	bne.n	80073be <_strtod_l+0x5b6>
 80073d4:	b10b      	cbz	r3, 80073da <_strtod_l+0x5d2>
 80073d6:	4680      	mov	r8, r0
 80073d8:	4689      	mov	r9, r1
 80073da:	9b05      	ldr	r3, [sp, #20]
 80073dc:	b1bb      	cbz	r3, 800740e <_strtod_l+0x606>
 80073de:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80073e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	4649      	mov	r1, r9
 80073ea:	dd10      	ble.n	800740e <_strtod_l+0x606>
 80073ec:	2b1f      	cmp	r3, #31
 80073ee:	f340 812b 	ble.w	8007648 <_strtod_l+0x840>
 80073f2:	2b34      	cmp	r3, #52	; 0x34
 80073f4:	bfd8      	it	le
 80073f6:	f04f 32ff 	movle.w	r2, #4294967295
 80073fa:	f04f 0800 	mov.w	r8, #0
 80073fe:	bfcf      	iteee	gt
 8007400:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007404:	3b20      	suble	r3, #32
 8007406:	fa02 f303 	lslle.w	r3, r2, r3
 800740a:	ea03 0901 	andle.w	r9, r3, r1
 800740e:	2200      	movs	r2, #0
 8007410:	2300      	movs	r3, #0
 8007412:	4640      	mov	r0, r8
 8007414:	4649      	mov	r1, r9
 8007416:	f7f9 fac7 	bl	80009a8 <__aeabi_dcmpeq>
 800741a:	2800      	cmp	r0, #0
 800741c:	d1a1      	bne.n	8007362 <_strtod_l+0x55a>
 800741e:	9b06      	ldr	r3, [sp, #24]
 8007420:	465a      	mov	r2, fp
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	4650      	mov	r0, sl
 8007426:	4623      	mov	r3, r4
 8007428:	9908      	ldr	r1, [sp, #32]
 800742a:	f001 fe43 	bl	80090b4 <__s2b>
 800742e:	9008      	str	r0, [sp, #32]
 8007430:	2800      	cmp	r0, #0
 8007432:	f43f af24 	beq.w	800727e <_strtod_l+0x476>
 8007436:	9b04      	ldr	r3, [sp, #16]
 8007438:	f04f 0b00 	mov.w	fp, #0
 800743c:	1b5d      	subs	r5, r3, r5
 800743e:	9b07      	ldr	r3, [sp, #28]
 8007440:	f8cd b010 	str.w	fp, [sp, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	bfb4      	ite	lt
 8007448:	462b      	movlt	r3, r5
 800744a:	2300      	movge	r3, #0
 800744c:	930e      	str	r3, [sp, #56]	; 0x38
 800744e:	9b07      	ldr	r3, [sp, #28]
 8007450:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007454:	9316      	str	r3, [sp, #88]	; 0x58
 8007456:	9b08      	ldr	r3, [sp, #32]
 8007458:	4650      	mov	r0, sl
 800745a:	6859      	ldr	r1, [r3, #4]
 800745c:	f001 fd7e 	bl	8008f5c <_Balloc>
 8007460:	9006      	str	r0, [sp, #24]
 8007462:	2800      	cmp	r0, #0
 8007464:	f43f af13 	beq.w	800728e <_strtod_l+0x486>
 8007468:	9b08      	ldr	r3, [sp, #32]
 800746a:	300c      	adds	r0, #12
 800746c:	691a      	ldr	r2, [r3, #16]
 800746e:	f103 010c 	add.w	r1, r3, #12
 8007472:	3202      	adds	r2, #2
 8007474:	0092      	lsls	r2, r2, #2
 8007476:	f001 fd63 	bl	8008f40 <memcpy>
 800747a:	ab1e      	add	r3, sp, #120	; 0x78
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	ab1d      	add	r3, sp, #116	; 0x74
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	4642      	mov	r2, r8
 8007484:	464b      	mov	r3, r9
 8007486:	4650      	mov	r0, sl
 8007488:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800748c:	f002 f950 	bl	8009730 <__d2b>
 8007490:	901c      	str	r0, [sp, #112]	; 0x70
 8007492:	2800      	cmp	r0, #0
 8007494:	f43f aefb 	beq.w	800728e <_strtod_l+0x486>
 8007498:	2101      	movs	r1, #1
 800749a:	4650      	mov	r0, sl
 800749c:	f001 fea2 	bl	80091e4 <__i2b>
 80074a0:	4603      	mov	r3, r0
 80074a2:	9004      	str	r0, [sp, #16]
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f43f aef2 	beq.w	800728e <_strtod_l+0x486>
 80074aa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80074ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80074ae:	2d00      	cmp	r5, #0
 80074b0:	bfab      	itete	ge
 80074b2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80074b4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80074b6:	18ee      	addge	r6, r5, r3
 80074b8:	1b5c      	sublt	r4, r3, r5
 80074ba:	9b05      	ldr	r3, [sp, #20]
 80074bc:	bfa8      	it	ge
 80074be:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80074c0:	eba5 0503 	sub.w	r5, r5, r3
 80074c4:	4415      	add	r5, r2
 80074c6:	4b71      	ldr	r3, [pc, #452]	; (800768c <_strtod_l+0x884>)
 80074c8:	f105 35ff 	add.w	r5, r5, #4294967295
 80074cc:	bfb8      	it	lt
 80074ce:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80074d0:	429d      	cmp	r5, r3
 80074d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80074d6:	f280 80c9 	bge.w	800766c <_strtod_l+0x864>
 80074da:	1b5b      	subs	r3, r3, r5
 80074dc:	2b1f      	cmp	r3, #31
 80074de:	f04f 0701 	mov.w	r7, #1
 80074e2:	eba2 0203 	sub.w	r2, r2, r3
 80074e6:	f300 80b6 	bgt.w	8007656 <_strtod_l+0x84e>
 80074ea:	2500      	movs	r5, #0
 80074ec:	fa07 f303 	lsl.w	r3, r7, r3
 80074f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80074f2:	18b7      	adds	r7, r6, r2
 80074f4:	9b05      	ldr	r3, [sp, #20]
 80074f6:	42be      	cmp	r6, r7
 80074f8:	4414      	add	r4, r2
 80074fa:	441c      	add	r4, r3
 80074fc:	4633      	mov	r3, r6
 80074fe:	bfa8      	it	ge
 8007500:	463b      	movge	r3, r7
 8007502:	42a3      	cmp	r3, r4
 8007504:	bfa8      	it	ge
 8007506:	4623      	movge	r3, r4
 8007508:	2b00      	cmp	r3, #0
 800750a:	bfc2      	ittt	gt
 800750c:	1aff      	subgt	r7, r7, r3
 800750e:	1ae4      	subgt	r4, r4, r3
 8007510:	1af6      	subgt	r6, r6, r3
 8007512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007514:	2b00      	cmp	r3, #0
 8007516:	dd17      	ble.n	8007548 <_strtod_l+0x740>
 8007518:	461a      	mov	r2, r3
 800751a:	4650      	mov	r0, sl
 800751c:	9904      	ldr	r1, [sp, #16]
 800751e:	f001 ff1b 	bl	8009358 <__pow5mult>
 8007522:	9004      	str	r0, [sp, #16]
 8007524:	2800      	cmp	r0, #0
 8007526:	f43f aeb2 	beq.w	800728e <_strtod_l+0x486>
 800752a:	4601      	mov	r1, r0
 800752c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800752e:	4650      	mov	r0, sl
 8007530:	f001 fe6e 	bl	8009210 <__multiply>
 8007534:	9009      	str	r0, [sp, #36]	; 0x24
 8007536:	2800      	cmp	r0, #0
 8007538:	f43f aea9 	beq.w	800728e <_strtod_l+0x486>
 800753c:	4650      	mov	r0, sl
 800753e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007540:	f001 fd4c 	bl	8008fdc <_Bfree>
 8007544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007546:	931c      	str	r3, [sp, #112]	; 0x70
 8007548:	2f00      	cmp	r7, #0
 800754a:	f300 8093 	bgt.w	8007674 <_strtod_l+0x86c>
 800754e:	9b07      	ldr	r3, [sp, #28]
 8007550:	2b00      	cmp	r3, #0
 8007552:	dd08      	ble.n	8007566 <_strtod_l+0x75e>
 8007554:	4650      	mov	r0, sl
 8007556:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007558:	9906      	ldr	r1, [sp, #24]
 800755a:	f001 fefd 	bl	8009358 <__pow5mult>
 800755e:	9006      	str	r0, [sp, #24]
 8007560:	2800      	cmp	r0, #0
 8007562:	f43f ae94 	beq.w	800728e <_strtod_l+0x486>
 8007566:	2c00      	cmp	r4, #0
 8007568:	dd08      	ble.n	800757c <_strtod_l+0x774>
 800756a:	4622      	mov	r2, r4
 800756c:	4650      	mov	r0, sl
 800756e:	9906      	ldr	r1, [sp, #24]
 8007570:	f001 ff4c 	bl	800940c <__lshift>
 8007574:	9006      	str	r0, [sp, #24]
 8007576:	2800      	cmp	r0, #0
 8007578:	f43f ae89 	beq.w	800728e <_strtod_l+0x486>
 800757c:	2e00      	cmp	r6, #0
 800757e:	dd08      	ble.n	8007592 <_strtod_l+0x78a>
 8007580:	4632      	mov	r2, r6
 8007582:	4650      	mov	r0, sl
 8007584:	9904      	ldr	r1, [sp, #16]
 8007586:	f001 ff41 	bl	800940c <__lshift>
 800758a:	9004      	str	r0, [sp, #16]
 800758c:	2800      	cmp	r0, #0
 800758e:	f43f ae7e 	beq.w	800728e <_strtod_l+0x486>
 8007592:	4650      	mov	r0, sl
 8007594:	9a06      	ldr	r2, [sp, #24]
 8007596:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007598:	f001 ffc0 	bl	800951c <__mdiff>
 800759c:	4683      	mov	fp, r0
 800759e:	2800      	cmp	r0, #0
 80075a0:	f43f ae75 	beq.w	800728e <_strtod_l+0x486>
 80075a4:	2400      	movs	r4, #0
 80075a6:	68c3      	ldr	r3, [r0, #12]
 80075a8:	9904      	ldr	r1, [sp, #16]
 80075aa:	60c4      	str	r4, [r0, #12]
 80075ac:	930d      	str	r3, [sp, #52]	; 0x34
 80075ae:	f001 ff99 	bl	80094e4 <__mcmp>
 80075b2:	42a0      	cmp	r0, r4
 80075b4:	da70      	bge.n	8007698 <_strtod_l+0x890>
 80075b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b8:	ea53 0308 	orrs.w	r3, r3, r8
 80075bc:	f040 8096 	bne.w	80076ec <_strtod_l+0x8e4>
 80075c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f040 8091 	bne.w	80076ec <_strtod_l+0x8e4>
 80075ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075ce:	0d1b      	lsrs	r3, r3, #20
 80075d0:	051b      	lsls	r3, r3, #20
 80075d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80075d6:	f240 8089 	bls.w	80076ec <_strtod_l+0x8e4>
 80075da:	f8db 3014 	ldr.w	r3, [fp, #20]
 80075de:	b923      	cbnz	r3, 80075ea <_strtod_l+0x7e2>
 80075e0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	f340 8081 	ble.w	80076ec <_strtod_l+0x8e4>
 80075ea:	4659      	mov	r1, fp
 80075ec:	2201      	movs	r2, #1
 80075ee:	4650      	mov	r0, sl
 80075f0:	f001 ff0c 	bl	800940c <__lshift>
 80075f4:	9904      	ldr	r1, [sp, #16]
 80075f6:	4683      	mov	fp, r0
 80075f8:	f001 ff74 	bl	80094e4 <__mcmp>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	dd75      	ble.n	80076ec <_strtod_l+0x8e4>
 8007600:	9905      	ldr	r1, [sp, #20]
 8007602:	464b      	mov	r3, r9
 8007604:	4a22      	ldr	r2, [pc, #136]	; (8007690 <_strtod_l+0x888>)
 8007606:	2900      	cmp	r1, #0
 8007608:	f000 8091 	beq.w	800772e <_strtod_l+0x926>
 800760c:	ea02 0109 	and.w	r1, r2, r9
 8007610:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007614:	f300 808b 	bgt.w	800772e <_strtod_l+0x926>
 8007618:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800761c:	f77f aea9 	ble.w	8007372 <_strtod_l+0x56a>
 8007620:	2300      	movs	r3, #0
 8007622:	4a1c      	ldr	r2, [pc, #112]	; (8007694 <_strtod_l+0x88c>)
 8007624:	4640      	mov	r0, r8
 8007626:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800762a:	4649      	mov	r1, r9
 800762c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007630:	f7f8 ff52 	bl	80004d8 <__aeabi_dmul>
 8007634:	460b      	mov	r3, r1
 8007636:	4303      	orrs	r3, r0
 8007638:	bf08      	it	eq
 800763a:	2322      	moveq	r3, #34	; 0x22
 800763c:	4680      	mov	r8, r0
 800763e:	4689      	mov	r9, r1
 8007640:	bf08      	it	eq
 8007642:	f8ca 3000 	streq.w	r3, [sl]
 8007646:	e62d      	b.n	80072a4 <_strtod_l+0x49c>
 8007648:	f04f 32ff 	mov.w	r2, #4294967295
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	ea03 0808 	and.w	r8, r3, r8
 8007654:	e6db      	b.n	800740e <_strtod_l+0x606>
 8007656:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800765a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800765e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007662:	35e2      	adds	r5, #226	; 0xe2
 8007664:	fa07 f505 	lsl.w	r5, r7, r5
 8007668:	970f      	str	r7, [sp, #60]	; 0x3c
 800766a:	e742      	b.n	80074f2 <_strtod_l+0x6ea>
 800766c:	2301      	movs	r3, #1
 800766e:	2500      	movs	r5, #0
 8007670:	930f      	str	r3, [sp, #60]	; 0x3c
 8007672:	e73e      	b.n	80074f2 <_strtod_l+0x6ea>
 8007674:	463a      	mov	r2, r7
 8007676:	4650      	mov	r0, sl
 8007678:	991c      	ldr	r1, [sp, #112]	; 0x70
 800767a:	f001 fec7 	bl	800940c <__lshift>
 800767e:	901c      	str	r0, [sp, #112]	; 0x70
 8007680:	2800      	cmp	r0, #0
 8007682:	f47f af64 	bne.w	800754e <_strtod_l+0x746>
 8007686:	e602      	b.n	800728e <_strtod_l+0x486>
 8007688:	0800a968 	.word	0x0800a968
 800768c:	fffffc02 	.word	0xfffffc02
 8007690:	7ff00000 	.word	0x7ff00000
 8007694:	39500000 	.word	0x39500000
 8007698:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800769c:	d166      	bne.n	800776c <_strtod_l+0x964>
 800769e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076a4:	b35a      	cbz	r2, 80076fe <_strtod_l+0x8f6>
 80076a6:	4a9c      	ldr	r2, [pc, #624]	; (8007918 <_strtod_l+0xb10>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d12c      	bne.n	8007706 <_strtod_l+0x8fe>
 80076ac:	9b05      	ldr	r3, [sp, #20]
 80076ae:	4640      	mov	r0, r8
 80076b0:	b303      	cbz	r3, 80076f4 <_strtod_l+0x8ec>
 80076b2:	464b      	mov	r3, r9
 80076b4:	4a99      	ldr	r2, [pc, #612]	; (800791c <_strtod_l+0xb14>)
 80076b6:	f04f 31ff 	mov.w	r1, #4294967295
 80076ba:	401a      	ands	r2, r3
 80076bc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80076c0:	d81b      	bhi.n	80076fa <_strtod_l+0x8f2>
 80076c2:	0d12      	lsrs	r2, r2, #20
 80076c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80076c8:	fa01 f303 	lsl.w	r3, r1, r3
 80076cc:	4298      	cmp	r0, r3
 80076ce:	d11a      	bne.n	8007706 <_strtod_l+0x8fe>
 80076d0:	4b93      	ldr	r3, [pc, #588]	; (8007920 <_strtod_l+0xb18>)
 80076d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d102      	bne.n	80076de <_strtod_l+0x8d6>
 80076d8:	3001      	adds	r0, #1
 80076da:	f43f add8 	beq.w	800728e <_strtod_l+0x486>
 80076de:	f04f 0800 	mov.w	r8, #0
 80076e2:	4b8e      	ldr	r3, [pc, #568]	; (800791c <_strtod_l+0xb14>)
 80076e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076e6:	401a      	ands	r2, r3
 80076e8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80076ec:	9b05      	ldr	r3, [sp, #20]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d196      	bne.n	8007620 <_strtod_l+0x818>
 80076f2:	e5d7      	b.n	80072a4 <_strtod_l+0x49c>
 80076f4:	f04f 33ff 	mov.w	r3, #4294967295
 80076f8:	e7e8      	b.n	80076cc <_strtod_l+0x8c4>
 80076fa:	460b      	mov	r3, r1
 80076fc:	e7e6      	b.n	80076cc <_strtod_l+0x8c4>
 80076fe:	ea53 0308 	orrs.w	r3, r3, r8
 8007702:	f43f af7d 	beq.w	8007600 <_strtod_l+0x7f8>
 8007706:	b1e5      	cbz	r5, 8007742 <_strtod_l+0x93a>
 8007708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770a:	421d      	tst	r5, r3
 800770c:	d0ee      	beq.n	80076ec <_strtod_l+0x8e4>
 800770e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007710:	4640      	mov	r0, r8
 8007712:	4649      	mov	r1, r9
 8007714:	9a05      	ldr	r2, [sp, #20]
 8007716:	b1c3      	cbz	r3, 800774a <_strtod_l+0x942>
 8007718:	f7ff fb54 	bl	8006dc4 <sulp>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007724:	f7f8 fd22 	bl	800016c <__adddf3>
 8007728:	4680      	mov	r8, r0
 800772a:	4689      	mov	r9, r1
 800772c:	e7de      	b.n	80076ec <_strtod_l+0x8e4>
 800772e:	4013      	ands	r3, r2
 8007730:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007734:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007738:	f04f 38ff 	mov.w	r8, #4294967295
 800773c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007740:	e7d4      	b.n	80076ec <_strtod_l+0x8e4>
 8007742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007744:	ea13 0f08 	tst.w	r3, r8
 8007748:	e7e0      	b.n	800770c <_strtod_l+0x904>
 800774a:	f7ff fb3b 	bl	8006dc4 <sulp>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007756:	f7f8 fd07 	bl	8000168 <__aeabi_dsub>
 800775a:	2200      	movs	r2, #0
 800775c:	2300      	movs	r3, #0
 800775e:	4680      	mov	r8, r0
 8007760:	4689      	mov	r9, r1
 8007762:	f7f9 f921 	bl	80009a8 <__aeabi_dcmpeq>
 8007766:	2800      	cmp	r0, #0
 8007768:	d0c0      	beq.n	80076ec <_strtod_l+0x8e4>
 800776a:	e602      	b.n	8007372 <_strtod_l+0x56a>
 800776c:	4658      	mov	r0, fp
 800776e:	9904      	ldr	r1, [sp, #16]
 8007770:	f002 f83a 	bl	80097e8 <__ratio>
 8007774:	2200      	movs	r2, #0
 8007776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800777a:	4606      	mov	r6, r0
 800777c:	460f      	mov	r7, r1
 800777e:	f7f9 f927 	bl	80009d0 <__aeabi_dcmple>
 8007782:	2800      	cmp	r0, #0
 8007784:	d075      	beq.n	8007872 <_strtod_l+0xa6a>
 8007786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007788:	2b00      	cmp	r3, #0
 800778a:	d047      	beq.n	800781c <_strtod_l+0xa14>
 800778c:	2600      	movs	r6, #0
 800778e:	4f65      	ldr	r7, [pc, #404]	; (8007924 <_strtod_l+0xb1c>)
 8007790:	4d64      	ldr	r5, [pc, #400]	; (8007924 <_strtod_l+0xb1c>)
 8007792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007798:	0d1b      	lsrs	r3, r3, #20
 800779a:	051b      	lsls	r3, r3, #20
 800779c:	930f      	str	r3, [sp, #60]	; 0x3c
 800779e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077a0:	4b61      	ldr	r3, [pc, #388]	; (8007928 <_strtod_l+0xb20>)
 80077a2:	429a      	cmp	r2, r3
 80077a4:	f040 80c8 	bne.w	8007938 <_strtod_l+0xb30>
 80077a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077ac:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80077b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b2:	4640      	mov	r0, r8
 80077b4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80077b8:	4649      	mov	r1, r9
 80077ba:	f001 ff3f 	bl	800963c <__ulp>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4630      	mov	r0, r6
 80077c4:	4639      	mov	r1, r7
 80077c6:	f7f8 fe87 	bl	80004d8 <__aeabi_dmul>
 80077ca:	4642      	mov	r2, r8
 80077cc:	464b      	mov	r3, r9
 80077ce:	f7f8 fccd 	bl	800016c <__adddf3>
 80077d2:	460b      	mov	r3, r1
 80077d4:	4951      	ldr	r1, [pc, #324]	; (800791c <_strtod_l+0xb14>)
 80077d6:	4a55      	ldr	r2, [pc, #340]	; (800792c <_strtod_l+0xb24>)
 80077d8:	4019      	ands	r1, r3
 80077da:	4291      	cmp	r1, r2
 80077dc:	4680      	mov	r8, r0
 80077de:	d95e      	bls.n	800789e <_strtod_l+0xa96>
 80077e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d103      	bne.n	80077f2 <_strtod_l+0x9ea>
 80077ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ec:	3301      	adds	r3, #1
 80077ee:	f43f ad4e 	beq.w	800728e <_strtod_l+0x486>
 80077f2:	f04f 38ff 	mov.w	r8, #4294967295
 80077f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007920 <_strtod_l+0xb18>
 80077fa:	4650      	mov	r0, sl
 80077fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80077fe:	f001 fbed 	bl	8008fdc <_Bfree>
 8007802:	4650      	mov	r0, sl
 8007804:	9906      	ldr	r1, [sp, #24]
 8007806:	f001 fbe9 	bl	8008fdc <_Bfree>
 800780a:	4650      	mov	r0, sl
 800780c:	9904      	ldr	r1, [sp, #16]
 800780e:	f001 fbe5 	bl	8008fdc <_Bfree>
 8007812:	4659      	mov	r1, fp
 8007814:	4650      	mov	r0, sl
 8007816:	f001 fbe1 	bl	8008fdc <_Bfree>
 800781a:	e61c      	b.n	8007456 <_strtod_l+0x64e>
 800781c:	f1b8 0f00 	cmp.w	r8, #0
 8007820:	d119      	bne.n	8007856 <_strtod_l+0xa4e>
 8007822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007828:	b9e3      	cbnz	r3, 8007864 <_strtod_l+0xa5c>
 800782a:	2200      	movs	r2, #0
 800782c:	4630      	mov	r0, r6
 800782e:	4639      	mov	r1, r7
 8007830:	4b3c      	ldr	r3, [pc, #240]	; (8007924 <_strtod_l+0xb1c>)
 8007832:	f7f9 f8c3 	bl	80009bc <__aeabi_dcmplt>
 8007836:	b9c8      	cbnz	r0, 800786c <_strtod_l+0xa64>
 8007838:	2200      	movs	r2, #0
 800783a:	4630      	mov	r0, r6
 800783c:	4639      	mov	r1, r7
 800783e:	4b3c      	ldr	r3, [pc, #240]	; (8007930 <_strtod_l+0xb28>)
 8007840:	f7f8 fe4a 	bl	80004d8 <__aeabi_dmul>
 8007844:	4604      	mov	r4, r0
 8007846:	460d      	mov	r5, r1
 8007848:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800784c:	9418      	str	r4, [sp, #96]	; 0x60
 800784e:	9319      	str	r3, [sp, #100]	; 0x64
 8007850:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007854:	e79d      	b.n	8007792 <_strtod_l+0x98a>
 8007856:	f1b8 0f01 	cmp.w	r8, #1
 800785a:	d103      	bne.n	8007864 <_strtod_l+0xa5c>
 800785c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	f43f ad87 	beq.w	8007372 <_strtod_l+0x56a>
 8007864:	2600      	movs	r6, #0
 8007866:	2400      	movs	r4, #0
 8007868:	4f32      	ldr	r7, [pc, #200]	; (8007934 <_strtod_l+0xb2c>)
 800786a:	e791      	b.n	8007790 <_strtod_l+0x988>
 800786c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800786e:	4d30      	ldr	r5, [pc, #192]	; (8007930 <_strtod_l+0xb28>)
 8007870:	e7ea      	b.n	8007848 <_strtod_l+0xa40>
 8007872:	4b2f      	ldr	r3, [pc, #188]	; (8007930 <_strtod_l+0xb28>)
 8007874:	2200      	movs	r2, #0
 8007876:	4630      	mov	r0, r6
 8007878:	4639      	mov	r1, r7
 800787a:	f7f8 fe2d 	bl	80004d8 <__aeabi_dmul>
 800787e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007880:	4604      	mov	r4, r0
 8007882:	460d      	mov	r5, r1
 8007884:	b933      	cbnz	r3, 8007894 <_strtod_l+0xa8c>
 8007886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800788a:	9010      	str	r0, [sp, #64]	; 0x40
 800788c:	9311      	str	r3, [sp, #68]	; 0x44
 800788e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007892:	e77e      	b.n	8007792 <_strtod_l+0x98a>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800789c:	e7f7      	b.n	800788e <_strtod_l+0xa86>
 800789e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80078a2:	9b05      	ldr	r3, [sp, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1a8      	bne.n	80077fa <_strtod_l+0x9f2>
 80078a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078ae:	0d1b      	lsrs	r3, r3, #20
 80078b0:	051b      	lsls	r3, r3, #20
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d1a1      	bne.n	80077fa <_strtod_l+0x9f2>
 80078b6:	4620      	mov	r0, r4
 80078b8:	4629      	mov	r1, r5
 80078ba:	f7f9 fc29 	bl	8001110 <__aeabi_d2lz>
 80078be:	f7f8 fddd 	bl	800047c <__aeabi_l2d>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f8 fc4d 	bl	8000168 <__aeabi_dsub>
 80078ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078d4:	ea43 0308 	orr.w	r3, r3, r8
 80078d8:	4313      	orrs	r3, r2
 80078da:	4604      	mov	r4, r0
 80078dc:	460d      	mov	r5, r1
 80078de:	d066      	beq.n	80079ae <_strtod_l+0xba6>
 80078e0:	a309      	add	r3, pc, #36	; (adr r3, 8007908 <_strtod_l+0xb00>)
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	f7f9 f869 	bl	80009bc <__aeabi_dcmplt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	f47f acda 	bne.w	80072a4 <_strtod_l+0x49c>
 80078f0:	a307      	add	r3, pc, #28	; (adr r3, 8007910 <_strtod_l+0xb08>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	4620      	mov	r0, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	f7f9 f87d 	bl	80009f8 <__aeabi_dcmpgt>
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f af7b 	beq.w	80077fa <_strtod_l+0x9f2>
 8007904:	e4ce      	b.n	80072a4 <_strtod_l+0x49c>
 8007906:	bf00      	nop
 8007908:	94a03595 	.word	0x94a03595
 800790c:	3fdfffff 	.word	0x3fdfffff
 8007910:	35afe535 	.word	0x35afe535
 8007914:	3fe00000 	.word	0x3fe00000
 8007918:	000fffff 	.word	0x000fffff
 800791c:	7ff00000 	.word	0x7ff00000
 8007920:	7fefffff 	.word	0x7fefffff
 8007924:	3ff00000 	.word	0x3ff00000
 8007928:	7fe00000 	.word	0x7fe00000
 800792c:	7c9fffff 	.word	0x7c9fffff
 8007930:	3fe00000 	.word	0x3fe00000
 8007934:	bff00000 	.word	0xbff00000
 8007938:	9b05      	ldr	r3, [sp, #20]
 800793a:	b313      	cbz	r3, 8007982 <_strtod_l+0xb7a>
 800793c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800793e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007942:	d81e      	bhi.n	8007982 <_strtod_l+0xb7a>
 8007944:	a326      	add	r3, pc, #152	; (adr r3, 80079e0 <_strtod_l+0xbd8>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	4620      	mov	r0, r4
 800794c:	4629      	mov	r1, r5
 800794e:	f7f9 f83f 	bl	80009d0 <__aeabi_dcmple>
 8007952:	b190      	cbz	r0, 800797a <_strtod_l+0xb72>
 8007954:	4629      	mov	r1, r5
 8007956:	4620      	mov	r0, r4
 8007958:	f7f9 f896 	bl	8000a88 <__aeabi_d2uiz>
 800795c:	2801      	cmp	r0, #1
 800795e:	bf38      	it	cc
 8007960:	2001      	movcc	r0, #1
 8007962:	f7f8 fd3f 	bl	80003e4 <__aeabi_ui2d>
 8007966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007968:	4604      	mov	r4, r0
 800796a:	460d      	mov	r5, r1
 800796c:	b9d3      	cbnz	r3, 80079a4 <_strtod_l+0xb9c>
 800796e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007972:	9012      	str	r0, [sp, #72]	; 0x48
 8007974:	9313      	str	r3, [sp, #76]	; 0x4c
 8007976:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800797a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800797c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007980:	1a9f      	subs	r7, r3, r2
 8007982:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007986:	f001 fe59 	bl	800963c <__ulp>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f8 fda1 	bl	80004d8 <__aeabi_dmul>
 8007996:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800799a:	f7f8 fbe7 	bl	800016c <__adddf3>
 800799e:	4680      	mov	r8, r0
 80079a0:	4689      	mov	r9, r1
 80079a2:	e77e      	b.n	80078a2 <_strtod_l+0xa9a>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80079ac:	e7e3      	b.n	8007976 <_strtod_l+0xb6e>
 80079ae:	a30e      	add	r3, pc, #56	; (adr r3, 80079e8 <_strtod_l+0xbe0>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f9 f802 	bl	80009bc <__aeabi_dcmplt>
 80079b8:	e7a1      	b.n	80078fe <_strtod_l+0xaf6>
 80079ba:	2300      	movs	r3, #0
 80079bc:	930c      	str	r3, [sp, #48]	; 0x30
 80079be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	f7ff ba65 	b.w	8006e92 <_strtod_l+0x8a>
 80079c8:	2b65      	cmp	r3, #101	; 0x65
 80079ca:	f43f ab5c 	beq.w	8007086 <_strtod_l+0x27e>
 80079ce:	2b45      	cmp	r3, #69	; 0x45
 80079d0:	f43f ab59 	beq.w	8007086 <_strtod_l+0x27e>
 80079d4:	2201      	movs	r2, #1
 80079d6:	f7ff bb8d 	b.w	80070f4 <_strtod_l+0x2ec>
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w
 80079e0:	ffc00000 	.word	0xffc00000
 80079e4:	41dfffff 	.word	0x41dfffff
 80079e8:	94a03595 	.word	0x94a03595
 80079ec:	3fcfffff 	.word	0x3fcfffff

080079f0 <_strtod_r>:
 80079f0:	4b01      	ldr	r3, [pc, #4]	; (80079f8 <_strtod_r+0x8>)
 80079f2:	f7ff ba09 	b.w	8006e08 <_strtod_l>
 80079f6:	bf00      	nop
 80079f8:	20000074 	.word	0x20000074

080079fc <_strtol_l.isra.0>:
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a02:	4686      	mov	lr, r0
 8007a04:	d001      	beq.n	8007a0a <_strtol_l.isra.0+0xe>
 8007a06:	2b24      	cmp	r3, #36	; 0x24
 8007a08:	d906      	bls.n	8007a18 <_strtol_l.isra.0+0x1c>
 8007a0a:	f7fe fb13 	bl	8006034 <__errno>
 8007a0e:	2316      	movs	r3, #22
 8007a10:	6003      	str	r3, [r0, #0]
 8007a12:	2000      	movs	r0, #0
 8007a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a18:	468c      	mov	ip, r1
 8007a1a:	4e3a      	ldr	r6, [pc, #232]	; (8007b04 <_strtol_l.isra.0+0x108>)
 8007a1c:	4660      	mov	r0, ip
 8007a1e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007a22:	5da5      	ldrb	r5, [r4, r6]
 8007a24:	f015 0508 	ands.w	r5, r5, #8
 8007a28:	d1f8      	bne.n	8007a1c <_strtol_l.isra.0+0x20>
 8007a2a:	2c2d      	cmp	r4, #45	; 0x2d
 8007a2c:	d133      	bne.n	8007a96 <_strtol_l.isra.0+0x9a>
 8007a2e:	f04f 0801 	mov.w	r8, #1
 8007a32:	f89c 4000 	ldrb.w	r4, [ip]
 8007a36:	f100 0c02 	add.w	ip, r0, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d05d      	beq.n	8007afa <_strtol_l.isra.0+0xfe>
 8007a3e:	2b10      	cmp	r3, #16
 8007a40:	d10c      	bne.n	8007a5c <_strtol_l.isra.0+0x60>
 8007a42:	2c30      	cmp	r4, #48	; 0x30
 8007a44:	d10a      	bne.n	8007a5c <_strtol_l.isra.0+0x60>
 8007a46:	f89c 0000 	ldrb.w	r0, [ip]
 8007a4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007a4e:	2858      	cmp	r0, #88	; 0x58
 8007a50:	d14e      	bne.n	8007af0 <_strtol_l.isra.0+0xf4>
 8007a52:	2310      	movs	r3, #16
 8007a54:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007a58:	f10c 0c02 	add.w	ip, ip, #2
 8007a5c:	2500      	movs	r5, #0
 8007a5e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8007a62:	3f01      	subs	r7, #1
 8007a64:	fbb7 f9f3 	udiv	r9, r7, r3
 8007a68:	4628      	mov	r0, r5
 8007a6a:	fb03 7a19 	mls	sl, r3, r9, r7
 8007a6e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007a72:	2e09      	cmp	r6, #9
 8007a74:	d818      	bhi.n	8007aa8 <_strtol_l.isra.0+0xac>
 8007a76:	4634      	mov	r4, r6
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	dd24      	ble.n	8007ac6 <_strtol_l.isra.0+0xca>
 8007a7c:	2d00      	cmp	r5, #0
 8007a7e:	db1f      	blt.n	8007ac0 <_strtol_l.isra.0+0xc4>
 8007a80:	4581      	cmp	r9, r0
 8007a82:	d31d      	bcc.n	8007ac0 <_strtol_l.isra.0+0xc4>
 8007a84:	d101      	bne.n	8007a8a <_strtol_l.isra.0+0x8e>
 8007a86:	45a2      	cmp	sl, r4
 8007a88:	db1a      	blt.n	8007ac0 <_strtol_l.isra.0+0xc4>
 8007a8a:	2501      	movs	r5, #1
 8007a8c:	fb00 4003 	mla	r0, r0, r3, r4
 8007a90:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007a94:	e7eb      	b.n	8007a6e <_strtol_l.isra.0+0x72>
 8007a96:	2c2b      	cmp	r4, #43	; 0x2b
 8007a98:	bf08      	it	eq
 8007a9a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007a9e:	46a8      	mov	r8, r5
 8007aa0:	bf08      	it	eq
 8007aa2:	f100 0c02 	addeq.w	ip, r0, #2
 8007aa6:	e7c8      	b.n	8007a3a <_strtol_l.isra.0+0x3e>
 8007aa8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007aac:	2e19      	cmp	r6, #25
 8007aae:	d801      	bhi.n	8007ab4 <_strtol_l.isra.0+0xb8>
 8007ab0:	3c37      	subs	r4, #55	; 0x37
 8007ab2:	e7e1      	b.n	8007a78 <_strtol_l.isra.0+0x7c>
 8007ab4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007ab8:	2e19      	cmp	r6, #25
 8007aba:	d804      	bhi.n	8007ac6 <_strtol_l.isra.0+0xca>
 8007abc:	3c57      	subs	r4, #87	; 0x57
 8007abe:	e7db      	b.n	8007a78 <_strtol_l.isra.0+0x7c>
 8007ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ac4:	e7e4      	b.n	8007a90 <_strtol_l.isra.0+0x94>
 8007ac6:	2d00      	cmp	r5, #0
 8007ac8:	da08      	bge.n	8007adc <_strtol_l.isra.0+0xe0>
 8007aca:	2322      	movs	r3, #34	; 0x22
 8007acc:	4638      	mov	r0, r7
 8007ace:	f8ce 3000 	str.w	r3, [lr]
 8007ad2:	2a00      	cmp	r2, #0
 8007ad4:	d09e      	beq.n	8007a14 <_strtol_l.isra.0+0x18>
 8007ad6:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007ada:	e007      	b.n	8007aec <_strtol_l.isra.0+0xf0>
 8007adc:	f1b8 0f00 	cmp.w	r8, #0
 8007ae0:	d000      	beq.n	8007ae4 <_strtol_l.isra.0+0xe8>
 8007ae2:	4240      	negs	r0, r0
 8007ae4:	2a00      	cmp	r2, #0
 8007ae6:	d095      	beq.n	8007a14 <_strtol_l.isra.0+0x18>
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	d1f4      	bne.n	8007ad6 <_strtol_l.isra.0+0xda>
 8007aec:	6011      	str	r1, [r2, #0]
 8007aee:	e791      	b.n	8007a14 <_strtol_l.isra.0+0x18>
 8007af0:	2430      	movs	r4, #48	; 0x30
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1b2      	bne.n	8007a5c <_strtol_l.isra.0+0x60>
 8007af6:	2308      	movs	r3, #8
 8007af8:	e7b0      	b.n	8007a5c <_strtol_l.isra.0+0x60>
 8007afa:	2c30      	cmp	r4, #48	; 0x30
 8007afc:	d0a3      	beq.n	8007a46 <_strtol_l.isra.0+0x4a>
 8007afe:	230a      	movs	r3, #10
 8007b00:	e7ac      	b.n	8007a5c <_strtol_l.isra.0+0x60>
 8007b02:	bf00      	nop
 8007b04:	0800a991 	.word	0x0800a991

08007b08 <_strtol_r>:
 8007b08:	f7ff bf78 	b.w	80079fc <_strtol_l.isra.0>

08007b0c <strtol>:
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	460a      	mov	r2, r1
 8007b10:	4601      	mov	r1, r0
 8007b12:	4802      	ldr	r0, [pc, #8]	; (8007b1c <strtol+0x10>)
 8007b14:	6800      	ldr	r0, [r0, #0]
 8007b16:	f7ff bf71 	b.w	80079fc <_strtol_l.isra.0>
 8007b1a:	bf00      	nop
 8007b1c:	2000000c 	.word	0x2000000c

08007b20 <quorem>:
 8007b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	6903      	ldr	r3, [r0, #16]
 8007b26:	690c      	ldr	r4, [r1, #16]
 8007b28:	4607      	mov	r7, r0
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	f2c0 8083 	blt.w	8007c36 <quorem+0x116>
 8007b30:	3c01      	subs	r4, #1
 8007b32:	f100 0514 	add.w	r5, r0, #20
 8007b36:	f101 0814 	add.w	r8, r1, #20
 8007b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b58:	d332      	bcc.n	8007bc0 <quorem+0xa0>
 8007b5a:	f04f 0e00 	mov.w	lr, #0
 8007b5e:	4640      	mov	r0, r8
 8007b60:	46ac      	mov	ip, r5
 8007b62:	46f2      	mov	sl, lr
 8007b64:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b68:	b293      	uxth	r3, r2
 8007b6a:	fb06 e303 	mla	r3, r6, r3, lr
 8007b6e:	0c12      	lsrs	r2, r2, #16
 8007b70:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b74:	fb06 e202 	mla	r2, r6, r2, lr
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	ebaa 0303 	sub.w	r3, sl, r3
 8007b7e:	f8dc a000 	ldr.w	sl, [ip]
 8007b82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b86:	fa1f fa8a 	uxth.w	sl, sl
 8007b8a:	4453      	add	r3, sl
 8007b8c:	fa1f fa82 	uxth.w	sl, r2
 8007b90:	f8dc 2000 	ldr.w	r2, [ip]
 8007b94:	4581      	cmp	r9, r0
 8007b96:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007b9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ba4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ba8:	f84c 3b04 	str.w	r3, [ip], #4
 8007bac:	d2da      	bcs.n	8007b64 <quorem+0x44>
 8007bae:	f855 300b 	ldr.w	r3, [r5, fp]
 8007bb2:	b92b      	cbnz	r3, 8007bc0 <quorem+0xa0>
 8007bb4:	9b01      	ldr	r3, [sp, #4]
 8007bb6:	3b04      	subs	r3, #4
 8007bb8:	429d      	cmp	r5, r3
 8007bba:	461a      	mov	r2, r3
 8007bbc:	d32f      	bcc.n	8007c1e <quorem+0xfe>
 8007bbe:	613c      	str	r4, [r7, #16]
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f001 fc8f 	bl	80094e4 <__mcmp>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	db25      	blt.n	8007c16 <quorem+0xf6>
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f04f 0c00 	mov.w	ip, #0
 8007bd0:	3601      	adds	r6, #1
 8007bd2:	f858 1b04 	ldr.w	r1, [r8], #4
 8007bd6:	f8d0 e000 	ldr.w	lr, [r0]
 8007bda:	b28b      	uxth	r3, r1
 8007bdc:	ebac 0303 	sub.w	r3, ip, r3
 8007be0:	fa1f f28e 	uxth.w	r2, lr
 8007be4:	4413      	add	r3, r2
 8007be6:	0c0a      	lsrs	r2, r1, #16
 8007be8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007bec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bf6:	45c1      	cmp	r9, r8
 8007bf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007bfc:	f840 3b04 	str.w	r3, [r0], #4
 8007c00:	d2e7      	bcs.n	8007bd2 <quorem+0xb2>
 8007c02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c0a:	b922      	cbnz	r2, 8007c16 <quorem+0xf6>
 8007c0c:	3b04      	subs	r3, #4
 8007c0e:	429d      	cmp	r5, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	d30a      	bcc.n	8007c2a <quorem+0x10a>
 8007c14:	613c      	str	r4, [r7, #16]
 8007c16:	4630      	mov	r0, r6
 8007c18:	b003      	add	sp, #12
 8007c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1e:	6812      	ldr	r2, [r2, #0]
 8007c20:	3b04      	subs	r3, #4
 8007c22:	2a00      	cmp	r2, #0
 8007c24:	d1cb      	bne.n	8007bbe <quorem+0x9e>
 8007c26:	3c01      	subs	r4, #1
 8007c28:	e7c6      	b.n	8007bb8 <quorem+0x98>
 8007c2a:	6812      	ldr	r2, [r2, #0]
 8007c2c:	3b04      	subs	r3, #4
 8007c2e:	2a00      	cmp	r2, #0
 8007c30:	d1f0      	bne.n	8007c14 <quorem+0xf4>
 8007c32:	3c01      	subs	r4, #1
 8007c34:	e7eb      	b.n	8007c0e <quorem+0xee>
 8007c36:	2000      	movs	r0, #0
 8007c38:	e7ee      	b.n	8007c18 <quorem+0xf8>
 8007c3a:	0000      	movs	r0, r0
 8007c3c:	0000      	movs	r0, r0
	...

08007c40 <_dtoa_r>:
 8007c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	4616      	mov	r6, r2
 8007c46:	461f      	mov	r7, r3
 8007c48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c4a:	b099      	sub	sp, #100	; 0x64
 8007c4c:	4605      	mov	r5, r0
 8007c4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007c52:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007c56:	b974      	cbnz	r4, 8007c76 <_dtoa_r+0x36>
 8007c58:	2010      	movs	r0, #16
 8007c5a:	f001 f949 	bl	8008ef0 <malloc>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	6268      	str	r0, [r5, #36]	; 0x24
 8007c62:	b920      	cbnz	r0, 8007c6e <_dtoa_r+0x2e>
 8007c64:	21ea      	movs	r1, #234	; 0xea
 8007c66:	4bae      	ldr	r3, [pc, #696]	; (8007f20 <_dtoa_r+0x2e0>)
 8007c68:	48ae      	ldr	r0, [pc, #696]	; (8007f24 <_dtoa_r+0x2e4>)
 8007c6a:	f002 f875 	bl	8009d58 <__assert_func>
 8007c6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c72:	6004      	str	r4, [r0, #0]
 8007c74:	60c4      	str	r4, [r0, #12]
 8007c76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c78:	6819      	ldr	r1, [r3, #0]
 8007c7a:	b151      	cbz	r1, 8007c92 <_dtoa_r+0x52>
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	2301      	movs	r3, #1
 8007c80:	4093      	lsls	r3, r2
 8007c82:	604a      	str	r2, [r1, #4]
 8007c84:	608b      	str	r3, [r1, #8]
 8007c86:	4628      	mov	r0, r5
 8007c88:	f001 f9a8 	bl	8008fdc <_Bfree>
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	1e3b      	subs	r3, r7, #0
 8007c94:	bfaf      	iteee	ge
 8007c96:	2300      	movge	r3, #0
 8007c98:	2201      	movlt	r2, #1
 8007c9a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c9e:	9305      	strlt	r3, [sp, #20]
 8007ca0:	bfa8      	it	ge
 8007ca2:	f8c8 3000 	strge.w	r3, [r8]
 8007ca6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007caa:	4b9f      	ldr	r3, [pc, #636]	; (8007f28 <_dtoa_r+0x2e8>)
 8007cac:	bfb8      	it	lt
 8007cae:	f8c8 2000 	strlt.w	r2, [r8]
 8007cb2:	ea33 0309 	bics.w	r3, r3, r9
 8007cb6:	d119      	bne.n	8007cec <_dtoa_r+0xac>
 8007cb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007cbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cc4:	4333      	orrs	r3, r6
 8007cc6:	f000 8580 	beq.w	80087ca <_dtoa_r+0xb8a>
 8007cca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ccc:	b953      	cbnz	r3, 8007ce4 <_dtoa_r+0xa4>
 8007cce:	4b97      	ldr	r3, [pc, #604]	; (8007f2c <_dtoa_r+0x2ec>)
 8007cd0:	e022      	b.n	8007d18 <_dtoa_r+0xd8>
 8007cd2:	4b97      	ldr	r3, [pc, #604]	; (8007f30 <_dtoa_r+0x2f0>)
 8007cd4:	9308      	str	r3, [sp, #32]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	9808      	ldr	r0, [sp, #32]
 8007cde:	b019      	add	sp, #100	; 0x64
 8007ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce4:	4b91      	ldr	r3, [pc, #580]	; (8007f2c <_dtoa_r+0x2ec>)
 8007ce6:	9308      	str	r3, [sp, #32]
 8007ce8:	3303      	adds	r3, #3
 8007cea:	e7f5      	b.n	8007cd8 <_dtoa_r+0x98>
 8007cec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007cf0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007cf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f7f8 fe54 	bl	80009a8 <__aeabi_dcmpeq>
 8007d00:	4680      	mov	r8, r0
 8007d02:	b158      	cbz	r0, 8007d1c <_dtoa_r+0xdc>
 8007d04:	2301      	movs	r3, #1
 8007d06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d08:	6013      	str	r3, [r2, #0]
 8007d0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8559 	beq.w	80087c4 <_dtoa_r+0xb84>
 8007d12:	4888      	ldr	r0, [pc, #544]	; (8007f34 <_dtoa_r+0x2f4>)
 8007d14:	6018      	str	r0, [r3, #0]
 8007d16:	1e43      	subs	r3, r0, #1
 8007d18:	9308      	str	r3, [sp, #32]
 8007d1a:	e7df      	b.n	8007cdc <_dtoa_r+0x9c>
 8007d1c:	ab16      	add	r3, sp, #88	; 0x58
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	ab17      	add	r3, sp, #92	; 0x5c
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	4628      	mov	r0, r5
 8007d26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d2a:	f001 fd01 	bl	8009730 <__d2b>
 8007d2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007d32:	4682      	mov	sl, r0
 8007d34:	2c00      	cmp	r4, #0
 8007d36:	d07e      	beq.n	8007e36 <_dtoa_r+0x1f6>
 8007d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d3e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007d42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007d4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007d4e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007d52:	2200      	movs	r2, #0
 8007d54:	4b78      	ldr	r3, [pc, #480]	; (8007f38 <_dtoa_r+0x2f8>)
 8007d56:	f7f8 fa07 	bl	8000168 <__aeabi_dsub>
 8007d5a:	a36b      	add	r3, pc, #428	; (adr r3, 8007f08 <_dtoa_r+0x2c8>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f7f8 fbba 	bl	80004d8 <__aeabi_dmul>
 8007d64:	a36a      	add	r3, pc, #424	; (adr r3, 8007f10 <_dtoa_r+0x2d0>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f7f8 f9ff 	bl	800016c <__adddf3>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	4620      	mov	r0, r4
 8007d72:	460f      	mov	r7, r1
 8007d74:	f7f8 fb46 	bl	8000404 <__aeabi_i2d>
 8007d78:	a367      	add	r3, pc, #412	; (adr r3, 8007f18 <_dtoa_r+0x2d8>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f7f8 fbab 	bl	80004d8 <__aeabi_dmul>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4630      	mov	r0, r6
 8007d88:	4639      	mov	r1, r7
 8007d8a:	f7f8 f9ef 	bl	800016c <__adddf3>
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460f      	mov	r7, r1
 8007d92:	f7f8 fe51 	bl	8000a38 <__aeabi_d2iz>
 8007d96:	2200      	movs	r2, #0
 8007d98:	4681      	mov	r9, r0
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	4639      	mov	r1, r7
 8007da0:	f7f8 fe0c 	bl	80009bc <__aeabi_dcmplt>
 8007da4:	b148      	cbz	r0, 8007dba <_dtoa_r+0x17a>
 8007da6:	4648      	mov	r0, r9
 8007da8:	f7f8 fb2c 	bl	8000404 <__aeabi_i2d>
 8007dac:	4632      	mov	r2, r6
 8007dae:	463b      	mov	r3, r7
 8007db0:	f7f8 fdfa 	bl	80009a8 <__aeabi_dcmpeq>
 8007db4:	b908      	cbnz	r0, 8007dba <_dtoa_r+0x17a>
 8007db6:	f109 39ff 	add.w	r9, r9, #4294967295
 8007dba:	f1b9 0f16 	cmp.w	r9, #22
 8007dbe:	d857      	bhi.n	8007e70 <_dtoa_r+0x230>
 8007dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007dc4:	4b5d      	ldr	r3, [pc, #372]	; (8007f3c <_dtoa_r+0x2fc>)
 8007dc6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fdf5 	bl	80009bc <__aeabi_dcmplt>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d04e      	beq.n	8007e74 <_dtoa_r+0x234>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f109 39ff 	add.w	r9, r9, #4294967295
 8007ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dde:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007de0:	1b1c      	subs	r4, r3, r4
 8007de2:	1e63      	subs	r3, r4, #1
 8007de4:	9309      	str	r3, [sp, #36]	; 0x24
 8007de6:	bf49      	itett	mi
 8007de8:	f1c4 0301 	rsbmi	r3, r4, #1
 8007dec:	2300      	movpl	r3, #0
 8007dee:	9306      	strmi	r3, [sp, #24]
 8007df0:	2300      	movmi	r3, #0
 8007df2:	bf54      	ite	pl
 8007df4:	9306      	strpl	r3, [sp, #24]
 8007df6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007df8:	f1b9 0f00 	cmp.w	r9, #0
 8007dfc:	db3c      	blt.n	8007e78 <_dtoa_r+0x238>
 8007dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e00:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007e04:	444b      	add	r3, r9
 8007e06:	9309      	str	r3, [sp, #36]	; 0x24
 8007e08:	2300      	movs	r3, #0
 8007e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e0e:	2b09      	cmp	r3, #9
 8007e10:	d86c      	bhi.n	8007eec <_dtoa_r+0x2ac>
 8007e12:	2b05      	cmp	r3, #5
 8007e14:	bfc4      	itt	gt
 8007e16:	3b04      	subgt	r3, #4
 8007e18:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007e1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e1c:	bfc8      	it	gt
 8007e1e:	2400      	movgt	r4, #0
 8007e20:	f1a3 0302 	sub.w	r3, r3, #2
 8007e24:	bfd8      	it	le
 8007e26:	2401      	movle	r4, #1
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	f200 808b 	bhi.w	8007f44 <_dtoa_r+0x304>
 8007e2e:	e8df f003 	tbb	[pc, r3]
 8007e32:	4f2d      	.short	0x4f2d
 8007e34:	5b4d      	.short	0x5b4d
 8007e36:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007e3a:	441c      	add	r4, r3
 8007e3c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007e40:	2b20      	cmp	r3, #32
 8007e42:	bfc3      	ittte	gt
 8007e44:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e48:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007e4c:	fa09 f303 	lslgt.w	r3, r9, r3
 8007e50:	f1c3 0320 	rsble	r3, r3, #32
 8007e54:	bfc6      	itte	gt
 8007e56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e5a:	4318      	orrgt	r0, r3
 8007e5c:	fa06 f003 	lslle.w	r0, r6, r3
 8007e60:	f7f8 fac0 	bl	80003e4 <__aeabi_ui2d>
 8007e64:	2301      	movs	r3, #1
 8007e66:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007e6a:	3c01      	subs	r4, #1
 8007e6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e6e:	e770      	b.n	8007d52 <_dtoa_r+0x112>
 8007e70:	2301      	movs	r3, #1
 8007e72:	e7b3      	b.n	8007ddc <_dtoa_r+0x19c>
 8007e74:	900f      	str	r0, [sp, #60]	; 0x3c
 8007e76:	e7b2      	b.n	8007dde <_dtoa_r+0x19e>
 8007e78:	9b06      	ldr	r3, [sp, #24]
 8007e7a:	eba3 0309 	sub.w	r3, r3, r9
 8007e7e:	9306      	str	r3, [sp, #24]
 8007e80:	f1c9 0300 	rsb	r3, r9, #0
 8007e84:	930a      	str	r3, [sp, #40]	; 0x28
 8007e86:	2300      	movs	r3, #0
 8007e88:	930e      	str	r3, [sp, #56]	; 0x38
 8007e8a:	e7bf      	b.n	8007e0c <_dtoa_r+0x1cc>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dc59      	bgt.n	8007f4a <_dtoa_r+0x30a>
 8007e96:	f04f 0b01 	mov.w	fp, #1
 8007e9a:	465b      	mov	r3, fp
 8007e9c:	f8cd b008 	str.w	fp, [sp, #8]
 8007ea0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007ea8:	6042      	str	r2, [r0, #4]
 8007eaa:	2204      	movs	r2, #4
 8007eac:	f102 0614 	add.w	r6, r2, #20
 8007eb0:	429e      	cmp	r6, r3
 8007eb2:	6841      	ldr	r1, [r0, #4]
 8007eb4:	d94f      	bls.n	8007f56 <_dtoa_r+0x316>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f001 f850 	bl	8008f5c <_Balloc>
 8007ebc:	9008      	str	r0, [sp, #32]
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d14d      	bne.n	8007f5e <_dtoa_r+0x31e>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ec8:	4b1d      	ldr	r3, [pc, #116]	; (8007f40 <_dtoa_r+0x300>)
 8007eca:	e6cd      	b.n	8007c68 <_dtoa_r+0x28>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e7de      	b.n	8007e8e <_dtoa_r+0x24e>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ed4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ed6:	eb09 0b03 	add.w	fp, r9, r3
 8007eda:	f10b 0301 	add.w	r3, fp, #1
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	9302      	str	r3, [sp, #8]
 8007ee2:	bfb8      	it	lt
 8007ee4:	2301      	movlt	r3, #1
 8007ee6:	e7dd      	b.n	8007ea4 <_dtoa_r+0x264>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e7f2      	b.n	8007ed2 <_dtoa_r+0x292>
 8007eec:	2401      	movs	r4, #1
 8007eee:	2300      	movs	r3, #0
 8007ef0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007ef2:	9322      	str	r3, [sp, #136]	; 0x88
 8007ef4:	f04f 3bff 	mov.w	fp, #4294967295
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2312      	movs	r3, #18
 8007efc:	f8cd b008 	str.w	fp, [sp, #8]
 8007f00:	9223      	str	r2, [sp, #140]	; 0x8c
 8007f02:	e7cf      	b.n	8007ea4 <_dtoa_r+0x264>
 8007f04:	f3af 8000 	nop.w
 8007f08:	636f4361 	.word	0x636f4361
 8007f0c:	3fd287a7 	.word	0x3fd287a7
 8007f10:	8b60c8b3 	.word	0x8b60c8b3
 8007f14:	3fc68a28 	.word	0x3fc68a28
 8007f18:	509f79fb 	.word	0x509f79fb
 8007f1c:	3fd34413 	.word	0x3fd34413
 8007f20:	0800aa9e 	.word	0x0800aa9e
 8007f24:	0800aab5 	.word	0x0800aab5
 8007f28:	7ff00000 	.word	0x7ff00000
 8007f2c:	0800aa9a 	.word	0x0800aa9a
 8007f30:	0800aa91 	.word	0x0800aa91
 8007f34:	0800a915 	.word	0x0800a915
 8007f38:	3ff80000 	.word	0x3ff80000
 8007f3c:	0800ac30 	.word	0x0800ac30
 8007f40:	0800ab14 	.word	0x0800ab14
 8007f44:	2301      	movs	r3, #1
 8007f46:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f48:	e7d4      	b.n	8007ef4 <_dtoa_r+0x2b4>
 8007f4a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007f4e:	465b      	mov	r3, fp
 8007f50:	f8cd b008 	str.w	fp, [sp, #8]
 8007f54:	e7a6      	b.n	8007ea4 <_dtoa_r+0x264>
 8007f56:	3101      	adds	r1, #1
 8007f58:	6041      	str	r1, [r0, #4]
 8007f5a:	0052      	lsls	r2, r2, #1
 8007f5c:	e7a6      	b.n	8007eac <_dtoa_r+0x26c>
 8007f5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f60:	9a08      	ldr	r2, [sp, #32]
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	9b02      	ldr	r3, [sp, #8]
 8007f66:	2b0e      	cmp	r3, #14
 8007f68:	f200 80a8 	bhi.w	80080bc <_dtoa_r+0x47c>
 8007f6c:	2c00      	cmp	r4, #0
 8007f6e:	f000 80a5 	beq.w	80080bc <_dtoa_r+0x47c>
 8007f72:	f1b9 0f00 	cmp.w	r9, #0
 8007f76:	dd34      	ble.n	8007fe2 <_dtoa_r+0x3a2>
 8007f78:	4a9a      	ldr	r2, [pc, #616]	; (80081e4 <_dtoa_r+0x5a4>)
 8007f7a:	f009 030f 	and.w	r3, r9, #15
 8007f7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f82:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007f86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007f8e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007f92:	d016      	beq.n	8007fc2 <_dtoa_r+0x382>
 8007f94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f98:	4b93      	ldr	r3, [pc, #588]	; (80081e8 <_dtoa_r+0x5a8>)
 8007f9a:	2703      	movs	r7, #3
 8007f9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fa0:	f7f8 fbc4 	bl	800072c <__aeabi_ddiv>
 8007fa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fa8:	f004 040f 	and.w	r4, r4, #15
 8007fac:	4e8e      	ldr	r6, [pc, #568]	; (80081e8 <_dtoa_r+0x5a8>)
 8007fae:	b954      	cbnz	r4, 8007fc6 <_dtoa_r+0x386>
 8007fb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fb8:	f7f8 fbb8 	bl	800072c <__aeabi_ddiv>
 8007fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fc0:	e029      	b.n	8008016 <_dtoa_r+0x3d6>
 8007fc2:	2702      	movs	r7, #2
 8007fc4:	e7f2      	b.n	8007fac <_dtoa_r+0x36c>
 8007fc6:	07e1      	lsls	r1, r4, #31
 8007fc8:	d508      	bpl.n	8007fdc <_dtoa_r+0x39c>
 8007fca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007fce:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fd2:	f7f8 fa81 	bl	80004d8 <__aeabi_dmul>
 8007fd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007fda:	3701      	adds	r7, #1
 8007fdc:	1064      	asrs	r4, r4, #1
 8007fde:	3608      	adds	r6, #8
 8007fe0:	e7e5      	b.n	8007fae <_dtoa_r+0x36e>
 8007fe2:	f000 80a5 	beq.w	8008130 <_dtoa_r+0x4f0>
 8007fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fea:	f1c9 0400 	rsb	r4, r9, #0
 8007fee:	4b7d      	ldr	r3, [pc, #500]	; (80081e4 <_dtoa_r+0x5a4>)
 8007ff0:	f004 020f 	and.w	r2, r4, #15
 8007ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	f7f8 fa6c 	bl	80004d8 <__aeabi_dmul>
 8008000:	2702      	movs	r7, #2
 8008002:	2300      	movs	r3, #0
 8008004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008008:	4e77      	ldr	r6, [pc, #476]	; (80081e8 <_dtoa_r+0x5a8>)
 800800a:	1124      	asrs	r4, r4, #4
 800800c:	2c00      	cmp	r4, #0
 800800e:	f040 8084 	bne.w	800811a <_dtoa_r+0x4da>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1d2      	bne.n	8007fbc <_dtoa_r+0x37c>
 8008016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 808b 	beq.w	8008134 <_dtoa_r+0x4f4>
 800801e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008022:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008026:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800802a:	2200      	movs	r2, #0
 800802c:	4b6f      	ldr	r3, [pc, #444]	; (80081ec <_dtoa_r+0x5ac>)
 800802e:	f7f8 fcc5 	bl	80009bc <__aeabi_dcmplt>
 8008032:	2800      	cmp	r0, #0
 8008034:	d07e      	beq.n	8008134 <_dtoa_r+0x4f4>
 8008036:	9b02      	ldr	r3, [sp, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d07b      	beq.n	8008134 <_dtoa_r+0x4f4>
 800803c:	f1bb 0f00 	cmp.w	fp, #0
 8008040:	dd38      	ble.n	80080b4 <_dtoa_r+0x474>
 8008042:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008046:	2200      	movs	r2, #0
 8008048:	4b69      	ldr	r3, [pc, #420]	; (80081f0 <_dtoa_r+0x5b0>)
 800804a:	f7f8 fa45 	bl	80004d8 <__aeabi_dmul>
 800804e:	465c      	mov	r4, fp
 8008050:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008054:	f109 38ff 	add.w	r8, r9, #4294967295
 8008058:	3701      	adds	r7, #1
 800805a:	4638      	mov	r0, r7
 800805c:	f7f8 f9d2 	bl	8000404 <__aeabi_i2d>
 8008060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008064:	f7f8 fa38 	bl	80004d8 <__aeabi_dmul>
 8008068:	2200      	movs	r2, #0
 800806a:	4b62      	ldr	r3, [pc, #392]	; (80081f4 <_dtoa_r+0x5b4>)
 800806c:	f7f8 f87e 	bl	800016c <__adddf3>
 8008070:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008074:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008078:	9611      	str	r6, [sp, #68]	; 0x44
 800807a:	2c00      	cmp	r4, #0
 800807c:	d15d      	bne.n	800813a <_dtoa_r+0x4fa>
 800807e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008082:	2200      	movs	r2, #0
 8008084:	4b5c      	ldr	r3, [pc, #368]	; (80081f8 <_dtoa_r+0x5b8>)
 8008086:	f7f8 f86f 	bl	8000168 <__aeabi_dsub>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008092:	4633      	mov	r3, r6
 8008094:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008096:	f7f8 fcaf 	bl	80009f8 <__aeabi_dcmpgt>
 800809a:	2800      	cmp	r0, #0
 800809c:	f040 829e 	bne.w	80085dc <_dtoa_r+0x99c>
 80080a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80080aa:	f7f8 fc87 	bl	80009bc <__aeabi_dcmplt>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f040 8292 	bne.w	80085d8 <_dtoa_r+0x998>
 80080b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80080b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80080bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f2c0 8153 	blt.w	800836a <_dtoa_r+0x72a>
 80080c4:	f1b9 0f0e 	cmp.w	r9, #14
 80080c8:	f300 814f 	bgt.w	800836a <_dtoa_r+0x72a>
 80080cc:	4b45      	ldr	r3, [pc, #276]	; (80081e4 <_dtoa_r+0x5a4>)
 80080ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80080d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80080da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f280 80db 	bge.w	8008298 <_dtoa_r+0x658>
 80080e2:	9b02      	ldr	r3, [sp, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f300 80d7 	bgt.w	8008298 <_dtoa_r+0x658>
 80080ea:	f040 8274 	bne.w	80085d6 <_dtoa_r+0x996>
 80080ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080f2:	2200      	movs	r2, #0
 80080f4:	4b40      	ldr	r3, [pc, #256]	; (80081f8 <_dtoa_r+0x5b8>)
 80080f6:	f7f8 f9ef 	bl	80004d8 <__aeabi_dmul>
 80080fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080fe:	f7f8 fc71 	bl	80009e4 <__aeabi_dcmpge>
 8008102:	9c02      	ldr	r4, [sp, #8]
 8008104:	4626      	mov	r6, r4
 8008106:	2800      	cmp	r0, #0
 8008108:	f040 824a 	bne.w	80085a0 <_dtoa_r+0x960>
 800810c:	2331      	movs	r3, #49	; 0x31
 800810e:	9f08      	ldr	r7, [sp, #32]
 8008110:	f109 0901 	add.w	r9, r9, #1
 8008114:	f807 3b01 	strb.w	r3, [r7], #1
 8008118:	e246      	b.n	80085a8 <_dtoa_r+0x968>
 800811a:	07e2      	lsls	r2, r4, #31
 800811c:	d505      	bpl.n	800812a <_dtoa_r+0x4ea>
 800811e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008122:	f7f8 f9d9 	bl	80004d8 <__aeabi_dmul>
 8008126:	2301      	movs	r3, #1
 8008128:	3701      	adds	r7, #1
 800812a:	1064      	asrs	r4, r4, #1
 800812c:	3608      	adds	r6, #8
 800812e:	e76d      	b.n	800800c <_dtoa_r+0x3cc>
 8008130:	2702      	movs	r7, #2
 8008132:	e770      	b.n	8008016 <_dtoa_r+0x3d6>
 8008134:	46c8      	mov	r8, r9
 8008136:	9c02      	ldr	r4, [sp, #8]
 8008138:	e78f      	b.n	800805a <_dtoa_r+0x41a>
 800813a:	9908      	ldr	r1, [sp, #32]
 800813c:	4b29      	ldr	r3, [pc, #164]	; (80081e4 <_dtoa_r+0x5a4>)
 800813e:	4421      	add	r1, r4
 8008140:	9112      	str	r1, [sp, #72]	; 0x48
 8008142:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008144:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008148:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800814c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008150:	2900      	cmp	r1, #0
 8008152:	d055      	beq.n	8008200 <_dtoa_r+0x5c0>
 8008154:	2000      	movs	r0, #0
 8008156:	4929      	ldr	r1, [pc, #164]	; (80081fc <_dtoa_r+0x5bc>)
 8008158:	f7f8 fae8 	bl	800072c <__aeabi_ddiv>
 800815c:	463b      	mov	r3, r7
 800815e:	4632      	mov	r2, r6
 8008160:	f7f8 f802 	bl	8000168 <__aeabi_dsub>
 8008164:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008168:	9f08      	ldr	r7, [sp, #32]
 800816a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800816e:	f7f8 fc63 	bl	8000a38 <__aeabi_d2iz>
 8008172:	4604      	mov	r4, r0
 8008174:	f7f8 f946 	bl	8000404 <__aeabi_i2d>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008180:	f7f7 fff2 	bl	8000168 <__aeabi_dsub>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	3430      	adds	r4, #48	; 0x30
 800818a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800818e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008192:	f807 4b01 	strb.w	r4, [r7], #1
 8008196:	f7f8 fc11 	bl	80009bc <__aeabi_dcmplt>
 800819a:	2800      	cmp	r0, #0
 800819c:	d174      	bne.n	8008288 <_dtoa_r+0x648>
 800819e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081a2:	2000      	movs	r0, #0
 80081a4:	4911      	ldr	r1, [pc, #68]	; (80081ec <_dtoa_r+0x5ac>)
 80081a6:	f7f7 ffdf 	bl	8000168 <__aeabi_dsub>
 80081aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081ae:	f7f8 fc05 	bl	80009bc <__aeabi_dcmplt>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	f040 80b6 	bne.w	8008324 <_dtoa_r+0x6e4>
 80081b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081ba:	429f      	cmp	r7, r3
 80081bc:	f43f af7a 	beq.w	80080b4 <_dtoa_r+0x474>
 80081c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081c4:	2200      	movs	r2, #0
 80081c6:	4b0a      	ldr	r3, [pc, #40]	; (80081f0 <_dtoa_r+0x5b0>)
 80081c8:	f7f8 f986 	bl	80004d8 <__aeabi_dmul>
 80081cc:	2200      	movs	r2, #0
 80081ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081d6:	4b06      	ldr	r3, [pc, #24]	; (80081f0 <_dtoa_r+0x5b0>)
 80081d8:	f7f8 f97e 	bl	80004d8 <__aeabi_dmul>
 80081dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081e0:	e7c3      	b.n	800816a <_dtoa_r+0x52a>
 80081e2:	bf00      	nop
 80081e4:	0800ac30 	.word	0x0800ac30
 80081e8:	0800ac08 	.word	0x0800ac08
 80081ec:	3ff00000 	.word	0x3ff00000
 80081f0:	40240000 	.word	0x40240000
 80081f4:	401c0000 	.word	0x401c0000
 80081f8:	40140000 	.word	0x40140000
 80081fc:	3fe00000 	.word	0x3fe00000
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 f968 	bl	80004d8 <__aeabi_dmul>
 8008208:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800820a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800820e:	9c08      	ldr	r4, [sp, #32]
 8008210:	9314      	str	r3, [sp, #80]	; 0x50
 8008212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008216:	f7f8 fc0f 	bl	8000a38 <__aeabi_d2iz>
 800821a:	9015      	str	r0, [sp, #84]	; 0x54
 800821c:	f7f8 f8f2 	bl	8000404 <__aeabi_i2d>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008228:	f7f7 ff9e 	bl	8000168 <__aeabi_dsub>
 800822c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800822e:	4606      	mov	r6, r0
 8008230:	3330      	adds	r3, #48	; 0x30
 8008232:	f804 3b01 	strb.w	r3, [r4], #1
 8008236:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008238:	460f      	mov	r7, r1
 800823a:	429c      	cmp	r4, r3
 800823c:	f04f 0200 	mov.w	r2, #0
 8008240:	d124      	bne.n	800828c <_dtoa_r+0x64c>
 8008242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008246:	4bb3      	ldr	r3, [pc, #716]	; (8008514 <_dtoa_r+0x8d4>)
 8008248:	f7f7 ff90 	bl	800016c <__adddf3>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4630      	mov	r0, r6
 8008252:	4639      	mov	r1, r7
 8008254:	f7f8 fbd0 	bl	80009f8 <__aeabi_dcmpgt>
 8008258:	2800      	cmp	r0, #0
 800825a:	d162      	bne.n	8008322 <_dtoa_r+0x6e2>
 800825c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008260:	2000      	movs	r0, #0
 8008262:	49ac      	ldr	r1, [pc, #688]	; (8008514 <_dtoa_r+0x8d4>)
 8008264:	f7f7 ff80 	bl	8000168 <__aeabi_dsub>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	4630      	mov	r0, r6
 800826e:	4639      	mov	r1, r7
 8008270:	f7f8 fba4 	bl	80009bc <__aeabi_dcmplt>
 8008274:	2800      	cmp	r0, #0
 8008276:	f43f af1d 	beq.w	80080b4 <_dtoa_r+0x474>
 800827a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800827c:	1e7b      	subs	r3, r7, #1
 800827e:	9314      	str	r3, [sp, #80]	; 0x50
 8008280:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008284:	2b30      	cmp	r3, #48	; 0x30
 8008286:	d0f8      	beq.n	800827a <_dtoa_r+0x63a>
 8008288:	46c1      	mov	r9, r8
 800828a:	e03a      	b.n	8008302 <_dtoa_r+0x6c2>
 800828c:	4ba2      	ldr	r3, [pc, #648]	; (8008518 <_dtoa_r+0x8d8>)
 800828e:	f7f8 f923 	bl	80004d8 <__aeabi_dmul>
 8008292:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008296:	e7bc      	b.n	8008212 <_dtoa_r+0x5d2>
 8008298:	9f08      	ldr	r7, [sp, #32]
 800829a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800829e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082a2:	f7f8 fa43 	bl	800072c <__aeabi_ddiv>
 80082a6:	f7f8 fbc7 	bl	8000a38 <__aeabi_d2iz>
 80082aa:	4604      	mov	r4, r0
 80082ac:	f7f8 f8aa 	bl	8000404 <__aeabi_i2d>
 80082b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082b4:	f7f8 f910 	bl	80004d8 <__aeabi_dmul>
 80082b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80082bc:	460b      	mov	r3, r1
 80082be:	4602      	mov	r2, r0
 80082c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082c4:	f7f7 ff50 	bl	8000168 <__aeabi_dsub>
 80082c8:	f807 6b01 	strb.w	r6, [r7], #1
 80082cc:	9e08      	ldr	r6, [sp, #32]
 80082ce:	9b02      	ldr	r3, [sp, #8]
 80082d0:	1bbe      	subs	r6, r7, r6
 80082d2:	42b3      	cmp	r3, r6
 80082d4:	d13a      	bne.n	800834c <_dtoa_r+0x70c>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	f7f7 ff47 	bl	800016c <__adddf3>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082ea:	f7f8 fb85 	bl	80009f8 <__aeabi_dcmpgt>
 80082ee:	bb58      	cbnz	r0, 8008348 <_dtoa_r+0x708>
 80082f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082f8:	f7f8 fb56 	bl	80009a8 <__aeabi_dcmpeq>
 80082fc:	b108      	cbz	r0, 8008302 <_dtoa_r+0x6c2>
 80082fe:	07e1      	lsls	r1, r4, #31
 8008300:	d422      	bmi.n	8008348 <_dtoa_r+0x708>
 8008302:	4628      	mov	r0, r5
 8008304:	4651      	mov	r1, sl
 8008306:	f000 fe69 	bl	8008fdc <_Bfree>
 800830a:	2300      	movs	r3, #0
 800830c:	703b      	strb	r3, [r7, #0]
 800830e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008310:	f109 0001 	add.w	r0, r9, #1
 8008314:	6018      	str	r0, [r3, #0]
 8008316:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008318:	2b00      	cmp	r3, #0
 800831a:	f43f acdf 	beq.w	8007cdc <_dtoa_r+0x9c>
 800831e:	601f      	str	r7, [r3, #0]
 8008320:	e4dc      	b.n	8007cdc <_dtoa_r+0x9c>
 8008322:	4627      	mov	r7, r4
 8008324:	463b      	mov	r3, r7
 8008326:	461f      	mov	r7, r3
 8008328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800832c:	2a39      	cmp	r2, #57	; 0x39
 800832e:	d107      	bne.n	8008340 <_dtoa_r+0x700>
 8008330:	9a08      	ldr	r2, [sp, #32]
 8008332:	429a      	cmp	r2, r3
 8008334:	d1f7      	bne.n	8008326 <_dtoa_r+0x6e6>
 8008336:	2230      	movs	r2, #48	; 0x30
 8008338:	9908      	ldr	r1, [sp, #32]
 800833a:	f108 0801 	add.w	r8, r8, #1
 800833e:	700a      	strb	r2, [r1, #0]
 8008340:	781a      	ldrb	r2, [r3, #0]
 8008342:	3201      	adds	r2, #1
 8008344:	701a      	strb	r2, [r3, #0]
 8008346:	e79f      	b.n	8008288 <_dtoa_r+0x648>
 8008348:	46c8      	mov	r8, r9
 800834a:	e7eb      	b.n	8008324 <_dtoa_r+0x6e4>
 800834c:	2200      	movs	r2, #0
 800834e:	4b72      	ldr	r3, [pc, #456]	; (8008518 <_dtoa_r+0x8d8>)
 8008350:	f7f8 f8c2 	bl	80004d8 <__aeabi_dmul>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800835c:	2200      	movs	r2, #0
 800835e:	2300      	movs	r3, #0
 8008360:	f7f8 fb22 	bl	80009a8 <__aeabi_dcmpeq>
 8008364:	2800      	cmp	r0, #0
 8008366:	d098      	beq.n	800829a <_dtoa_r+0x65a>
 8008368:	e7cb      	b.n	8008302 <_dtoa_r+0x6c2>
 800836a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800836c:	2a00      	cmp	r2, #0
 800836e:	f000 80cd 	beq.w	800850c <_dtoa_r+0x8cc>
 8008372:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008374:	2a01      	cmp	r2, #1
 8008376:	f300 80af 	bgt.w	80084d8 <_dtoa_r+0x898>
 800837a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800837c:	2a00      	cmp	r2, #0
 800837e:	f000 80a7 	beq.w	80084d0 <_dtoa_r+0x890>
 8008382:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008386:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008388:	9f06      	ldr	r7, [sp, #24]
 800838a:	9a06      	ldr	r2, [sp, #24]
 800838c:	2101      	movs	r1, #1
 800838e:	441a      	add	r2, r3
 8008390:	9206      	str	r2, [sp, #24]
 8008392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008394:	4628      	mov	r0, r5
 8008396:	441a      	add	r2, r3
 8008398:	9209      	str	r2, [sp, #36]	; 0x24
 800839a:	f000 ff23 	bl	80091e4 <__i2b>
 800839e:	4606      	mov	r6, r0
 80083a0:	2f00      	cmp	r7, #0
 80083a2:	dd0c      	ble.n	80083be <_dtoa_r+0x77e>
 80083a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	dd09      	ble.n	80083be <_dtoa_r+0x77e>
 80083aa:	42bb      	cmp	r3, r7
 80083ac:	bfa8      	it	ge
 80083ae:	463b      	movge	r3, r7
 80083b0:	9a06      	ldr	r2, [sp, #24]
 80083b2:	1aff      	subs	r7, r7, r3
 80083b4:	1ad2      	subs	r2, r2, r3
 80083b6:	9206      	str	r2, [sp, #24]
 80083b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	9309      	str	r3, [sp, #36]	; 0x24
 80083be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c0:	b1f3      	cbz	r3, 8008400 <_dtoa_r+0x7c0>
 80083c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 80a9 	beq.w	800851c <_dtoa_r+0x8dc>
 80083ca:	2c00      	cmp	r4, #0
 80083cc:	dd10      	ble.n	80083f0 <_dtoa_r+0x7b0>
 80083ce:	4631      	mov	r1, r6
 80083d0:	4622      	mov	r2, r4
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 ffc0 	bl	8009358 <__pow5mult>
 80083d8:	4652      	mov	r2, sl
 80083da:	4601      	mov	r1, r0
 80083dc:	4606      	mov	r6, r0
 80083de:	4628      	mov	r0, r5
 80083e0:	f000 ff16 	bl	8009210 <__multiply>
 80083e4:	4680      	mov	r8, r0
 80083e6:	4651      	mov	r1, sl
 80083e8:	4628      	mov	r0, r5
 80083ea:	f000 fdf7 	bl	8008fdc <_Bfree>
 80083ee:	46c2      	mov	sl, r8
 80083f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f2:	1b1a      	subs	r2, r3, r4
 80083f4:	d004      	beq.n	8008400 <_dtoa_r+0x7c0>
 80083f6:	4651      	mov	r1, sl
 80083f8:	4628      	mov	r0, r5
 80083fa:	f000 ffad 	bl	8009358 <__pow5mult>
 80083fe:	4682      	mov	sl, r0
 8008400:	2101      	movs	r1, #1
 8008402:	4628      	mov	r0, r5
 8008404:	f000 feee 	bl	80091e4 <__i2b>
 8008408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800840a:	4604      	mov	r4, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	f340 8087 	ble.w	8008520 <_dtoa_r+0x8e0>
 8008412:	461a      	mov	r2, r3
 8008414:	4601      	mov	r1, r0
 8008416:	4628      	mov	r0, r5
 8008418:	f000 ff9e 	bl	8009358 <__pow5mult>
 800841c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800841e:	4604      	mov	r4, r0
 8008420:	2b01      	cmp	r3, #1
 8008422:	f340 8080 	ble.w	8008526 <_dtoa_r+0x8e6>
 8008426:	f04f 0800 	mov.w	r8, #0
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008430:	6918      	ldr	r0, [r3, #16]
 8008432:	f000 fe89 	bl	8009148 <__hi0bits>
 8008436:	f1c0 0020 	rsb	r0, r0, #32
 800843a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843c:	4418      	add	r0, r3
 800843e:	f010 001f 	ands.w	r0, r0, #31
 8008442:	f000 8092 	beq.w	800856a <_dtoa_r+0x92a>
 8008446:	f1c0 0320 	rsb	r3, r0, #32
 800844a:	2b04      	cmp	r3, #4
 800844c:	f340 808a 	ble.w	8008564 <_dtoa_r+0x924>
 8008450:	f1c0 001c 	rsb	r0, r0, #28
 8008454:	9b06      	ldr	r3, [sp, #24]
 8008456:	4407      	add	r7, r0
 8008458:	4403      	add	r3, r0
 800845a:	9306      	str	r3, [sp, #24]
 800845c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845e:	4403      	add	r3, r0
 8008460:	9309      	str	r3, [sp, #36]	; 0x24
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dd05      	ble.n	8008474 <_dtoa_r+0x834>
 8008468:	4651      	mov	r1, sl
 800846a:	461a      	mov	r2, r3
 800846c:	4628      	mov	r0, r5
 800846e:	f000 ffcd 	bl	800940c <__lshift>
 8008472:	4682      	mov	sl, r0
 8008474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008476:	2b00      	cmp	r3, #0
 8008478:	dd05      	ble.n	8008486 <_dtoa_r+0x846>
 800847a:	4621      	mov	r1, r4
 800847c:	461a      	mov	r2, r3
 800847e:	4628      	mov	r0, r5
 8008480:	f000 ffc4 	bl	800940c <__lshift>
 8008484:	4604      	mov	r4, r0
 8008486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008488:	2b00      	cmp	r3, #0
 800848a:	d070      	beq.n	800856e <_dtoa_r+0x92e>
 800848c:	4621      	mov	r1, r4
 800848e:	4650      	mov	r0, sl
 8008490:	f001 f828 	bl	80094e4 <__mcmp>
 8008494:	2800      	cmp	r0, #0
 8008496:	da6a      	bge.n	800856e <_dtoa_r+0x92e>
 8008498:	2300      	movs	r3, #0
 800849a:	4651      	mov	r1, sl
 800849c:	220a      	movs	r2, #10
 800849e:	4628      	mov	r0, r5
 80084a0:	f000 fdbe 	bl	8009020 <__multadd>
 80084a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084a6:	4682      	mov	sl, r0
 80084a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 8193 	beq.w	80087d8 <_dtoa_r+0xb98>
 80084b2:	4631      	mov	r1, r6
 80084b4:	2300      	movs	r3, #0
 80084b6:	220a      	movs	r2, #10
 80084b8:	4628      	mov	r0, r5
 80084ba:	f000 fdb1 	bl	8009020 <__multadd>
 80084be:	f1bb 0f00 	cmp.w	fp, #0
 80084c2:	4606      	mov	r6, r0
 80084c4:	f300 8093 	bgt.w	80085ee <_dtoa_r+0x9ae>
 80084c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	dc57      	bgt.n	800857e <_dtoa_r+0x93e>
 80084ce:	e08e      	b.n	80085ee <_dtoa_r+0x9ae>
 80084d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80084d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80084d6:	e756      	b.n	8008386 <_dtoa_r+0x746>
 80084d8:	9b02      	ldr	r3, [sp, #8]
 80084da:	1e5c      	subs	r4, r3, #1
 80084dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084de:	42a3      	cmp	r3, r4
 80084e0:	bfb7      	itett	lt
 80084e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80084e4:	1b1c      	subge	r4, r3, r4
 80084e6:	1ae2      	sublt	r2, r4, r3
 80084e8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80084ea:	bfbe      	ittt	lt
 80084ec:	940a      	strlt	r4, [sp, #40]	; 0x28
 80084ee:	189b      	addlt	r3, r3, r2
 80084f0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80084f2:	9b02      	ldr	r3, [sp, #8]
 80084f4:	bfb8      	it	lt
 80084f6:	2400      	movlt	r4, #0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bfbb      	ittet	lt
 80084fc:	9b06      	ldrlt	r3, [sp, #24]
 80084fe:	9a02      	ldrlt	r2, [sp, #8]
 8008500:	9f06      	ldrge	r7, [sp, #24]
 8008502:	1a9f      	sublt	r7, r3, r2
 8008504:	bfac      	ite	ge
 8008506:	9b02      	ldrge	r3, [sp, #8]
 8008508:	2300      	movlt	r3, #0
 800850a:	e73e      	b.n	800838a <_dtoa_r+0x74a>
 800850c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800850e:	9f06      	ldr	r7, [sp, #24]
 8008510:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008512:	e745      	b.n	80083a0 <_dtoa_r+0x760>
 8008514:	3fe00000 	.word	0x3fe00000
 8008518:	40240000 	.word	0x40240000
 800851c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800851e:	e76a      	b.n	80083f6 <_dtoa_r+0x7b6>
 8008520:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008522:	2b01      	cmp	r3, #1
 8008524:	dc19      	bgt.n	800855a <_dtoa_r+0x91a>
 8008526:	9b04      	ldr	r3, [sp, #16]
 8008528:	b9bb      	cbnz	r3, 800855a <_dtoa_r+0x91a>
 800852a:	9b05      	ldr	r3, [sp, #20]
 800852c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008530:	b99b      	cbnz	r3, 800855a <_dtoa_r+0x91a>
 8008532:	9b05      	ldr	r3, [sp, #20]
 8008534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008538:	0d1b      	lsrs	r3, r3, #20
 800853a:	051b      	lsls	r3, r3, #20
 800853c:	b183      	cbz	r3, 8008560 <_dtoa_r+0x920>
 800853e:	f04f 0801 	mov.w	r8, #1
 8008542:	9b06      	ldr	r3, [sp, #24]
 8008544:	3301      	adds	r3, #1
 8008546:	9306      	str	r3, [sp, #24]
 8008548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854a:	3301      	adds	r3, #1
 800854c:	9309      	str	r3, [sp, #36]	; 0x24
 800854e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008550:	2b00      	cmp	r3, #0
 8008552:	f47f af6a 	bne.w	800842a <_dtoa_r+0x7ea>
 8008556:	2001      	movs	r0, #1
 8008558:	e76f      	b.n	800843a <_dtoa_r+0x7fa>
 800855a:	f04f 0800 	mov.w	r8, #0
 800855e:	e7f6      	b.n	800854e <_dtoa_r+0x90e>
 8008560:	4698      	mov	r8, r3
 8008562:	e7f4      	b.n	800854e <_dtoa_r+0x90e>
 8008564:	f43f af7d 	beq.w	8008462 <_dtoa_r+0x822>
 8008568:	4618      	mov	r0, r3
 800856a:	301c      	adds	r0, #28
 800856c:	e772      	b.n	8008454 <_dtoa_r+0x814>
 800856e:	9b02      	ldr	r3, [sp, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	dc36      	bgt.n	80085e2 <_dtoa_r+0x9a2>
 8008574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008576:	2b02      	cmp	r3, #2
 8008578:	dd33      	ble.n	80085e2 <_dtoa_r+0x9a2>
 800857a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800857e:	f1bb 0f00 	cmp.w	fp, #0
 8008582:	d10d      	bne.n	80085a0 <_dtoa_r+0x960>
 8008584:	4621      	mov	r1, r4
 8008586:	465b      	mov	r3, fp
 8008588:	2205      	movs	r2, #5
 800858a:	4628      	mov	r0, r5
 800858c:	f000 fd48 	bl	8009020 <__multadd>
 8008590:	4601      	mov	r1, r0
 8008592:	4604      	mov	r4, r0
 8008594:	4650      	mov	r0, sl
 8008596:	f000 ffa5 	bl	80094e4 <__mcmp>
 800859a:	2800      	cmp	r0, #0
 800859c:	f73f adb6 	bgt.w	800810c <_dtoa_r+0x4cc>
 80085a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085a2:	9f08      	ldr	r7, [sp, #32]
 80085a4:	ea6f 0903 	mvn.w	r9, r3
 80085a8:	f04f 0800 	mov.w	r8, #0
 80085ac:	4621      	mov	r1, r4
 80085ae:	4628      	mov	r0, r5
 80085b0:	f000 fd14 	bl	8008fdc <_Bfree>
 80085b4:	2e00      	cmp	r6, #0
 80085b6:	f43f aea4 	beq.w	8008302 <_dtoa_r+0x6c2>
 80085ba:	f1b8 0f00 	cmp.w	r8, #0
 80085be:	d005      	beq.n	80085cc <_dtoa_r+0x98c>
 80085c0:	45b0      	cmp	r8, r6
 80085c2:	d003      	beq.n	80085cc <_dtoa_r+0x98c>
 80085c4:	4641      	mov	r1, r8
 80085c6:	4628      	mov	r0, r5
 80085c8:	f000 fd08 	bl	8008fdc <_Bfree>
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	f000 fd04 	bl	8008fdc <_Bfree>
 80085d4:	e695      	b.n	8008302 <_dtoa_r+0x6c2>
 80085d6:	2400      	movs	r4, #0
 80085d8:	4626      	mov	r6, r4
 80085da:	e7e1      	b.n	80085a0 <_dtoa_r+0x960>
 80085dc:	46c1      	mov	r9, r8
 80085de:	4626      	mov	r6, r4
 80085e0:	e594      	b.n	800810c <_dtoa_r+0x4cc>
 80085e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 80fc 	beq.w	80087e6 <_dtoa_r+0xba6>
 80085ee:	2f00      	cmp	r7, #0
 80085f0:	dd05      	ble.n	80085fe <_dtoa_r+0x9be>
 80085f2:	4631      	mov	r1, r6
 80085f4:	463a      	mov	r2, r7
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 ff08 	bl	800940c <__lshift>
 80085fc:	4606      	mov	r6, r0
 80085fe:	f1b8 0f00 	cmp.w	r8, #0
 8008602:	d05c      	beq.n	80086be <_dtoa_r+0xa7e>
 8008604:	4628      	mov	r0, r5
 8008606:	6871      	ldr	r1, [r6, #4]
 8008608:	f000 fca8 	bl	8008f5c <_Balloc>
 800860c:	4607      	mov	r7, r0
 800860e:	b928      	cbnz	r0, 800861c <_dtoa_r+0x9dc>
 8008610:	4602      	mov	r2, r0
 8008612:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008616:	4b7e      	ldr	r3, [pc, #504]	; (8008810 <_dtoa_r+0xbd0>)
 8008618:	f7ff bb26 	b.w	8007c68 <_dtoa_r+0x28>
 800861c:	6932      	ldr	r2, [r6, #16]
 800861e:	f106 010c 	add.w	r1, r6, #12
 8008622:	3202      	adds	r2, #2
 8008624:	0092      	lsls	r2, r2, #2
 8008626:	300c      	adds	r0, #12
 8008628:	f000 fc8a 	bl	8008f40 <memcpy>
 800862c:	2201      	movs	r2, #1
 800862e:	4639      	mov	r1, r7
 8008630:	4628      	mov	r0, r5
 8008632:	f000 feeb 	bl	800940c <__lshift>
 8008636:	46b0      	mov	r8, r6
 8008638:	4606      	mov	r6, r0
 800863a:	9b08      	ldr	r3, [sp, #32]
 800863c:	3301      	adds	r3, #1
 800863e:	9302      	str	r3, [sp, #8]
 8008640:	9b08      	ldr	r3, [sp, #32]
 8008642:	445b      	add	r3, fp
 8008644:	930a      	str	r3, [sp, #40]	; 0x28
 8008646:	9b04      	ldr	r3, [sp, #16]
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	9309      	str	r3, [sp, #36]	; 0x24
 800864e:	9b02      	ldr	r3, [sp, #8]
 8008650:	4621      	mov	r1, r4
 8008652:	4650      	mov	r0, sl
 8008654:	f103 3bff 	add.w	fp, r3, #4294967295
 8008658:	f7ff fa62 	bl	8007b20 <quorem>
 800865c:	4603      	mov	r3, r0
 800865e:	4641      	mov	r1, r8
 8008660:	3330      	adds	r3, #48	; 0x30
 8008662:	9004      	str	r0, [sp, #16]
 8008664:	4650      	mov	r0, sl
 8008666:	930b      	str	r3, [sp, #44]	; 0x2c
 8008668:	f000 ff3c 	bl	80094e4 <__mcmp>
 800866c:	4632      	mov	r2, r6
 800866e:	9006      	str	r0, [sp, #24]
 8008670:	4621      	mov	r1, r4
 8008672:	4628      	mov	r0, r5
 8008674:	f000 ff52 	bl	800951c <__mdiff>
 8008678:	68c2      	ldr	r2, [r0, #12]
 800867a:	4607      	mov	r7, r0
 800867c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800867e:	bb02      	cbnz	r2, 80086c2 <_dtoa_r+0xa82>
 8008680:	4601      	mov	r1, r0
 8008682:	4650      	mov	r0, sl
 8008684:	f000 ff2e 	bl	80094e4 <__mcmp>
 8008688:	4602      	mov	r2, r0
 800868a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800868c:	4639      	mov	r1, r7
 800868e:	4628      	mov	r0, r5
 8008690:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008694:	f000 fca2 	bl	8008fdc <_Bfree>
 8008698:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800869a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800869c:	9f02      	ldr	r7, [sp, #8]
 800869e:	ea43 0102 	orr.w	r1, r3, r2
 80086a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a4:	430b      	orrs	r3, r1
 80086a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a8:	d10d      	bne.n	80086c6 <_dtoa_r+0xa86>
 80086aa:	2b39      	cmp	r3, #57	; 0x39
 80086ac:	d027      	beq.n	80086fe <_dtoa_r+0xabe>
 80086ae:	9a06      	ldr	r2, [sp, #24]
 80086b0:	2a00      	cmp	r2, #0
 80086b2:	dd01      	ble.n	80086b8 <_dtoa_r+0xa78>
 80086b4:	9b04      	ldr	r3, [sp, #16]
 80086b6:	3331      	adds	r3, #49	; 0x31
 80086b8:	f88b 3000 	strb.w	r3, [fp]
 80086bc:	e776      	b.n	80085ac <_dtoa_r+0x96c>
 80086be:	4630      	mov	r0, r6
 80086c0:	e7b9      	b.n	8008636 <_dtoa_r+0x9f6>
 80086c2:	2201      	movs	r2, #1
 80086c4:	e7e2      	b.n	800868c <_dtoa_r+0xa4c>
 80086c6:	9906      	ldr	r1, [sp, #24]
 80086c8:	2900      	cmp	r1, #0
 80086ca:	db04      	blt.n	80086d6 <_dtoa_r+0xa96>
 80086cc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80086ce:	4301      	orrs	r1, r0
 80086d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086d2:	4301      	orrs	r1, r0
 80086d4:	d120      	bne.n	8008718 <_dtoa_r+0xad8>
 80086d6:	2a00      	cmp	r2, #0
 80086d8:	ddee      	ble.n	80086b8 <_dtoa_r+0xa78>
 80086da:	4651      	mov	r1, sl
 80086dc:	2201      	movs	r2, #1
 80086de:	4628      	mov	r0, r5
 80086e0:	9302      	str	r3, [sp, #8]
 80086e2:	f000 fe93 	bl	800940c <__lshift>
 80086e6:	4621      	mov	r1, r4
 80086e8:	4682      	mov	sl, r0
 80086ea:	f000 fefb 	bl	80094e4 <__mcmp>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	9b02      	ldr	r3, [sp, #8]
 80086f2:	dc02      	bgt.n	80086fa <_dtoa_r+0xaba>
 80086f4:	d1e0      	bne.n	80086b8 <_dtoa_r+0xa78>
 80086f6:	07da      	lsls	r2, r3, #31
 80086f8:	d5de      	bpl.n	80086b8 <_dtoa_r+0xa78>
 80086fa:	2b39      	cmp	r3, #57	; 0x39
 80086fc:	d1da      	bne.n	80086b4 <_dtoa_r+0xa74>
 80086fe:	2339      	movs	r3, #57	; 0x39
 8008700:	f88b 3000 	strb.w	r3, [fp]
 8008704:	463b      	mov	r3, r7
 8008706:	461f      	mov	r7, r3
 8008708:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800870c:	3b01      	subs	r3, #1
 800870e:	2a39      	cmp	r2, #57	; 0x39
 8008710:	d050      	beq.n	80087b4 <_dtoa_r+0xb74>
 8008712:	3201      	adds	r2, #1
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	e749      	b.n	80085ac <_dtoa_r+0x96c>
 8008718:	2a00      	cmp	r2, #0
 800871a:	dd03      	ble.n	8008724 <_dtoa_r+0xae4>
 800871c:	2b39      	cmp	r3, #57	; 0x39
 800871e:	d0ee      	beq.n	80086fe <_dtoa_r+0xabe>
 8008720:	3301      	adds	r3, #1
 8008722:	e7c9      	b.n	80086b8 <_dtoa_r+0xa78>
 8008724:	9a02      	ldr	r2, [sp, #8]
 8008726:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008728:	f802 3c01 	strb.w	r3, [r2, #-1]
 800872c:	428a      	cmp	r2, r1
 800872e:	d02a      	beq.n	8008786 <_dtoa_r+0xb46>
 8008730:	4651      	mov	r1, sl
 8008732:	2300      	movs	r3, #0
 8008734:	220a      	movs	r2, #10
 8008736:	4628      	mov	r0, r5
 8008738:	f000 fc72 	bl	8009020 <__multadd>
 800873c:	45b0      	cmp	r8, r6
 800873e:	4682      	mov	sl, r0
 8008740:	f04f 0300 	mov.w	r3, #0
 8008744:	f04f 020a 	mov.w	r2, #10
 8008748:	4641      	mov	r1, r8
 800874a:	4628      	mov	r0, r5
 800874c:	d107      	bne.n	800875e <_dtoa_r+0xb1e>
 800874e:	f000 fc67 	bl	8009020 <__multadd>
 8008752:	4680      	mov	r8, r0
 8008754:	4606      	mov	r6, r0
 8008756:	9b02      	ldr	r3, [sp, #8]
 8008758:	3301      	adds	r3, #1
 800875a:	9302      	str	r3, [sp, #8]
 800875c:	e777      	b.n	800864e <_dtoa_r+0xa0e>
 800875e:	f000 fc5f 	bl	8009020 <__multadd>
 8008762:	4631      	mov	r1, r6
 8008764:	4680      	mov	r8, r0
 8008766:	2300      	movs	r3, #0
 8008768:	220a      	movs	r2, #10
 800876a:	4628      	mov	r0, r5
 800876c:	f000 fc58 	bl	8009020 <__multadd>
 8008770:	4606      	mov	r6, r0
 8008772:	e7f0      	b.n	8008756 <_dtoa_r+0xb16>
 8008774:	f1bb 0f00 	cmp.w	fp, #0
 8008778:	bfcc      	ite	gt
 800877a:	465f      	movgt	r7, fp
 800877c:	2701      	movle	r7, #1
 800877e:	f04f 0800 	mov.w	r8, #0
 8008782:	9a08      	ldr	r2, [sp, #32]
 8008784:	4417      	add	r7, r2
 8008786:	4651      	mov	r1, sl
 8008788:	2201      	movs	r2, #1
 800878a:	4628      	mov	r0, r5
 800878c:	9302      	str	r3, [sp, #8]
 800878e:	f000 fe3d 	bl	800940c <__lshift>
 8008792:	4621      	mov	r1, r4
 8008794:	4682      	mov	sl, r0
 8008796:	f000 fea5 	bl	80094e4 <__mcmp>
 800879a:	2800      	cmp	r0, #0
 800879c:	dcb2      	bgt.n	8008704 <_dtoa_r+0xac4>
 800879e:	d102      	bne.n	80087a6 <_dtoa_r+0xb66>
 80087a0:	9b02      	ldr	r3, [sp, #8]
 80087a2:	07db      	lsls	r3, r3, #31
 80087a4:	d4ae      	bmi.n	8008704 <_dtoa_r+0xac4>
 80087a6:	463b      	mov	r3, r7
 80087a8:	461f      	mov	r7, r3
 80087aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ae:	2a30      	cmp	r2, #48	; 0x30
 80087b0:	d0fa      	beq.n	80087a8 <_dtoa_r+0xb68>
 80087b2:	e6fb      	b.n	80085ac <_dtoa_r+0x96c>
 80087b4:	9a08      	ldr	r2, [sp, #32]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d1a5      	bne.n	8008706 <_dtoa_r+0xac6>
 80087ba:	2331      	movs	r3, #49	; 0x31
 80087bc:	f109 0901 	add.w	r9, r9, #1
 80087c0:	7013      	strb	r3, [r2, #0]
 80087c2:	e6f3      	b.n	80085ac <_dtoa_r+0x96c>
 80087c4:	4b13      	ldr	r3, [pc, #76]	; (8008814 <_dtoa_r+0xbd4>)
 80087c6:	f7ff baa7 	b.w	8007d18 <_dtoa_r+0xd8>
 80087ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f47f aa80 	bne.w	8007cd2 <_dtoa_r+0x92>
 80087d2:	4b11      	ldr	r3, [pc, #68]	; (8008818 <_dtoa_r+0xbd8>)
 80087d4:	f7ff baa0 	b.w	8007d18 <_dtoa_r+0xd8>
 80087d8:	f1bb 0f00 	cmp.w	fp, #0
 80087dc:	dc03      	bgt.n	80087e6 <_dtoa_r+0xba6>
 80087de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	f73f aecc 	bgt.w	800857e <_dtoa_r+0x93e>
 80087e6:	9f08      	ldr	r7, [sp, #32]
 80087e8:	4621      	mov	r1, r4
 80087ea:	4650      	mov	r0, sl
 80087ec:	f7ff f998 	bl	8007b20 <quorem>
 80087f0:	9a08      	ldr	r2, [sp, #32]
 80087f2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80087f6:	f807 3b01 	strb.w	r3, [r7], #1
 80087fa:	1aba      	subs	r2, r7, r2
 80087fc:	4593      	cmp	fp, r2
 80087fe:	ddb9      	ble.n	8008774 <_dtoa_r+0xb34>
 8008800:	4651      	mov	r1, sl
 8008802:	2300      	movs	r3, #0
 8008804:	220a      	movs	r2, #10
 8008806:	4628      	mov	r0, r5
 8008808:	f000 fc0a 	bl	8009020 <__multadd>
 800880c:	4682      	mov	sl, r0
 800880e:	e7eb      	b.n	80087e8 <_dtoa_r+0xba8>
 8008810:	0800ab14 	.word	0x0800ab14
 8008814:	0800a914 	.word	0x0800a914
 8008818:	0800aa91 	.word	0x0800aa91

0800881c <rshift>:
 800881c:	6903      	ldr	r3, [r0, #16]
 800881e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008822:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008826:	f100 0414 	add.w	r4, r0, #20
 800882a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800882e:	dd46      	ble.n	80088be <rshift+0xa2>
 8008830:	f011 011f 	ands.w	r1, r1, #31
 8008834:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008838:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800883c:	d10c      	bne.n	8008858 <rshift+0x3c>
 800883e:	4629      	mov	r1, r5
 8008840:	f100 0710 	add.w	r7, r0, #16
 8008844:	42b1      	cmp	r1, r6
 8008846:	d335      	bcc.n	80088b4 <rshift+0x98>
 8008848:	1a9b      	subs	r3, r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	1eea      	subs	r2, r5, #3
 800884e:	4296      	cmp	r6, r2
 8008850:	bf38      	it	cc
 8008852:	2300      	movcc	r3, #0
 8008854:	4423      	add	r3, r4
 8008856:	e015      	b.n	8008884 <rshift+0x68>
 8008858:	46a1      	mov	r9, r4
 800885a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800885e:	f1c1 0820 	rsb	r8, r1, #32
 8008862:	40cf      	lsrs	r7, r1
 8008864:	f105 0e04 	add.w	lr, r5, #4
 8008868:	4576      	cmp	r6, lr
 800886a:	46f4      	mov	ip, lr
 800886c:	d816      	bhi.n	800889c <rshift+0x80>
 800886e:	1a9b      	subs	r3, r3, r2
 8008870:	009a      	lsls	r2, r3, #2
 8008872:	3a04      	subs	r2, #4
 8008874:	3501      	adds	r5, #1
 8008876:	42ae      	cmp	r6, r5
 8008878:	bf38      	it	cc
 800887a:	2200      	movcc	r2, #0
 800887c:	18a3      	adds	r3, r4, r2
 800887e:	50a7      	str	r7, [r4, r2]
 8008880:	b107      	cbz	r7, 8008884 <rshift+0x68>
 8008882:	3304      	adds	r3, #4
 8008884:	42a3      	cmp	r3, r4
 8008886:	eba3 0204 	sub.w	r2, r3, r4
 800888a:	bf08      	it	eq
 800888c:	2300      	moveq	r3, #0
 800888e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008892:	6102      	str	r2, [r0, #16]
 8008894:	bf08      	it	eq
 8008896:	6143      	streq	r3, [r0, #20]
 8008898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800889c:	f8dc c000 	ldr.w	ip, [ip]
 80088a0:	fa0c fc08 	lsl.w	ip, ip, r8
 80088a4:	ea4c 0707 	orr.w	r7, ip, r7
 80088a8:	f849 7b04 	str.w	r7, [r9], #4
 80088ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088b0:	40cf      	lsrs	r7, r1
 80088b2:	e7d9      	b.n	8008868 <rshift+0x4c>
 80088b4:	f851 cb04 	ldr.w	ip, [r1], #4
 80088b8:	f847 cf04 	str.w	ip, [r7, #4]!
 80088bc:	e7c2      	b.n	8008844 <rshift+0x28>
 80088be:	4623      	mov	r3, r4
 80088c0:	e7e0      	b.n	8008884 <rshift+0x68>

080088c2 <__hexdig_fun>:
 80088c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80088c6:	2b09      	cmp	r3, #9
 80088c8:	d802      	bhi.n	80088d0 <__hexdig_fun+0xe>
 80088ca:	3820      	subs	r0, #32
 80088cc:	b2c0      	uxtb	r0, r0
 80088ce:	4770      	bx	lr
 80088d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80088d4:	2b05      	cmp	r3, #5
 80088d6:	d801      	bhi.n	80088dc <__hexdig_fun+0x1a>
 80088d8:	3847      	subs	r0, #71	; 0x47
 80088da:	e7f7      	b.n	80088cc <__hexdig_fun+0xa>
 80088dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80088e0:	2b05      	cmp	r3, #5
 80088e2:	d801      	bhi.n	80088e8 <__hexdig_fun+0x26>
 80088e4:	3827      	subs	r0, #39	; 0x27
 80088e6:	e7f1      	b.n	80088cc <__hexdig_fun+0xa>
 80088e8:	2000      	movs	r0, #0
 80088ea:	4770      	bx	lr

080088ec <__gethex>:
 80088ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	b08b      	sub	sp, #44	; 0x2c
 80088f2:	9306      	str	r3, [sp, #24]
 80088f4:	4bb9      	ldr	r3, [pc, #740]	; (8008bdc <__gethex+0x2f0>)
 80088f6:	9002      	str	r0, [sp, #8]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	468b      	mov	fp, r1
 80088fc:	4618      	mov	r0, r3
 80088fe:	4690      	mov	r8, r2
 8008900:	9303      	str	r3, [sp, #12]
 8008902:	f7f7 fc25 	bl	8000150 <strlen>
 8008906:	4682      	mov	sl, r0
 8008908:	9b03      	ldr	r3, [sp, #12]
 800890a:	f8db 2000 	ldr.w	r2, [fp]
 800890e:	4403      	add	r3, r0
 8008910:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008914:	9307      	str	r3, [sp, #28]
 8008916:	1c93      	adds	r3, r2, #2
 8008918:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800891c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008920:	32fe      	adds	r2, #254	; 0xfe
 8008922:	18d1      	adds	r1, r2, r3
 8008924:	461f      	mov	r7, r3
 8008926:	f813 0b01 	ldrb.w	r0, [r3], #1
 800892a:	9101      	str	r1, [sp, #4]
 800892c:	2830      	cmp	r0, #48	; 0x30
 800892e:	d0f8      	beq.n	8008922 <__gethex+0x36>
 8008930:	f7ff ffc7 	bl	80088c2 <__hexdig_fun>
 8008934:	4604      	mov	r4, r0
 8008936:	2800      	cmp	r0, #0
 8008938:	d13a      	bne.n	80089b0 <__gethex+0xc4>
 800893a:	4652      	mov	r2, sl
 800893c:	4638      	mov	r0, r7
 800893e:	9903      	ldr	r1, [sp, #12]
 8008940:	f001 f9ea 	bl	8009d18 <strncmp>
 8008944:	4605      	mov	r5, r0
 8008946:	2800      	cmp	r0, #0
 8008948:	d166      	bne.n	8008a18 <__gethex+0x12c>
 800894a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800894e:	eb07 060a 	add.w	r6, r7, sl
 8008952:	f7ff ffb6 	bl	80088c2 <__hexdig_fun>
 8008956:	2800      	cmp	r0, #0
 8008958:	d060      	beq.n	8008a1c <__gethex+0x130>
 800895a:	4633      	mov	r3, r6
 800895c:	7818      	ldrb	r0, [r3, #0]
 800895e:	461f      	mov	r7, r3
 8008960:	2830      	cmp	r0, #48	; 0x30
 8008962:	f103 0301 	add.w	r3, r3, #1
 8008966:	d0f9      	beq.n	800895c <__gethex+0x70>
 8008968:	f7ff ffab 	bl	80088c2 <__hexdig_fun>
 800896c:	2301      	movs	r3, #1
 800896e:	fab0 f480 	clz	r4, r0
 8008972:	4635      	mov	r5, r6
 8008974:	0964      	lsrs	r4, r4, #5
 8008976:	9301      	str	r3, [sp, #4]
 8008978:	463a      	mov	r2, r7
 800897a:	4616      	mov	r6, r2
 800897c:	7830      	ldrb	r0, [r6, #0]
 800897e:	3201      	adds	r2, #1
 8008980:	f7ff ff9f 	bl	80088c2 <__hexdig_fun>
 8008984:	2800      	cmp	r0, #0
 8008986:	d1f8      	bne.n	800897a <__gethex+0x8e>
 8008988:	4652      	mov	r2, sl
 800898a:	4630      	mov	r0, r6
 800898c:	9903      	ldr	r1, [sp, #12]
 800898e:	f001 f9c3 	bl	8009d18 <strncmp>
 8008992:	b980      	cbnz	r0, 80089b6 <__gethex+0xca>
 8008994:	b94d      	cbnz	r5, 80089aa <__gethex+0xbe>
 8008996:	eb06 050a 	add.w	r5, r6, sl
 800899a:	462a      	mov	r2, r5
 800899c:	4616      	mov	r6, r2
 800899e:	7830      	ldrb	r0, [r6, #0]
 80089a0:	3201      	adds	r2, #1
 80089a2:	f7ff ff8e 	bl	80088c2 <__hexdig_fun>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d1f8      	bne.n	800899c <__gethex+0xb0>
 80089aa:	1bad      	subs	r5, r5, r6
 80089ac:	00ad      	lsls	r5, r5, #2
 80089ae:	e004      	b.n	80089ba <__gethex+0xce>
 80089b0:	2400      	movs	r4, #0
 80089b2:	4625      	mov	r5, r4
 80089b4:	e7e0      	b.n	8008978 <__gethex+0x8c>
 80089b6:	2d00      	cmp	r5, #0
 80089b8:	d1f7      	bne.n	80089aa <__gethex+0xbe>
 80089ba:	7833      	ldrb	r3, [r6, #0]
 80089bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089c0:	2b50      	cmp	r3, #80	; 0x50
 80089c2:	d139      	bne.n	8008a38 <__gethex+0x14c>
 80089c4:	7873      	ldrb	r3, [r6, #1]
 80089c6:	2b2b      	cmp	r3, #43	; 0x2b
 80089c8:	d02a      	beq.n	8008a20 <__gethex+0x134>
 80089ca:	2b2d      	cmp	r3, #45	; 0x2d
 80089cc:	d02c      	beq.n	8008a28 <__gethex+0x13c>
 80089ce:	f04f 0900 	mov.w	r9, #0
 80089d2:	1c71      	adds	r1, r6, #1
 80089d4:	7808      	ldrb	r0, [r1, #0]
 80089d6:	f7ff ff74 	bl	80088c2 <__hexdig_fun>
 80089da:	1e43      	subs	r3, r0, #1
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b18      	cmp	r3, #24
 80089e0:	d82a      	bhi.n	8008a38 <__gethex+0x14c>
 80089e2:	f1a0 0210 	sub.w	r2, r0, #16
 80089e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089ea:	f7ff ff6a 	bl	80088c2 <__hexdig_fun>
 80089ee:	1e43      	subs	r3, r0, #1
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b18      	cmp	r3, #24
 80089f4:	d91b      	bls.n	8008a2e <__gethex+0x142>
 80089f6:	f1b9 0f00 	cmp.w	r9, #0
 80089fa:	d000      	beq.n	80089fe <__gethex+0x112>
 80089fc:	4252      	negs	r2, r2
 80089fe:	4415      	add	r5, r2
 8008a00:	f8cb 1000 	str.w	r1, [fp]
 8008a04:	b1d4      	cbz	r4, 8008a3c <__gethex+0x150>
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	bf14      	ite	ne
 8008a0c:	2700      	movne	r7, #0
 8008a0e:	2706      	moveq	r7, #6
 8008a10:	4638      	mov	r0, r7
 8008a12:	b00b      	add	sp, #44	; 0x2c
 8008a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a18:	463e      	mov	r6, r7
 8008a1a:	4625      	mov	r5, r4
 8008a1c:	2401      	movs	r4, #1
 8008a1e:	e7cc      	b.n	80089ba <__gethex+0xce>
 8008a20:	f04f 0900 	mov.w	r9, #0
 8008a24:	1cb1      	adds	r1, r6, #2
 8008a26:	e7d5      	b.n	80089d4 <__gethex+0xe8>
 8008a28:	f04f 0901 	mov.w	r9, #1
 8008a2c:	e7fa      	b.n	8008a24 <__gethex+0x138>
 8008a2e:	230a      	movs	r3, #10
 8008a30:	fb03 0202 	mla	r2, r3, r2, r0
 8008a34:	3a10      	subs	r2, #16
 8008a36:	e7d6      	b.n	80089e6 <__gethex+0xfa>
 8008a38:	4631      	mov	r1, r6
 8008a3a:	e7e1      	b.n	8008a00 <__gethex+0x114>
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	1bf3      	subs	r3, r6, r7
 8008a40:	3b01      	subs	r3, #1
 8008a42:	2b07      	cmp	r3, #7
 8008a44:	dc0a      	bgt.n	8008a5c <__gethex+0x170>
 8008a46:	9802      	ldr	r0, [sp, #8]
 8008a48:	f000 fa88 	bl	8008f5c <_Balloc>
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	b940      	cbnz	r0, 8008a62 <__gethex+0x176>
 8008a50:	4602      	mov	r2, r0
 8008a52:	21de      	movs	r1, #222	; 0xde
 8008a54:	4b62      	ldr	r3, [pc, #392]	; (8008be0 <__gethex+0x2f4>)
 8008a56:	4863      	ldr	r0, [pc, #396]	; (8008be4 <__gethex+0x2f8>)
 8008a58:	f001 f97e 	bl	8009d58 <__assert_func>
 8008a5c:	3101      	adds	r1, #1
 8008a5e:	105b      	asrs	r3, r3, #1
 8008a60:	e7ef      	b.n	8008a42 <__gethex+0x156>
 8008a62:	f04f 0b00 	mov.w	fp, #0
 8008a66:	f100 0914 	add.w	r9, r0, #20
 8008a6a:	f1ca 0301 	rsb	r3, sl, #1
 8008a6e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008a72:	f8cd b004 	str.w	fp, [sp, #4]
 8008a76:	9308      	str	r3, [sp, #32]
 8008a78:	42b7      	cmp	r7, r6
 8008a7a:	d33f      	bcc.n	8008afc <__gethex+0x210>
 8008a7c:	9f04      	ldr	r7, [sp, #16]
 8008a7e:	9b01      	ldr	r3, [sp, #4]
 8008a80:	f847 3b04 	str.w	r3, [r7], #4
 8008a84:	eba7 0709 	sub.w	r7, r7, r9
 8008a88:	10bf      	asrs	r7, r7, #2
 8008a8a:	6127      	str	r7, [r4, #16]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 fb5b 	bl	8009148 <__hi0bits>
 8008a92:	017f      	lsls	r7, r7, #5
 8008a94:	f8d8 6000 	ldr.w	r6, [r8]
 8008a98:	1a3f      	subs	r7, r7, r0
 8008a9a:	42b7      	cmp	r7, r6
 8008a9c:	dd62      	ble.n	8008b64 <__gethex+0x278>
 8008a9e:	1bbf      	subs	r7, r7, r6
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f000 fef1 	bl	800988a <__any_on>
 8008aa8:	4682      	mov	sl, r0
 8008aaa:	b1a8      	cbz	r0, 8008ad8 <__gethex+0x1ec>
 8008aac:	f04f 0a01 	mov.w	sl, #1
 8008ab0:	1e7b      	subs	r3, r7, #1
 8008ab2:	1159      	asrs	r1, r3, #5
 8008ab4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008ab8:	f003 021f 	and.w	r2, r3, #31
 8008abc:	fa0a f202 	lsl.w	r2, sl, r2
 8008ac0:	420a      	tst	r2, r1
 8008ac2:	d009      	beq.n	8008ad8 <__gethex+0x1ec>
 8008ac4:	4553      	cmp	r3, sl
 8008ac6:	dd05      	ble.n	8008ad4 <__gethex+0x1e8>
 8008ac8:	4620      	mov	r0, r4
 8008aca:	1eb9      	subs	r1, r7, #2
 8008acc:	f000 fedd 	bl	800988a <__any_on>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d144      	bne.n	8008b5e <__gethex+0x272>
 8008ad4:	f04f 0a02 	mov.w	sl, #2
 8008ad8:	4639      	mov	r1, r7
 8008ada:	4620      	mov	r0, r4
 8008adc:	f7ff fe9e 	bl	800881c <rshift>
 8008ae0:	443d      	add	r5, r7
 8008ae2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ae6:	42ab      	cmp	r3, r5
 8008ae8:	da4a      	bge.n	8008b80 <__gethex+0x294>
 8008aea:	4621      	mov	r1, r4
 8008aec:	9802      	ldr	r0, [sp, #8]
 8008aee:	f000 fa75 	bl	8008fdc <_Bfree>
 8008af2:	2300      	movs	r3, #0
 8008af4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008af6:	27a3      	movs	r7, #163	; 0xa3
 8008af8:	6013      	str	r3, [r2, #0]
 8008afa:	e789      	b.n	8008a10 <__gethex+0x124>
 8008afc:	1e73      	subs	r3, r6, #1
 8008afe:	9a07      	ldr	r2, [sp, #28]
 8008b00:	9305      	str	r3, [sp, #20]
 8008b02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d019      	beq.n	8008b3e <__gethex+0x252>
 8008b0a:	f1bb 0f20 	cmp.w	fp, #32
 8008b0e:	d107      	bne.n	8008b20 <__gethex+0x234>
 8008b10:	9b04      	ldr	r3, [sp, #16]
 8008b12:	9a01      	ldr	r2, [sp, #4]
 8008b14:	f843 2b04 	str.w	r2, [r3], #4
 8008b18:	9304      	str	r3, [sp, #16]
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	469b      	mov	fp, r3
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008b24:	f7ff fecd 	bl	80088c2 <__hexdig_fun>
 8008b28:	9b01      	ldr	r3, [sp, #4]
 8008b2a:	f000 000f 	and.w	r0, r0, #15
 8008b2e:	fa00 f00b 	lsl.w	r0, r0, fp
 8008b32:	4303      	orrs	r3, r0
 8008b34:	9301      	str	r3, [sp, #4]
 8008b36:	f10b 0b04 	add.w	fp, fp, #4
 8008b3a:	9b05      	ldr	r3, [sp, #20]
 8008b3c:	e00d      	b.n	8008b5a <__gethex+0x26e>
 8008b3e:	9b05      	ldr	r3, [sp, #20]
 8008b40:	9a08      	ldr	r2, [sp, #32]
 8008b42:	4413      	add	r3, r2
 8008b44:	42bb      	cmp	r3, r7
 8008b46:	d3e0      	bcc.n	8008b0a <__gethex+0x21e>
 8008b48:	4618      	mov	r0, r3
 8008b4a:	4652      	mov	r2, sl
 8008b4c:	9903      	ldr	r1, [sp, #12]
 8008b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b50:	f001 f8e2 	bl	8009d18 <strncmp>
 8008b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d1d7      	bne.n	8008b0a <__gethex+0x21e>
 8008b5a:	461e      	mov	r6, r3
 8008b5c:	e78c      	b.n	8008a78 <__gethex+0x18c>
 8008b5e:	f04f 0a03 	mov.w	sl, #3
 8008b62:	e7b9      	b.n	8008ad8 <__gethex+0x1ec>
 8008b64:	da09      	bge.n	8008b7a <__gethex+0x28e>
 8008b66:	1bf7      	subs	r7, r6, r7
 8008b68:	4621      	mov	r1, r4
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	9802      	ldr	r0, [sp, #8]
 8008b6e:	f000 fc4d 	bl	800940c <__lshift>
 8008b72:	4604      	mov	r4, r0
 8008b74:	1bed      	subs	r5, r5, r7
 8008b76:	f100 0914 	add.w	r9, r0, #20
 8008b7a:	f04f 0a00 	mov.w	sl, #0
 8008b7e:	e7b0      	b.n	8008ae2 <__gethex+0x1f6>
 8008b80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b84:	42a8      	cmp	r0, r5
 8008b86:	dd71      	ble.n	8008c6c <__gethex+0x380>
 8008b88:	1b45      	subs	r5, r0, r5
 8008b8a:	42ae      	cmp	r6, r5
 8008b8c:	dc34      	bgt.n	8008bf8 <__gethex+0x30c>
 8008b8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d028      	beq.n	8008be8 <__gethex+0x2fc>
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d02a      	beq.n	8008bf0 <__gethex+0x304>
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d115      	bne.n	8008bca <__gethex+0x2de>
 8008b9e:	42ae      	cmp	r6, r5
 8008ba0:	d113      	bne.n	8008bca <__gethex+0x2de>
 8008ba2:	2e01      	cmp	r6, #1
 8008ba4:	d10b      	bne.n	8008bbe <__gethex+0x2d2>
 8008ba6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008baa:	9a06      	ldr	r2, [sp, #24]
 8008bac:	2762      	movs	r7, #98	; 0x62
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	6123      	str	r3, [r4, #16]
 8008bb4:	f8c9 3000 	str.w	r3, [r9]
 8008bb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bba:	601c      	str	r4, [r3, #0]
 8008bbc:	e728      	b.n	8008a10 <__gethex+0x124>
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	1e71      	subs	r1, r6, #1
 8008bc2:	f000 fe62 	bl	800988a <__any_on>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d1ed      	bne.n	8008ba6 <__gethex+0x2ba>
 8008bca:	4621      	mov	r1, r4
 8008bcc:	9802      	ldr	r0, [sp, #8]
 8008bce:	f000 fa05 	bl	8008fdc <_Bfree>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bd6:	2750      	movs	r7, #80	; 0x50
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	e719      	b.n	8008a10 <__gethex+0x124>
 8008bdc:	0800ab90 	.word	0x0800ab90
 8008be0:	0800ab14 	.word	0x0800ab14
 8008be4:	0800ab25 	.word	0x0800ab25
 8008be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1ed      	bne.n	8008bca <__gethex+0x2de>
 8008bee:	e7da      	b.n	8008ba6 <__gethex+0x2ba>
 8008bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1d7      	bne.n	8008ba6 <__gethex+0x2ba>
 8008bf6:	e7e8      	b.n	8008bca <__gethex+0x2de>
 8008bf8:	1e6f      	subs	r7, r5, #1
 8008bfa:	f1ba 0f00 	cmp.w	sl, #0
 8008bfe:	d132      	bne.n	8008c66 <__gethex+0x37a>
 8008c00:	b127      	cbz	r7, 8008c0c <__gethex+0x320>
 8008c02:	4639      	mov	r1, r7
 8008c04:	4620      	mov	r0, r4
 8008c06:	f000 fe40 	bl	800988a <__any_on>
 8008c0a:	4682      	mov	sl, r0
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	117b      	asrs	r3, r7, #5
 8008c10:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008c14:	f007 071f 	and.w	r7, r7, #31
 8008c18:	fa01 f707 	lsl.w	r7, r1, r7
 8008c1c:	421f      	tst	r7, r3
 8008c1e:	f04f 0702 	mov.w	r7, #2
 8008c22:	4629      	mov	r1, r5
 8008c24:	4620      	mov	r0, r4
 8008c26:	bf18      	it	ne
 8008c28:	f04a 0a02 	orrne.w	sl, sl, #2
 8008c2c:	1b76      	subs	r6, r6, r5
 8008c2e:	f7ff fdf5 	bl	800881c <rshift>
 8008c32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008c36:	f1ba 0f00 	cmp.w	sl, #0
 8008c3a:	d048      	beq.n	8008cce <__gethex+0x3e2>
 8008c3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d015      	beq.n	8008c70 <__gethex+0x384>
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d017      	beq.n	8008c78 <__gethex+0x38c>
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d109      	bne.n	8008c60 <__gethex+0x374>
 8008c4c:	f01a 0f02 	tst.w	sl, #2
 8008c50:	d006      	beq.n	8008c60 <__gethex+0x374>
 8008c52:	f8d9 0000 	ldr.w	r0, [r9]
 8008c56:	ea4a 0a00 	orr.w	sl, sl, r0
 8008c5a:	f01a 0f01 	tst.w	sl, #1
 8008c5e:	d10e      	bne.n	8008c7e <__gethex+0x392>
 8008c60:	f047 0710 	orr.w	r7, r7, #16
 8008c64:	e033      	b.n	8008cce <__gethex+0x3e2>
 8008c66:	f04f 0a01 	mov.w	sl, #1
 8008c6a:	e7cf      	b.n	8008c0c <__gethex+0x320>
 8008c6c:	2701      	movs	r7, #1
 8008c6e:	e7e2      	b.n	8008c36 <__gethex+0x34a>
 8008c70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c72:	f1c3 0301 	rsb	r3, r3, #1
 8008c76:	9315      	str	r3, [sp, #84]	; 0x54
 8008c78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0f0      	beq.n	8008c60 <__gethex+0x374>
 8008c7e:	f04f 0c00 	mov.w	ip, #0
 8008c82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c86:	f104 0314 	add.w	r3, r4, #20
 8008c8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c98:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c9c:	d01c      	beq.n	8008cd8 <__gethex+0x3ec>
 8008c9e:	3201      	adds	r2, #1
 8008ca0:	6002      	str	r2, [r0, #0]
 8008ca2:	2f02      	cmp	r7, #2
 8008ca4:	f104 0314 	add.w	r3, r4, #20
 8008ca8:	d13d      	bne.n	8008d26 <__gethex+0x43a>
 8008caa:	f8d8 2000 	ldr.w	r2, [r8]
 8008cae:	3a01      	subs	r2, #1
 8008cb0:	42b2      	cmp	r2, r6
 8008cb2:	d10a      	bne.n	8008cca <__gethex+0x3de>
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	1171      	asrs	r1, r6, #5
 8008cb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008cbc:	f006 061f 	and.w	r6, r6, #31
 8008cc0:	fa02 f606 	lsl.w	r6, r2, r6
 8008cc4:	421e      	tst	r6, r3
 8008cc6:	bf18      	it	ne
 8008cc8:	4617      	movne	r7, r2
 8008cca:	f047 0720 	orr.w	r7, r7, #32
 8008cce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cd0:	601c      	str	r4, [r3, #0]
 8008cd2:	9b06      	ldr	r3, [sp, #24]
 8008cd4:	601d      	str	r5, [r3, #0]
 8008cd6:	e69b      	b.n	8008a10 <__gethex+0x124>
 8008cd8:	4299      	cmp	r1, r3
 8008cda:	f843 cc04 	str.w	ip, [r3, #-4]
 8008cde:	d8d8      	bhi.n	8008c92 <__gethex+0x3a6>
 8008ce0:	68a3      	ldr	r3, [r4, #8]
 8008ce2:	459b      	cmp	fp, r3
 8008ce4:	db17      	blt.n	8008d16 <__gethex+0x42a>
 8008ce6:	6861      	ldr	r1, [r4, #4]
 8008ce8:	9802      	ldr	r0, [sp, #8]
 8008cea:	3101      	adds	r1, #1
 8008cec:	f000 f936 	bl	8008f5c <_Balloc>
 8008cf0:	4681      	mov	r9, r0
 8008cf2:	b918      	cbnz	r0, 8008cfc <__gethex+0x410>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	2184      	movs	r1, #132	; 0x84
 8008cf8:	4b19      	ldr	r3, [pc, #100]	; (8008d60 <__gethex+0x474>)
 8008cfa:	e6ac      	b.n	8008a56 <__gethex+0x16a>
 8008cfc:	6922      	ldr	r2, [r4, #16]
 8008cfe:	f104 010c 	add.w	r1, r4, #12
 8008d02:	3202      	adds	r2, #2
 8008d04:	0092      	lsls	r2, r2, #2
 8008d06:	300c      	adds	r0, #12
 8008d08:	f000 f91a 	bl	8008f40 <memcpy>
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	9802      	ldr	r0, [sp, #8]
 8008d10:	f000 f964 	bl	8008fdc <_Bfree>
 8008d14:	464c      	mov	r4, r9
 8008d16:	6923      	ldr	r3, [r4, #16]
 8008d18:	1c5a      	adds	r2, r3, #1
 8008d1a:	6122      	str	r2, [r4, #16]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d22:	615a      	str	r2, [r3, #20]
 8008d24:	e7bd      	b.n	8008ca2 <__gethex+0x3b6>
 8008d26:	6922      	ldr	r2, [r4, #16]
 8008d28:	455a      	cmp	r2, fp
 8008d2a:	dd0b      	ble.n	8008d44 <__gethex+0x458>
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f7ff fd74 	bl	800881c <rshift>
 8008d34:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d38:	3501      	adds	r5, #1
 8008d3a:	42ab      	cmp	r3, r5
 8008d3c:	f6ff aed5 	blt.w	8008aea <__gethex+0x1fe>
 8008d40:	2701      	movs	r7, #1
 8008d42:	e7c2      	b.n	8008cca <__gethex+0x3de>
 8008d44:	f016 061f 	ands.w	r6, r6, #31
 8008d48:	d0fa      	beq.n	8008d40 <__gethex+0x454>
 8008d4a:	449a      	add	sl, r3
 8008d4c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008d50:	f000 f9fa 	bl	8009148 <__hi0bits>
 8008d54:	f1c6 0620 	rsb	r6, r6, #32
 8008d58:	42b0      	cmp	r0, r6
 8008d5a:	dbe7      	blt.n	8008d2c <__gethex+0x440>
 8008d5c:	e7f0      	b.n	8008d40 <__gethex+0x454>
 8008d5e:	bf00      	nop
 8008d60:	0800ab14 	.word	0x0800ab14

08008d64 <L_shift>:
 8008d64:	f1c2 0208 	rsb	r2, r2, #8
 8008d68:	0092      	lsls	r2, r2, #2
 8008d6a:	b570      	push	{r4, r5, r6, lr}
 8008d6c:	f1c2 0620 	rsb	r6, r2, #32
 8008d70:	6843      	ldr	r3, [r0, #4]
 8008d72:	6804      	ldr	r4, [r0, #0]
 8008d74:	fa03 f506 	lsl.w	r5, r3, r6
 8008d78:	432c      	orrs	r4, r5
 8008d7a:	40d3      	lsrs	r3, r2
 8008d7c:	6004      	str	r4, [r0, #0]
 8008d7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d82:	4288      	cmp	r0, r1
 8008d84:	d3f4      	bcc.n	8008d70 <L_shift+0xc>
 8008d86:	bd70      	pop	{r4, r5, r6, pc}

08008d88 <__match>:
 8008d88:	b530      	push	{r4, r5, lr}
 8008d8a:	6803      	ldr	r3, [r0, #0]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d92:	b914      	cbnz	r4, 8008d9a <__match+0x12>
 8008d94:	6003      	str	r3, [r0, #0]
 8008d96:	2001      	movs	r0, #1
 8008d98:	bd30      	pop	{r4, r5, pc}
 8008d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008da2:	2d19      	cmp	r5, #25
 8008da4:	bf98      	it	ls
 8008da6:	3220      	addls	r2, #32
 8008da8:	42a2      	cmp	r2, r4
 8008daa:	d0f0      	beq.n	8008d8e <__match+0x6>
 8008dac:	2000      	movs	r0, #0
 8008dae:	e7f3      	b.n	8008d98 <__match+0x10>

08008db0 <__hexnan>:
 8008db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db4:	2500      	movs	r5, #0
 8008db6:	680b      	ldr	r3, [r1, #0]
 8008db8:	4682      	mov	sl, r0
 8008dba:	115e      	asrs	r6, r3, #5
 8008dbc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008dc0:	f013 031f 	ands.w	r3, r3, #31
 8008dc4:	bf18      	it	ne
 8008dc6:	3604      	addne	r6, #4
 8008dc8:	1f37      	subs	r7, r6, #4
 8008dca:	4690      	mov	r8, r2
 8008dcc:	46b9      	mov	r9, r7
 8008dce:	463c      	mov	r4, r7
 8008dd0:	46ab      	mov	fp, r5
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	6801      	ldr	r1, [r0, #0]
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ddc:	9502      	str	r5, [sp, #8]
 8008dde:	784a      	ldrb	r2, [r1, #1]
 8008de0:	1c4b      	adds	r3, r1, #1
 8008de2:	9303      	str	r3, [sp, #12]
 8008de4:	b342      	cbz	r2, 8008e38 <__hexnan+0x88>
 8008de6:	4610      	mov	r0, r2
 8008de8:	9105      	str	r1, [sp, #20]
 8008dea:	9204      	str	r2, [sp, #16]
 8008dec:	f7ff fd69 	bl	80088c2 <__hexdig_fun>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d14f      	bne.n	8008e94 <__hexnan+0xe4>
 8008df4:	9a04      	ldr	r2, [sp, #16]
 8008df6:	9905      	ldr	r1, [sp, #20]
 8008df8:	2a20      	cmp	r2, #32
 8008dfa:	d818      	bhi.n	8008e2e <__hexnan+0x7e>
 8008dfc:	9b02      	ldr	r3, [sp, #8]
 8008dfe:	459b      	cmp	fp, r3
 8008e00:	dd13      	ble.n	8008e2a <__hexnan+0x7a>
 8008e02:	454c      	cmp	r4, r9
 8008e04:	d206      	bcs.n	8008e14 <__hexnan+0x64>
 8008e06:	2d07      	cmp	r5, #7
 8008e08:	dc04      	bgt.n	8008e14 <__hexnan+0x64>
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f7ff ffa8 	bl	8008d64 <L_shift>
 8008e14:	4544      	cmp	r4, r8
 8008e16:	d950      	bls.n	8008eba <__hexnan+0x10a>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f1a4 0904 	sub.w	r9, r4, #4
 8008e1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e22:	461d      	mov	r5, r3
 8008e24:	464c      	mov	r4, r9
 8008e26:	f8cd b008 	str.w	fp, [sp, #8]
 8008e2a:	9903      	ldr	r1, [sp, #12]
 8008e2c:	e7d7      	b.n	8008dde <__hexnan+0x2e>
 8008e2e:	2a29      	cmp	r2, #41	; 0x29
 8008e30:	d156      	bne.n	8008ee0 <__hexnan+0x130>
 8008e32:	3102      	adds	r1, #2
 8008e34:	f8ca 1000 	str.w	r1, [sl]
 8008e38:	f1bb 0f00 	cmp.w	fp, #0
 8008e3c:	d050      	beq.n	8008ee0 <__hexnan+0x130>
 8008e3e:	454c      	cmp	r4, r9
 8008e40:	d206      	bcs.n	8008e50 <__hexnan+0xa0>
 8008e42:	2d07      	cmp	r5, #7
 8008e44:	dc04      	bgt.n	8008e50 <__hexnan+0xa0>
 8008e46:	462a      	mov	r2, r5
 8008e48:	4649      	mov	r1, r9
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f7ff ff8a 	bl	8008d64 <L_shift>
 8008e50:	4544      	cmp	r4, r8
 8008e52:	d934      	bls.n	8008ebe <__hexnan+0x10e>
 8008e54:	4623      	mov	r3, r4
 8008e56:	f1a8 0204 	sub.w	r2, r8, #4
 8008e5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e5e:	429f      	cmp	r7, r3
 8008e60:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e64:	d2f9      	bcs.n	8008e5a <__hexnan+0xaa>
 8008e66:	1b3b      	subs	r3, r7, r4
 8008e68:	f023 0303 	bic.w	r3, r3, #3
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	3401      	adds	r4, #1
 8008e70:	3e03      	subs	r6, #3
 8008e72:	42b4      	cmp	r4, r6
 8008e74:	bf88      	it	hi
 8008e76:	2304      	movhi	r3, #4
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4443      	add	r3, r8
 8008e7c:	f843 2b04 	str.w	r2, [r3], #4
 8008e80:	429f      	cmp	r7, r3
 8008e82:	d2fb      	bcs.n	8008e7c <__hexnan+0xcc>
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	b91b      	cbnz	r3, 8008e90 <__hexnan+0xe0>
 8008e88:	4547      	cmp	r7, r8
 8008e8a:	d127      	bne.n	8008edc <__hexnan+0x12c>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	2005      	movs	r0, #5
 8008e92:	e026      	b.n	8008ee2 <__hexnan+0x132>
 8008e94:	3501      	adds	r5, #1
 8008e96:	2d08      	cmp	r5, #8
 8008e98:	f10b 0b01 	add.w	fp, fp, #1
 8008e9c:	dd06      	ble.n	8008eac <__hexnan+0xfc>
 8008e9e:	4544      	cmp	r4, r8
 8008ea0:	d9c3      	bls.n	8008e2a <__hexnan+0x7a>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2501      	movs	r5, #1
 8008ea6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008eaa:	3c04      	subs	r4, #4
 8008eac:	6822      	ldr	r2, [r4, #0]
 8008eae:	f000 000f 	and.w	r0, r0, #15
 8008eb2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008eb6:	6022      	str	r2, [r4, #0]
 8008eb8:	e7b7      	b.n	8008e2a <__hexnan+0x7a>
 8008eba:	2508      	movs	r5, #8
 8008ebc:	e7b5      	b.n	8008e2a <__hexnan+0x7a>
 8008ebe:	9b01      	ldr	r3, [sp, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0df      	beq.n	8008e84 <__hexnan+0xd4>
 8008ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec8:	f1c3 0320 	rsb	r3, r3, #32
 8008ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ed4:	401a      	ands	r2, r3
 8008ed6:	f846 2c04 	str.w	r2, [r6, #-4]
 8008eda:	e7d3      	b.n	8008e84 <__hexnan+0xd4>
 8008edc:	3f04      	subs	r7, #4
 8008ede:	e7d1      	b.n	8008e84 <__hexnan+0xd4>
 8008ee0:	2004      	movs	r0, #4
 8008ee2:	b007      	add	sp, #28
 8008ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ee8 <_localeconv_r>:
 8008ee8:	4800      	ldr	r0, [pc, #0]	; (8008eec <_localeconv_r+0x4>)
 8008eea:	4770      	bx	lr
 8008eec:	20000164 	.word	0x20000164

08008ef0 <malloc>:
 8008ef0:	4b02      	ldr	r3, [pc, #8]	; (8008efc <malloc+0xc>)
 8008ef2:	4601      	mov	r1, r0
 8008ef4:	6818      	ldr	r0, [r3, #0]
 8008ef6:	f000 bd43 	b.w	8009980 <_malloc_r>
 8008efa:	bf00      	nop
 8008efc:	2000000c 	.word	0x2000000c

08008f00 <__ascii_mbtowc>:
 8008f00:	b082      	sub	sp, #8
 8008f02:	b901      	cbnz	r1, 8008f06 <__ascii_mbtowc+0x6>
 8008f04:	a901      	add	r1, sp, #4
 8008f06:	b142      	cbz	r2, 8008f1a <__ascii_mbtowc+0x1a>
 8008f08:	b14b      	cbz	r3, 8008f1e <__ascii_mbtowc+0x1e>
 8008f0a:	7813      	ldrb	r3, [r2, #0]
 8008f0c:	600b      	str	r3, [r1, #0]
 8008f0e:	7812      	ldrb	r2, [r2, #0]
 8008f10:	1e10      	subs	r0, r2, #0
 8008f12:	bf18      	it	ne
 8008f14:	2001      	movne	r0, #1
 8008f16:	b002      	add	sp, #8
 8008f18:	4770      	bx	lr
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	e7fb      	b.n	8008f16 <__ascii_mbtowc+0x16>
 8008f1e:	f06f 0001 	mvn.w	r0, #1
 8008f22:	e7f8      	b.n	8008f16 <__ascii_mbtowc+0x16>

08008f24 <memchr>:
 8008f24:	4603      	mov	r3, r0
 8008f26:	b510      	push	{r4, lr}
 8008f28:	b2c9      	uxtb	r1, r1
 8008f2a:	4402      	add	r2, r0
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	d101      	bne.n	8008f36 <memchr+0x12>
 8008f32:	2000      	movs	r0, #0
 8008f34:	e003      	b.n	8008f3e <memchr+0x1a>
 8008f36:	7804      	ldrb	r4, [r0, #0]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	428c      	cmp	r4, r1
 8008f3c:	d1f6      	bne.n	8008f2c <memchr+0x8>
 8008f3e:	bd10      	pop	{r4, pc}

08008f40 <memcpy>:
 8008f40:	440a      	add	r2, r1
 8008f42:	4291      	cmp	r1, r2
 8008f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f48:	d100      	bne.n	8008f4c <memcpy+0xc>
 8008f4a:	4770      	bx	lr
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f52:	4291      	cmp	r1, r2
 8008f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f58:	d1f9      	bne.n	8008f4e <memcpy+0xe>
 8008f5a:	bd10      	pop	{r4, pc}

08008f5c <_Balloc>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f60:	4604      	mov	r4, r0
 8008f62:	460d      	mov	r5, r1
 8008f64:	b976      	cbnz	r6, 8008f84 <_Balloc+0x28>
 8008f66:	2010      	movs	r0, #16
 8008f68:	f7ff ffc2 	bl	8008ef0 <malloc>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	6260      	str	r0, [r4, #36]	; 0x24
 8008f70:	b920      	cbnz	r0, 8008f7c <_Balloc+0x20>
 8008f72:	2166      	movs	r1, #102	; 0x66
 8008f74:	4b17      	ldr	r3, [pc, #92]	; (8008fd4 <_Balloc+0x78>)
 8008f76:	4818      	ldr	r0, [pc, #96]	; (8008fd8 <_Balloc+0x7c>)
 8008f78:	f000 feee 	bl	8009d58 <__assert_func>
 8008f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f80:	6006      	str	r6, [r0, #0]
 8008f82:	60c6      	str	r6, [r0, #12]
 8008f84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f86:	68f3      	ldr	r3, [r6, #12]
 8008f88:	b183      	cbz	r3, 8008fac <_Balloc+0x50>
 8008f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f92:	b9b8      	cbnz	r0, 8008fc4 <_Balloc+0x68>
 8008f94:	2101      	movs	r1, #1
 8008f96:	fa01 f605 	lsl.w	r6, r1, r5
 8008f9a:	1d72      	adds	r2, r6, #5
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	0092      	lsls	r2, r2, #2
 8008fa0:	f000 fc94 	bl	80098cc <_calloc_r>
 8008fa4:	b160      	cbz	r0, 8008fc0 <_Balloc+0x64>
 8008fa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008faa:	e00e      	b.n	8008fca <_Balloc+0x6e>
 8008fac:	2221      	movs	r2, #33	; 0x21
 8008fae:	2104      	movs	r1, #4
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 fc8b 	bl	80098cc <_calloc_r>
 8008fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fb8:	60f0      	str	r0, [r6, #12]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e4      	bne.n	8008f8a <_Balloc+0x2e>
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}
 8008fc4:	6802      	ldr	r2, [r0, #0]
 8008fc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fd0:	e7f7      	b.n	8008fc2 <_Balloc+0x66>
 8008fd2:	bf00      	nop
 8008fd4:	0800aa9e 	.word	0x0800aa9e
 8008fd8:	0800aba4 	.word	0x0800aba4

08008fdc <_Bfree>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	b976      	cbnz	r6, 8009004 <_Bfree+0x28>
 8008fe6:	2010      	movs	r0, #16
 8008fe8:	f7ff ff82 	bl	8008ef0 <malloc>
 8008fec:	4602      	mov	r2, r0
 8008fee:	6268      	str	r0, [r5, #36]	; 0x24
 8008ff0:	b920      	cbnz	r0, 8008ffc <_Bfree+0x20>
 8008ff2:	218a      	movs	r1, #138	; 0x8a
 8008ff4:	4b08      	ldr	r3, [pc, #32]	; (8009018 <_Bfree+0x3c>)
 8008ff6:	4809      	ldr	r0, [pc, #36]	; (800901c <_Bfree+0x40>)
 8008ff8:	f000 feae 	bl	8009d58 <__assert_func>
 8008ffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009000:	6006      	str	r6, [r0, #0]
 8009002:	60c6      	str	r6, [r0, #12]
 8009004:	b13c      	cbz	r4, 8009016 <_Bfree+0x3a>
 8009006:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009008:	6862      	ldr	r2, [r4, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009010:	6021      	str	r1, [r4, #0]
 8009012:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	0800aa9e 	.word	0x0800aa9e
 800901c:	0800aba4 	.word	0x0800aba4

08009020 <__multadd>:
 8009020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009024:	4698      	mov	r8, r3
 8009026:	460c      	mov	r4, r1
 8009028:	2300      	movs	r3, #0
 800902a:	690e      	ldr	r6, [r1, #16]
 800902c:	4607      	mov	r7, r0
 800902e:	f101 0014 	add.w	r0, r1, #20
 8009032:	6805      	ldr	r5, [r0, #0]
 8009034:	3301      	adds	r3, #1
 8009036:	b2a9      	uxth	r1, r5
 8009038:	fb02 8101 	mla	r1, r2, r1, r8
 800903c:	0c2d      	lsrs	r5, r5, #16
 800903e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009042:	fb02 c505 	mla	r5, r2, r5, ip
 8009046:	b289      	uxth	r1, r1
 8009048:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800904c:	429e      	cmp	r6, r3
 800904e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009052:	f840 1b04 	str.w	r1, [r0], #4
 8009056:	dcec      	bgt.n	8009032 <__multadd+0x12>
 8009058:	f1b8 0f00 	cmp.w	r8, #0
 800905c:	d022      	beq.n	80090a4 <__multadd+0x84>
 800905e:	68a3      	ldr	r3, [r4, #8]
 8009060:	42b3      	cmp	r3, r6
 8009062:	dc19      	bgt.n	8009098 <__multadd+0x78>
 8009064:	6861      	ldr	r1, [r4, #4]
 8009066:	4638      	mov	r0, r7
 8009068:	3101      	adds	r1, #1
 800906a:	f7ff ff77 	bl	8008f5c <_Balloc>
 800906e:	4605      	mov	r5, r0
 8009070:	b928      	cbnz	r0, 800907e <__multadd+0x5e>
 8009072:	4602      	mov	r2, r0
 8009074:	21b5      	movs	r1, #181	; 0xb5
 8009076:	4b0d      	ldr	r3, [pc, #52]	; (80090ac <__multadd+0x8c>)
 8009078:	480d      	ldr	r0, [pc, #52]	; (80090b0 <__multadd+0x90>)
 800907a:	f000 fe6d 	bl	8009d58 <__assert_func>
 800907e:	6922      	ldr	r2, [r4, #16]
 8009080:	f104 010c 	add.w	r1, r4, #12
 8009084:	3202      	adds	r2, #2
 8009086:	0092      	lsls	r2, r2, #2
 8009088:	300c      	adds	r0, #12
 800908a:	f7ff ff59 	bl	8008f40 <memcpy>
 800908e:	4621      	mov	r1, r4
 8009090:	4638      	mov	r0, r7
 8009092:	f7ff ffa3 	bl	8008fdc <_Bfree>
 8009096:	462c      	mov	r4, r5
 8009098:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800909c:	3601      	adds	r6, #1
 800909e:	f8c3 8014 	str.w	r8, [r3, #20]
 80090a2:	6126      	str	r6, [r4, #16]
 80090a4:	4620      	mov	r0, r4
 80090a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090aa:	bf00      	nop
 80090ac:	0800ab14 	.word	0x0800ab14
 80090b0:	0800aba4 	.word	0x0800aba4

080090b4 <__s2b>:
 80090b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b8:	4615      	mov	r5, r2
 80090ba:	2209      	movs	r2, #9
 80090bc:	461f      	mov	r7, r3
 80090be:	3308      	adds	r3, #8
 80090c0:	460c      	mov	r4, r1
 80090c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80090c6:	4606      	mov	r6, r0
 80090c8:	2201      	movs	r2, #1
 80090ca:	2100      	movs	r1, #0
 80090cc:	429a      	cmp	r2, r3
 80090ce:	db09      	blt.n	80090e4 <__s2b+0x30>
 80090d0:	4630      	mov	r0, r6
 80090d2:	f7ff ff43 	bl	8008f5c <_Balloc>
 80090d6:	b940      	cbnz	r0, 80090ea <__s2b+0x36>
 80090d8:	4602      	mov	r2, r0
 80090da:	21ce      	movs	r1, #206	; 0xce
 80090dc:	4b18      	ldr	r3, [pc, #96]	; (8009140 <__s2b+0x8c>)
 80090de:	4819      	ldr	r0, [pc, #100]	; (8009144 <__s2b+0x90>)
 80090e0:	f000 fe3a 	bl	8009d58 <__assert_func>
 80090e4:	0052      	lsls	r2, r2, #1
 80090e6:	3101      	adds	r1, #1
 80090e8:	e7f0      	b.n	80090cc <__s2b+0x18>
 80090ea:	9b08      	ldr	r3, [sp, #32]
 80090ec:	2d09      	cmp	r5, #9
 80090ee:	6143      	str	r3, [r0, #20]
 80090f0:	f04f 0301 	mov.w	r3, #1
 80090f4:	6103      	str	r3, [r0, #16]
 80090f6:	dd16      	ble.n	8009126 <__s2b+0x72>
 80090f8:	f104 0909 	add.w	r9, r4, #9
 80090fc:	46c8      	mov	r8, r9
 80090fe:	442c      	add	r4, r5
 8009100:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009104:	4601      	mov	r1, r0
 8009106:	220a      	movs	r2, #10
 8009108:	4630      	mov	r0, r6
 800910a:	3b30      	subs	r3, #48	; 0x30
 800910c:	f7ff ff88 	bl	8009020 <__multadd>
 8009110:	45a0      	cmp	r8, r4
 8009112:	d1f5      	bne.n	8009100 <__s2b+0x4c>
 8009114:	f1a5 0408 	sub.w	r4, r5, #8
 8009118:	444c      	add	r4, r9
 800911a:	1b2d      	subs	r5, r5, r4
 800911c:	1963      	adds	r3, r4, r5
 800911e:	42bb      	cmp	r3, r7
 8009120:	db04      	blt.n	800912c <__s2b+0x78>
 8009122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009126:	2509      	movs	r5, #9
 8009128:	340a      	adds	r4, #10
 800912a:	e7f6      	b.n	800911a <__s2b+0x66>
 800912c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009130:	4601      	mov	r1, r0
 8009132:	220a      	movs	r2, #10
 8009134:	4630      	mov	r0, r6
 8009136:	3b30      	subs	r3, #48	; 0x30
 8009138:	f7ff ff72 	bl	8009020 <__multadd>
 800913c:	e7ee      	b.n	800911c <__s2b+0x68>
 800913e:	bf00      	nop
 8009140:	0800ab14 	.word	0x0800ab14
 8009144:	0800aba4 	.word	0x0800aba4

08009148 <__hi0bits>:
 8009148:	0c02      	lsrs	r2, r0, #16
 800914a:	0412      	lsls	r2, r2, #16
 800914c:	4603      	mov	r3, r0
 800914e:	b9ca      	cbnz	r2, 8009184 <__hi0bits+0x3c>
 8009150:	0403      	lsls	r3, r0, #16
 8009152:	2010      	movs	r0, #16
 8009154:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009158:	bf04      	itt	eq
 800915a:	021b      	lsleq	r3, r3, #8
 800915c:	3008      	addeq	r0, #8
 800915e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009162:	bf04      	itt	eq
 8009164:	011b      	lsleq	r3, r3, #4
 8009166:	3004      	addeq	r0, #4
 8009168:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800916c:	bf04      	itt	eq
 800916e:	009b      	lsleq	r3, r3, #2
 8009170:	3002      	addeq	r0, #2
 8009172:	2b00      	cmp	r3, #0
 8009174:	db05      	blt.n	8009182 <__hi0bits+0x3a>
 8009176:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800917a:	f100 0001 	add.w	r0, r0, #1
 800917e:	bf08      	it	eq
 8009180:	2020      	moveq	r0, #32
 8009182:	4770      	bx	lr
 8009184:	2000      	movs	r0, #0
 8009186:	e7e5      	b.n	8009154 <__hi0bits+0xc>

08009188 <__lo0bits>:
 8009188:	6803      	ldr	r3, [r0, #0]
 800918a:	4602      	mov	r2, r0
 800918c:	f013 0007 	ands.w	r0, r3, #7
 8009190:	d00b      	beq.n	80091aa <__lo0bits+0x22>
 8009192:	07d9      	lsls	r1, r3, #31
 8009194:	d422      	bmi.n	80091dc <__lo0bits+0x54>
 8009196:	0798      	lsls	r0, r3, #30
 8009198:	bf49      	itett	mi
 800919a:	085b      	lsrmi	r3, r3, #1
 800919c:	089b      	lsrpl	r3, r3, #2
 800919e:	2001      	movmi	r0, #1
 80091a0:	6013      	strmi	r3, [r2, #0]
 80091a2:	bf5c      	itt	pl
 80091a4:	2002      	movpl	r0, #2
 80091a6:	6013      	strpl	r3, [r2, #0]
 80091a8:	4770      	bx	lr
 80091aa:	b299      	uxth	r1, r3
 80091ac:	b909      	cbnz	r1, 80091b2 <__lo0bits+0x2a>
 80091ae:	2010      	movs	r0, #16
 80091b0:	0c1b      	lsrs	r3, r3, #16
 80091b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091b6:	bf04      	itt	eq
 80091b8:	0a1b      	lsreq	r3, r3, #8
 80091ba:	3008      	addeq	r0, #8
 80091bc:	0719      	lsls	r1, r3, #28
 80091be:	bf04      	itt	eq
 80091c0:	091b      	lsreq	r3, r3, #4
 80091c2:	3004      	addeq	r0, #4
 80091c4:	0799      	lsls	r1, r3, #30
 80091c6:	bf04      	itt	eq
 80091c8:	089b      	lsreq	r3, r3, #2
 80091ca:	3002      	addeq	r0, #2
 80091cc:	07d9      	lsls	r1, r3, #31
 80091ce:	d403      	bmi.n	80091d8 <__lo0bits+0x50>
 80091d0:	085b      	lsrs	r3, r3, #1
 80091d2:	f100 0001 	add.w	r0, r0, #1
 80091d6:	d003      	beq.n	80091e0 <__lo0bits+0x58>
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	4770      	bx	lr
 80091dc:	2000      	movs	r0, #0
 80091de:	4770      	bx	lr
 80091e0:	2020      	movs	r0, #32
 80091e2:	4770      	bx	lr

080091e4 <__i2b>:
 80091e4:	b510      	push	{r4, lr}
 80091e6:	460c      	mov	r4, r1
 80091e8:	2101      	movs	r1, #1
 80091ea:	f7ff feb7 	bl	8008f5c <_Balloc>
 80091ee:	4602      	mov	r2, r0
 80091f0:	b928      	cbnz	r0, 80091fe <__i2b+0x1a>
 80091f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091f6:	4b04      	ldr	r3, [pc, #16]	; (8009208 <__i2b+0x24>)
 80091f8:	4804      	ldr	r0, [pc, #16]	; (800920c <__i2b+0x28>)
 80091fa:	f000 fdad 	bl	8009d58 <__assert_func>
 80091fe:	2301      	movs	r3, #1
 8009200:	6144      	str	r4, [r0, #20]
 8009202:	6103      	str	r3, [r0, #16]
 8009204:	bd10      	pop	{r4, pc}
 8009206:	bf00      	nop
 8009208:	0800ab14 	.word	0x0800ab14
 800920c:	0800aba4 	.word	0x0800aba4

08009210 <__multiply>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	4614      	mov	r4, r2
 8009216:	690a      	ldr	r2, [r1, #16]
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	460d      	mov	r5, r1
 800921c:	429a      	cmp	r2, r3
 800921e:	bfbe      	ittt	lt
 8009220:	460b      	movlt	r3, r1
 8009222:	4625      	movlt	r5, r4
 8009224:	461c      	movlt	r4, r3
 8009226:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800922a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800922e:	68ab      	ldr	r3, [r5, #8]
 8009230:	6869      	ldr	r1, [r5, #4]
 8009232:	eb0a 0709 	add.w	r7, sl, r9
 8009236:	42bb      	cmp	r3, r7
 8009238:	b085      	sub	sp, #20
 800923a:	bfb8      	it	lt
 800923c:	3101      	addlt	r1, #1
 800923e:	f7ff fe8d 	bl	8008f5c <_Balloc>
 8009242:	b930      	cbnz	r0, 8009252 <__multiply+0x42>
 8009244:	4602      	mov	r2, r0
 8009246:	f240 115d 	movw	r1, #349	; 0x15d
 800924a:	4b41      	ldr	r3, [pc, #260]	; (8009350 <__multiply+0x140>)
 800924c:	4841      	ldr	r0, [pc, #260]	; (8009354 <__multiply+0x144>)
 800924e:	f000 fd83 	bl	8009d58 <__assert_func>
 8009252:	f100 0614 	add.w	r6, r0, #20
 8009256:	4633      	mov	r3, r6
 8009258:	2200      	movs	r2, #0
 800925a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800925e:	4543      	cmp	r3, r8
 8009260:	d31e      	bcc.n	80092a0 <__multiply+0x90>
 8009262:	f105 0c14 	add.w	ip, r5, #20
 8009266:	f104 0314 	add.w	r3, r4, #20
 800926a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800926e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009272:	9202      	str	r2, [sp, #8]
 8009274:	ebac 0205 	sub.w	r2, ip, r5
 8009278:	3a15      	subs	r2, #21
 800927a:	f022 0203 	bic.w	r2, r2, #3
 800927e:	3204      	adds	r2, #4
 8009280:	f105 0115 	add.w	r1, r5, #21
 8009284:	458c      	cmp	ip, r1
 8009286:	bf38      	it	cc
 8009288:	2204      	movcc	r2, #4
 800928a:	9201      	str	r2, [sp, #4]
 800928c:	9a02      	ldr	r2, [sp, #8]
 800928e:	9303      	str	r3, [sp, #12]
 8009290:	429a      	cmp	r2, r3
 8009292:	d808      	bhi.n	80092a6 <__multiply+0x96>
 8009294:	2f00      	cmp	r7, #0
 8009296:	dc55      	bgt.n	8009344 <__multiply+0x134>
 8009298:	6107      	str	r7, [r0, #16]
 800929a:	b005      	add	sp, #20
 800929c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a0:	f843 2b04 	str.w	r2, [r3], #4
 80092a4:	e7db      	b.n	800925e <__multiply+0x4e>
 80092a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80092aa:	f1ba 0f00 	cmp.w	sl, #0
 80092ae:	d020      	beq.n	80092f2 <__multiply+0xe2>
 80092b0:	46b1      	mov	r9, r6
 80092b2:	2200      	movs	r2, #0
 80092b4:	f105 0e14 	add.w	lr, r5, #20
 80092b8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80092bc:	f8d9 b000 	ldr.w	fp, [r9]
 80092c0:	b2a1      	uxth	r1, r4
 80092c2:	fa1f fb8b 	uxth.w	fp, fp
 80092c6:	fb0a b101 	mla	r1, sl, r1, fp
 80092ca:	4411      	add	r1, r2
 80092cc:	f8d9 2000 	ldr.w	r2, [r9]
 80092d0:	0c24      	lsrs	r4, r4, #16
 80092d2:	0c12      	lsrs	r2, r2, #16
 80092d4:	fb0a 2404 	mla	r4, sl, r4, r2
 80092d8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80092dc:	b289      	uxth	r1, r1
 80092de:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80092e2:	45f4      	cmp	ip, lr
 80092e4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80092e8:	f849 1b04 	str.w	r1, [r9], #4
 80092ec:	d8e4      	bhi.n	80092b8 <__multiply+0xa8>
 80092ee:	9901      	ldr	r1, [sp, #4]
 80092f0:	5072      	str	r2, [r6, r1]
 80092f2:	9a03      	ldr	r2, [sp, #12]
 80092f4:	3304      	adds	r3, #4
 80092f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092fa:	f1b9 0f00 	cmp.w	r9, #0
 80092fe:	d01f      	beq.n	8009340 <__multiply+0x130>
 8009300:	46b6      	mov	lr, r6
 8009302:	f04f 0a00 	mov.w	sl, #0
 8009306:	6834      	ldr	r4, [r6, #0]
 8009308:	f105 0114 	add.w	r1, r5, #20
 800930c:	880a      	ldrh	r2, [r1, #0]
 800930e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009312:	b2a4      	uxth	r4, r4
 8009314:	fb09 b202 	mla	r2, r9, r2, fp
 8009318:	4492      	add	sl, r2
 800931a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800931e:	f84e 4b04 	str.w	r4, [lr], #4
 8009322:	f851 4b04 	ldr.w	r4, [r1], #4
 8009326:	f8be 2000 	ldrh.w	r2, [lr]
 800932a:	0c24      	lsrs	r4, r4, #16
 800932c:	fb09 2404 	mla	r4, r9, r4, r2
 8009330:	458c      	cmp	ip, r1
 8009332:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009336:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800933a:	d8e7      	bhi.n	800930c <__multiply+0xfc>
 800933c:	9a01      	ldr	r2, [sp, #4]
 800933e:	50b4      	str	r4, [r6, r2]
 8009340:	3604      	adds	r6, #4
 8009342:	e7a3      	b.n	800928c <__multiply+0x7c>
 8009344:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1a5      	bne.n	8009298 <__multiply+0x88>
 800934c:	3f01      	subs	r7, #1
 800934e:	e7a1      	b.n	8009294 <__multiply+0x84>
 8009350:	0800ab14 	.word	0x0800ab14
 8009354:	0800aba4 	.word	0x0800aba4

08009358 <__pow5mult>:
 8009358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800935c:	4615      	mov	r5, r2
 800935e:	f012 0203 	ands.w	r2, r2, #3
 8009362:	4606      	mov	r6, r0
 8009364:	460f      	mov	r7, r1
 8009366:	d007      	beq.n	8009378 <__pow5mult+0x20>
 8009368:	4c25      	ldr	r4, [pc, #148]	; (8009400 <__pow5mult+0xa8>)
 800936a:	3a01      	subs	r2, #1
 800936c:	2300      	movs	r3, #0
 800936e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009372:	f7ff fe55 	bl	8009020 <__multadd>
 8009376:	4607      	mov	r7, r0
 8009378:	10ad      	asrs	r5, r5, #2
 800937a:	d03d      	beq.n	80093f8 <__pow5mult+0xa0>
 800937c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800937e:	b97c      	cbnz	r4, 80093a0 <__pow5mult+0x48>
 8009380:	2010      	movs	r0, #16
 8009382:	f7ff fdb5 	bl	8008ef0 <malloc>
 8009386:	4602      	mov	r2, r0
 8009388:	6270      	str	r0, [r6, #36]	; 0x24
 800938a:	b928      	cbnz	r0, 8009398 <__pow5mult+0x40>
 800938c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009390:	4b1c      	ldr	r3, [pc, #112]	; (8009404 <__pow5mult+0xac>)
 8009392:	481d      	ldr	r0, [pc, #116]	; (8009408 <__pow5mult+0xb0>)
 8009394:	f000 fce0 	bl	8009d58 <__assert_func>
 8009398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800939c:	6004      	str	r4, [r0, #0]
 800939e:	60c4      	str	r4, [r0, #12]
 80093a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093a8:	b94c      	cbnz	r4, 80093be <__pow5mult+0x66>
 80093aa:	f240 2171 	movw	r1, #625	; 0x271
 80093ae:	4630      	mov	r0, r6
 80093b0:	f7ff ff18 	bl	80091e4 <__i2b>
 80093b4:	2300      	movs	r3, #0
 80093b6:	4604      	mov	r4, r0
 80093b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80093bc:	6003      	str	r3, [r0, #0]
 80093be:	f04f 0900 	mov.w	r9, #0
 80093c2:	07eb      	lsls	r3, r5, #31
 80093c4:	d50a      	bpl.n	80093dc <__pow5mult+0x84>
 80093c6:	4639      	mov	r1, r7
 80093c8:	4622      	mov	r2, r4
 80093ca:	4630      	mov	r0, r6
 80093cc:	f7ff ff20 	bl	8009210 <__multiply>
 80093d0:	4680      	mov	r8, r0
 80093d2:	4639      	mov	r1, r7
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7ff fe01 	bl	8008fdc <_Bfree>
 80093da:	4647      	mov	r7, r8
 80093dc:	106d      	asrs	r5, r5, #1
 80093de:	d00b      	beq.n	80093f8 <__pow5mult+0xa0>
 80093e0:	6820      	ldr	r0, [r4, #0]
 80093e2:	b938      	cbnz	r0, 80093f4 <__pow5mult+0x9c>
 80093e4:	4622      	mov	r2, r4
 80093e6:	4621      	mov	r1, r4
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7ff ff11 	bl	8009210 <__multiply>
 80093ee:	6020      	str	r0, [r4, #0]
 80093f0:	f8c0 9000 	str.w	r9, [r0]
 80093f4:	4604      	mov	r4, r0
 80093f6:	e7e4      	b.n	80093c2 <__pow5mult+0x6a>
 80093f8:	4638      	mov	r0, r7
 80093fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093fe:	bf00      	nop
 8009400:	0800acf8 	.word	0x0800acf8
 8009404:	0800aa9e 	.word	0x0800aa9e
 8009408:	0800aba4 	.word	0x0800aba4

0800940c <__lshift>:
 800940c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009410:	460c      	mov	r4, r1
 8009412:	4607      	mov	r7, r0
 8009414:	4691      	mov	r9, r2
 8009416:	6923      	ldr	r3, [r4, #16]
 8009418:	6849      	ldr	r1, [r1, #4]
 800941a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009424:	f108 0601 	add.w	r6, r8, #1
 8009428:	42b3      	cmp	r3, r6
 800942a:	db0b      	blt.n	8009444 <__lshift+0x38>
 800942c:	4638      	mov	r0, r7
 800942e:	f7ff fd95 	bl	8008f5c <_Balloc>
 8009432:	4605      	mov	r5, r0
 8009434:	b948      	cbnz	r0, 800944a <__lshift+0x3e>
 8009436:	4602      	mov	r2, r0
 8009438:	f240 11d9 	movw	r1, #473	; 0x1d9
 800943c:	4b27      	ldr	r3, [pc, #156]	; (80094dc <__lshift+0xd0>)
 800943e:	4828      	ldr	r0, [pc, #160]	; (80094e0 <__lshift+0xd4>)
 8009440:	f000 fc8a 	bl	8009d58 <__assert_func>
 8009444:	3101      	adds	r1, #1
 8009446:	005b      	lsls	r3, r3, #1
 8009448:	e7ee      	b.n	8009428 <__lshift+0x1c>
 800944a:	2300      	movs	r3, #0
 800944c:	f100 0114 	add.w	r1, r0, #20
 8009450:	f100 0210 	add.w	r2, r0, #16
 8009454:	4618      	mov	r0, r3
 8009456:	4553      	cmp	r3, sl
 8009458:	db33      	blt.n	80094c2 <__lshift+0xb6>
 800945a:	6920      	ldr	r0, [r4, #16]
 800945c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009460:	f104 0314 	add.w	r3, r4, #20
 8009464:	f019 091f 	ands.w	r9, r9, #31
 8009468:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800946c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009470:	d02b      	beq.n	80094ca <__lshift+0xbe>
 8009472:	468a      	mov	sl, r1
 8009474:	2200      	movs	r2, #0
 8009476:	f1c9 0e20 	rsb	lr, r9, #32
 800947a:	6818      	ldr	r0, [r3, #0]
 800947c:	fa00 f009 	lsl.w	r0, r0, r9
 8009480:	4302      	orrs	r2, r0
 8009482:	f84a 2b04 	str.w	r2, [sl], #4
 8009486:	f853 2b04 	ldr.w	r2, [r3], #4
 800948a:	459c      	cmp	ip, r3
 800948c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009490:	d8f3      	bhi.n	800947a <__lshift+0x6e>
 8009492:	ebac 0304 	sub.w	r3, ip, r4
 8009496:	3b15      	subs	r3, #21
 8009498:	f023 0303 	bic.w	r3, r3, #3
 800949c:	3304      	adds	r3, #4
 800949e:	f104 0015 	add.w	r0, r4, #21
 80094a2:	4584      	cmp	ip, r0
 80094a4:	bf38      	it	cc
 80094a6:	2304      	movcc	r3, #4
 80094a8:	50ca      	str	r2, [r1, r3]
 80094aa:	b10a      	cbz	r2, 80094b0 <__lshift+0xa4>
 80094ac:	f108 0602 	add.w	r6, r8, #2
 80094b0:	3e01      	subs	r6, #1
 80094b2:	4638      	mov	r0, r7
 80094b4:	4621      	mov	r1, r4
 80094b6:	612e      	str	r6, [r5, #16]
 80094b8:	f7ff fd90 	bl	8008fdc <_Bfree>
 80094bc:	4628      	mov	r0, r5
 80094be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80094c6:	3301      	adds	r3, #1
 80094c8:	e7c5      	b.n	8009456 <__lshift+0x4a>
 80094ca:	3904      	subs	r1, #4
 80094cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d0:	459c      	cmp	ip, r3
 80094d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80094d6:	d8f9      	bhi.n	80094cc <__lshift+0xc0>
 80094d8:	e7ea      	b.n	80094b0 <__lshift+0xa4>
 80094da:	bf00      	nop
 80094dc:	0800ab14 	.word	0x0800ab14
 80094e0:	0800aba4 	.word	0x0800aba4

080094e4 <__mcmp>:
 80094e4:	4603      	mov	r3, r0
 80094e6:	690a      	ldr	r2, [r1, #16]
 80094e8:	6900      	ldr	r0, [r0, #16]
 80094ea:	b530      	push	{r4, r5, lr}
 80094ec:	1a80      	subs	r0, r0, r2
 80094ee:	d10d      	bne.n	800950c <__mcmp+0x28>
 80094f0:	3314      	adds	r3, #20
 80094f2:	3114      	adds	r1, #20
 80094f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009504:	4295      	cmp	r5, r2
 8009506:	d002      	beq.n	800950e <__mcmp+0x2a>
 8009508:	d304      	bcc.n	8009514 <__mcmp+0x30>
 800950a:	2001      	movs	r0, #1
 800950c:	bd30      	pop	{r4, r5, pc}
 800950e:	42a3      	cmp	r3, r4
 8009510:	d3f4      	bcc.n	80094fc <__mcmp+0x18>
 8009512:	e7fb      	b.n	800950c <__mcmp+0x28>
 8009514:	f04f 30ff 	mov.w	r0, #4294967295
 8009518:	e7f8      	b.n	800950c <__mcmp+0x28>
	...

0800951c <__mdiff>:
 800951c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009520:	460c      	mov	r4, r1
 8009522:	4606      	mov	r6, r0
 8009524:	4611      	mov	r1, r2
 8009526:	4620      	mov	r0, r4
 8009528:	4692      	mov	sl, r2
 800952a:	f7ff ffdb 	bl	80094e4 <__mcmp>
 800952e:	1e05      	subs	r5, r0, #0
 8009530:	d111      	bne.n	8009556 <__mdiff+0x3a>
 8009532:	4629      	mov	r1, r5
 8009534:	4630      	mov	r0, r6
 8009536:	f7ff fd11 	bl	8008f5c <_Balloc>
 800953a:	4602      	mov	r2, r0
 800953c:	b928      	cbnz	r0, 800954a <__mdiff+0x2e>
 800953e:	f240 2132 	movw	r1, #562	; 0x232
 8009542:	4b3c      	ldr	r3, [pc, #240]	; (8009634 <__mdiff+0x118>)
 8009544:	483c      	ldr	r0, [pc, #240]	; (8009638 <__mdiff+0x11c>)
 8009546:	f000 fc07 	bl	8009d58 <__assert_func>
 800954a:	2301      	movs	r3, #1
 800954c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009550:	4610      	mov	r0, r2
 8009552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009556:	bfa4      	itt	ge
 8009558:	4653      	movge	r3, sl
 800955a:	46a2      	movge	sl, r4
 800955c:	4630      	mov	r0, r6
 800955e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009562:	bfa6      	itte	ge
 8009564:	461c      	movge	r4, r3
 8009566:	2500      	movge	r5, #0
 8009568:	2501      	movlt	r5, #1
 800956a:	f7ff fcf7 	bl	8008f5c <_Balloc>
 800956e:	4602      	mov	r2, r0
 8009570:	b918      	cbnz	r0, 800957a <__mdiff+0x5e>
 8009572:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009576:	4b2f      	ldr	r3, [pc, #188]	; (8009634 <__mdiff+0x118>)
 8009578:	e7e4      	b.n	8009544 <__mdiff+0x28>
 800957a:	f100 0814 	add.w	r8, r0, #20
 800957e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009582:	60c5      	str	r5, [r0, #12]
 8009584:	f04f 0c00 	mov.w	ip, #0
 8009588:	f10a 0514 	add.w	r5, sl, #20
 800958c:	f10a 0010 	add.w	r0, sl, #16
 8009590:	46c2      	mov	sl, r8
 8009592:	6926      	ldr	r6, [r4, #16]
 8009594:	f104 0914 	add.w	r9, r4, #20
 8009598:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800959c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80095a0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80095a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80095a8:	fa1f f18b 	uxth.w	r1, fp
 80095ac:	4461      	add	r1, ip
 80095ae:	fa1f fc83 	uxth.w	ip, r3
 80095b2:	0c1b      	lsrs	r3, r3, #16
 80095b4:	eba1 010c 	sub.w	r1, r1, ip
 80095b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80095c0:	b289      	uxth	r1, r1
 80095c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80095c6:	454e      	cmp	r6, r9
 80095c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80095cc:	f84a 3b04 	str.w	r3, [sl], #4
 80095d0:	d8e6      	bhi.n	80095a0 <__mdiff+0x84>
 80095d2:	1b33      	subs	r3, r6, r4
 80095d4:	3b15      	subs	r3, #21
 80095d6:	f023 0303 	bic.w	r3, r3, #3
 80095da:	3415      	adds	r4, #21
 80095dc:	3304      	adds	r3, #4
 80095de:	42a6      	cmp	r6, r4
 80095e0:	bf38      	it	cc
 80095e2:	2304      	movcc	r3, #4
 80095e4:	441d      	add	r5, r3
 80095e6:	4443      	add	r3, r8
 80095e8:	461e      	mov	r6, r3
 80095ea:	462c      	mov	r4, r5
 80095ec:	4574      	cmp	r4, lr
 80095ee:	d30e      	bcc.n	800960e <__mdiff+0xf2>
 80095f0:	f10e 0103 	add.w	r1, lr, #3
 80095f4:	1b49      	subs	r1, r1, r5
 80095f6:	f021 0103 	bic.w	r1, r1, #3
 80095fa:	3d03      	subs	r5, #3
 80095fc:	45ae      	cmp	lr, r5
 80095fe:	bf38      	it	cc
 8009600:	2100      	movcc	r1, #0
 8009602:	4419      	add	r1, r3
 8009604:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009608:	b18b      	cbz	r3, 800962e <__mdiff+0x112>
 800960a:	6117      	str	r7, [r2, #16]
 800960c:	e7a0      	b.n	8009550 <__mdiff+0x34>
 800960e:	f854 8b04 	ldr.w	r8, [r4], #4
 8009612:	fa1f f188 	uxth.w	r1, r8
 8009616:	4461      	add	r1, ip
 8009618:	1408      	asrs	r0, r1, #16
 800961a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800961e:	b289      	uxth	r1, r1
 8009620:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009624:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009628:	f846 1b04 	str.w	r1, [r6], #4
 800962c:	e7de      	b.n	80095ec <__mdiff+0xd0>
 800962e:	3f01      	subs	r7, #1
 8009630:	e7e8      	b.n	8009604 <__mdiff+0xe8>
 8009632:	bf00      	nop
 8009634:	0800ab14 	.word	0x0800ab14
 8009638:	0800aba4 	.word	0x0800aba4

0800963c <__ulp>:
 800963c:	4b11      	ldr	r3, [pc, #68]	; (8009684 <__ulp+0x48>)
 800963e:	400b      	ands	r3, r1
 8009640:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009644:	2b00      	cmp	r3, #0
 8009646:	dd02      	ble.n	800964e <__ulp+0x12>
 8009648:	2000      	movs	r0, #0
 800964a:	4619      	mov	r1, r3
 800964c:	4770      	bx	lr
 800964e:	425b      	negs	r3, r3
 8009650:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009654:	f04f 0000 	mov.w	r0, #0
 8009658:	f04f 0100 	mov.w	r1, #0
 800965c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009660:	da04      	bge.n	800966c <__ulp+0x30>
 8009662:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009666:	fa43 f102 	asr.w	r1, r3, r2
 800966a:	4770      	bx	lr
 800966c:	f1a2 0314 	sub.w	r3, r2, #20
 8009670:	2b1e      	cmp	r3, #30
 8009672:	bfd6      	itet	le
 8009674:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009678:	2301      	movgt	r3, #1
 800967a:	fa22 f303 	lsrle.w	r3, r2, r3
 800967e:	4618      	mov	r0, r3
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	7ff00000 	.word	0x7ff00000

08009688 <__b2d>:
 8009688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800968c:	6907      	ldr	r7, [r0, #16]
 800968e:	f100 0914 	add.w	r9, r0, #20
 8009692:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009696:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800969a:	f1a7 0804 	sub.w	r8, r7, #4
 800969e:	4630      	mov	r0, r6
 80096a0:	f7ff fd52 	bl	8009148 <__hi0bits>
 80096a4:	f1c0 0320 	rsb	r3, r0, #32
 80096a8:	280a      	cmp	r0, #10
 80096aa:	600b      	str	r3, [r1, #0]
 80096ac:	491f      	ldr	r1, [pc, #124]	; (800972c <__b2d+0xa4>)
 80096ae:	dc17      	bgt.n	80096e0 <__b2d+0x58>
 80096b0:	45c1      	cmp	r9, r8
 80096b2:	bf28      	it	cs
 80096b4:	2200      	movcs	r2, #0
 80096b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80096ba:	fa26 f30c 	lsr.w	r3, r6, ip
 80096be:	bf38      	it	cc
 80096c0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80096c4:	ea43 0501 	orr.w	r5, r3, r1
 80096c8:	f100 0315 	add.w	r3, r0, #21
 80096cc:	fa06 f303 	lsl.w	r3, r6, r3
 80096d0:	fa22 f20c 	lsr.w	r2, r2, ip
 80096d4:	ea43 0402 	orr.w	r4, r3, r2
 80096d8:	4620      	mov	r0, r4
 80096da:	4629      	mov	r1, r5
 80096dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e0:	45c1      	cmp	r9, r8
 80096e2:	bf2e      	itee	cs
 80096e4:	2200      	movcs	r2, #0
 80096e6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80096ea:	f1a7 0808 	subcc.w	r8, r7, #8
 80096ee:	f1b0 030b 	subs.w	r3, r0, #11
 80096f2:	d016      	beq.n	8009722 <__b2d+0x9a>
 80096f4:	f1c3 0720 	rsb	r7, r3, #32
 80096f8:	fa22 f107 	lsr.w	r1, r2, r7
 80096fc:	45c8      	cmp	r8, r9
 80096fe:	fa06 f603 	lsl.w	r6, r6, r3
 8009702:	ea46 0601 	orr.w	r6, r6, r1
 8009706:	bf94      	ite	ls
 8009708:	2100      	movls	r1, #0
 800970a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800970e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009712:	fa02 f003 	lsl.w	r0, r2, r3
 8009716:	40f9      	lsrs	r1, r7
 8009718:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800971c:	ea40 0401 	orr.w	r4, r0, r1
 8009720:	e7da      	b.n	80096d8 <__b2d+0x50>
 8009722:	4614      	mov	r4, r2
 8009724:	ea46 0501 	orr.w	r5, r6, r1
 8009728:	e7d6      	b.n	80096d8 <__b2d+0x50>
 800972a:	bf00      	nop
 800972c:	3ff00000 	.word	0x3ff00000

08009730 <__d2b>:
 8009730:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009734:	2101      	movs	r1, #1
 8009736:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800973a:	4690      	mov	r8, r2
 800973c:	461d      	mov	r5, r3
 800973e:	f7ff fc0d 	bl	8008f5c <_Balloc>
 8009742:	4604      	mov	r4, r0
 8009744:	b930      	cbnz	r0, 8009754 <__d2b+0x24>
 8009746:	4602      	mov	r2, r0
 8009748:	f240 310a 	movw	r1, #778	; 0x30a
 800974c:	4b24      	ldr	r3, [pc, #144]	; (80097e0 <__d2b+0xb0>)
 800974e:	4825      	ldr	r0, [pc, #148]	; (80097e4 <__d2b+0xb4>)
 8009750:	f000 fb02 	bl	8009d58 <__assert_func>
 8009754:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009758:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800975c:	bb2d      	cbnz	r5, 80097aa <__d2b+0x7a>
 800975e:	9301      	str	r3, [sp, #4]
 8009760:	f1b8 0300 	subs.w	r3, r8, #0
 8009764:	d026      	beq.n	80097b4 <__d2b+0x84>
 8009766:	4668      	mov	r0, sp
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	f7ff fd0d 	bl	8009188 <__lo0bits>
 800976e:	9900      	ldr	r1, [sp, #0]
 8009770:	b1f0      	cbz	r0, 80097b0 <__d2b+0x80>
 8009772:	9a01      	ldr	r2, [sp, #4]
 8009774:	f1c0 0320 	rsb	r3, r0, #32
 8009778:	fa02 f303 	lsl.w	r3, r2, r3
 800977c:	430b      	orrs	r3, r1
 800977e:	40c2      	lsrs	r2, r0
 8009780:	6163      	str	r3, [r4, #20]
 8009782:	9201      	str	r2, [sp, #4]
 8009784:	9b01      	ldr	r3, [sp, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	bf14      	ite	ne
 800978a:	2102      	movne	r1, #2
 800978c:	2101      	moveq	r1, #1
 800978e:	61a3      	str	r3, [r4, #24]
 8009790:	6121      	str	r1, [r4, #16]
 8009792:	b1c5      	cbz	r5, 80097c6 <__d2b+0x96>
 8009794:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009798:	4405      	add	r5, r0
 800979a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800979e:	603d      	str	r5, [r7, #0]
 80097a0:	6030      	str	r0, [r6, #0]
 80097a2:	4620      	mov	r0, r4
 80097a4:	b002      	add	sp, #8
 80097a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097ae:	e7d6      	b.n	800975e <__d2b+0x2e>
 80097b0:	6161      	str	r1, [r4, #20]
 80097b2:	e7e7      	b.n	8009784 <__d2b+0x54>
 80097b4:	a801      	add	r0, sp, #4
 80097b6:	f7ff fce7 	bl	8009188 <__lo0bits>
 80097ba:	2101      	movs	r1, #1
 80097bc:	9b01      	ldr	r3, [sp, #4]
 80097be:	6121      	str	r1, [r4, #16]
 80097c0:	6163      	str	r3, [r4, #20]
 80097c2:	3020      	adds	r0, #32
 80097c4:	e7e5      	b.n	8009792 <__d2b+0x62>
 80097c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80097ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097ce:	6038      	str	r0, [r7, #0]
 80097d0:	6918      	ldr	r0, [r3, #16]
 80097d2:	f7ff fcb9 	bl	8009148 <__hi0bits>
 80097d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80097da:	6031      	str	r1, [r6, #0]
 80097dc:	e7e1      	b.n	80097a2 <__d2b+0x72>
 80097de:	bf00      	nop
 80097e0:	0800ab14 	.word	0x0800ab14
 80097e4:	0800aba4 	.word	0x0800aba4

080097e8 <__ratio>:
 80097e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	4688      	mov	r8, r1
 80097ee:	4669      	mov	r1, sp
 80097f0:	4681      	mov	r9, r0
 80097f2:	f7ff ff49 	bl	8009688 <__b2d>
 80097f6:	460f      	mov	r7, r1
 80097f8:	4604      	mov	r4, r0
 80097fa:	460d      	mov	r5, r1
 80097fc:	4640      	mov	r0, r8
 80097fe:	a901      	add	r1, sp, #4
 8009800:	f7ff ff42 	bl	8009688 <__b2d>
 8009804:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009808:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800980c:	468b      	mov	fp, r1
 800980e:	eba3 0c02 	sub.w	ip, r3, r2
 8009812:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009816:	1a9b      	subs	r3, r3, r2
 8009818:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800981c:	2b00      	cmp	r3, #0
 800981e:	bfd5      	itete	le
 8009820:	460a      	movle	r2, r1
 8009822:	462a      	movgt	r2, r5
 8009824:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009828:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800982c:	bfd8      	it	le
 800982e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009832:	465b      	mov	r3, fp
 8009834:	4602      	mov	r2, r0
 8009836:	4639      	mov	r1, r7
 8009838:	4620      	mov	r0, r4
 800983a:	f7f6 ff77 	bl	800072c <__aeabi_ddiv>
 800983e:	b003      	add	sp, #12
 8009840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009844 <__copybits>:
 8009844:	3901      	subs	r1, #1
 8009846:	b570      	push	{r4, r5, r6, lr}
 8009848:	1149      	asrs	r1, r1, #5
 800984a:	6914      	ldr	r4, [r2, #16]
 800984c:	3101      	adds	r1, #1
 800984e:	f102 0314 	add.w	r3, r2, #20
 8009852:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009856:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800985a:	1f05      	subs	r5, r0, #4
 800985c:	42a3      	cmp	r3, r4
 800985e:	d30c      	bcc.n	800987a <__copybits+0x36>
 8009860:	1aa3      	subs	r3, r4, r2
 8009862:	3b11      	subs	r3, #17
 8009864:	f023 0303 	bic.w	r3, r3, #3
 8009868:	3211      	adds	r2, #17
 800986a:	42a2      	cmp	r2, r4
 800986c:	bf88      	it	hi
 800986e:	2300      	movhi	r3, #0
 8009870:	4418      	add	r0, r3
 8009872:	2300      	movs	r3, #0
 8009874:	4288      	cmp	r0, r1
 8009876:	d305      	bcc.n	8009884 <__copybits+0x40>
 8009878:	bd70      	pop	{r4, r5, r6, pc}
 800987a:	f853 6b04 	ldr.w	r6, [r3], #4
 800987e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009882:	e7eb      	b.n	800985c <__copybits+0x18>
 8009884:	f840 3b04 	str.w	r3, [r0], #4
 8009888:	e7f4      	b.n	8009874 <__copybits+0x30>

0800988a <__any_on>:
 800988a:	f100 0214 	add.w	r2, r0, #20
 800988e:	6900      	ldr	r0, [r0, #16]
 8009890:	114b      	asrs	r3, r1, #5
 8009892:	4298      	cmp	r0, r3
 8009894:	b510      	push	{r4, lr}
 8009896:	db11      	blt.n	80098bc <__any_on+0x32>
 8009898:	dd0a      	ble.n	80098b0 <__any_on+0x26>
 800989a:	f011 011f 	ands.w	r1, r1, #31
 800989e:	d007      	beq.n	80098b0 <__any_on+0x26>
 80098a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80098a4:	fa24 f001 	lsr.w	r0, r4, r1
 80098a8:	fa00 f101 	lsl.w	r1, r0, r1
 80098ac:	428c      	cmp	r4, r1
 80098ae:	d10b      	bne.n	80098c8 <__any_on+0x3e>
 80098b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d803      	bhi.n	80098c0 <__any_on+0x36>
 80098b8:	2000      	movs	r0, #0
 80098ba:	bd10      	pop	{r4, pc}
 80098bc:	4603      	mov	r3, r0
 80098be:	e7f7      	b.n	80098b0 <__any_on+0x26>
 80098c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098c4:	2900      	cmp	r1, #0
 80098c6:	d0f5      	beq.n	80098b4 <__any_on+0x2a>
 80098c8:	2001      	movs	r0, #1
 80098ca:	e7f6      	b.n	80098ba <__any_on+0x30>

080098cc <_calloc_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	fb02 f501 	mul.w	r5, r2, r1
 80098d2:	4629      	mov	r1, r5
 80098d4:	f000 f854 	bl	8009980 <_malloc_r>
 80098d8:	4604      	mov	r4, r0
 80098da:	b118      	cbz	r0, 80098e4 <_calloc_r+0x18>
 80098dc:	462a      	mov	r2, r5
 80098de:	2100      	movs	r1, #0
 80098e0:	f7fc fbd2 	bl	8006088 <memset>
 80098e4:	4620      	mov	r0, r4
 80098e6:	bd38      	pop	{r3, r4, r5, pc}

080098e8 <_free_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	4605      	mov	r5, r0
 80098ec:	2900      	cmp	r1, #0
 80098ee:	d043      	beq.n	8009978 <_free_r+0x90>
 80098f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098f4:	1f0c      	subs	r4, r1, #4
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	bfb8      	it	lt
 80098fa:	18e4      	addlt	r4, r4, r3
 80098fc:	f000 fa76 	bl	8009dec <__malloc_lock>
 8009900:	4a1e      	ldr	r2, [pc, #120]	; (800997c <_free_r+0x94>)
 8009902:	6813      	ldr	r3, [r2, #0]
 8009904:	4610      	mov	r0, r2
 8009906:	b933      	cbnz	r3, 8009916 <_free_r+0x2e>
 8009908:	6063      	str	r3, [r4, #4]
 800990a:	6014      	str	r4, [r2, #0]
 800990c:	4628      	mov	r0, r5
 800990e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009912:	f000 ba71 	b.w	8009df8 <__malloc_unlock>
 8009916:	42a3      	cmp	r3, r4
 8009918:	d90a      	bls.n	8009930 <_free_r+0x48>
 800991a:	6821      	ldr	r1, [r4, #0]
 800991c:	1862      	adds	r2, r4, r1
 800991e:	4293      	cmp	r3, r2
 8009920:	bf01      	itttt	eq
 8009922:	681a      	ldreq	r2, [r3, #0]
 8009924:	685b      	ldreq	r3, [r3, #4]
 8009926:	1852      	addeq	r2, r2, r1
 8009928:	6022      	streq	r2, [r4, #0]
 800992a:	6063      	str	r3, [r4, #4]
 800992c:	6004      	str	r4, [r0, #0]
 800992e:	e7ed      	b.n	800990c <_free_r+0x24>
 8009930:	461a      	mov	r2, r3
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	b10b      	cbz	r3, 800993a <_free_r+0x52>
 8009936:	42a3      	cmp	r3, r4
 8009938:	d9fa      	bls.n	8009930 <_free_r+0x48>
 800993a:	6811      	ldr	r1, [r2, #0]
 800993c:	1850      	adds	r0, r2, r1
 800993e:	42a0      	cmp	r0, r4
 8009940:	d10b      	bne.n	800995a <_free_r+0x72>
 8009942:	6820      	ldr	r0, [r4, #0]
 8009944:	4401      	add	r1, r0
 8009946:	1850      	adds	r0, r2, r1
 8009948:	4283      	cmp	r3, r0
 800994a:	6011      	str	r1, [r2, #0]
 800994c:	d1de      	bne.n	800990c <_free_r+0x24>
 800994e:	6818      	ldr	r0, [r3, #0]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	4401      	add	r1, r0
 8009954:	6011      	str	r1, [r2, #0]
 8009956:	6053      	str	r3, [r2, #4]
 8009958:	e7d8      	b.n	800990c <_free_r+0x24>
 800995a:	d902      	bls.n	8009962 <_free_r+0x7a>
 800995c:	230c      	movs	r3, #12
 800995e:	602b      	str	r3, [r5, #0]
 8009960:	e7d4      	b.n	800990c <_free_r+0x24>
 8009962:	6820      	ldr	r0, [r4, #0]
 8009964:	1821      	adds	r1, r4, r0
 8009966:	428b      	cmp	r3, r1
 8009968:	bf01      	itttt	eq
 800996a:	6819      	ldreq	r1, [r3, #0]
 800996c:	685b      	ldreq	r3, [r3, #4]
 800996e:	1809      	addeq	r1, r1, r0
 8009970:	6021      	streq	r1, [r4, #0]
 8009972:	6063      	str	r3, [r4, #4]
 8009974:	6054      	str	r4, [r2, #4]
 8009976:	e7c9      	b.n	800990c <_free_r+0x24>
 8009978:	bd38      	pop	{r3, r4, r5, pc}
 800997a:	bf00      	nop
 800997c:	2000020c 	.word	0x2000020c

08009980 <_malloc_r>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	1ccd      	adds	r5, r1, #3
 8009984:	f025 0503 	bic.w	r5, r5, #3
 8009988:	3508      	adds	r5, #8
 800998a:	2d0c      	cmp	r5, #12
 800998c:	bf38      	it	cc
 800998e:	250c      	movcc	r5, #12
 8009990:	2d00      	cmp	r5, #0
 8009992:	4606      	mov	r6, r0
 8009994:	db01      	blt.n	800999a <_malloc_r+0x1a>
 8009996:	42a9      	cmp	r1, r5
 8009998:	d903      	bls.n	80099a2 <_malloc_r+0x22>
 800999a:	230c      	movs	r3, #12
 800999c:	6033      	str	r3, [r6, #0]
 800999e:	2000      	movs	r0, #0
 80099a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a2:	f000 fa23 	bl	8009dec <__malloc_lock>
 80099a6:	4921      	ldr	r1, [pc, #132]	; (8009a2c <_malloc_r+0xac>)
 80099a8:	680a      	ldr	r2, [r1, #0]
 80099aa:	4614      	mov	r4, r2
 80099ac:	b99c      	cbnz	r4, 80099d6 <_malloc_r+0x56>
 80099ae:	4f20      	ldr	r7, [pc, #128]	; (8009a30 <_malloc_r+0xb0>)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	b923      	cbnz	r3, 80099be <_malloc_r+0x3e>
 80099b4:	4621      	mov	r1, r4
 80099b6:	4630      	mov	r0, r6
 80099b8:	f000 f99e 	bl	8009cf8 <_sbrk_r>
 80099bc:	6038      	str	r0, [r7, #0]
 80099be:	4629      	mov	r1, r5
 80099c0:	4630      	mov	r0, r6
 80099c2:	f000 f999 	bl	8009cf8 <_sbrk_r>
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	d123      	bne.n	8009a12 <_malloc_r+0x92>
 80099ca:	230c      	movs	r3, #12
 80099cc:	4630      	mov	r0, r6
 80099ce:	6033      	str	r3, [r6, #0]
 80099d0:	f000 fa12 	bl	8009df8 <__malloc_unlock>
 80099d4:	e7e3      	b.n	800999e <_malloc_r+0x1e>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	1b5b      	subs	r3, r3, r5
 80099da:	d417      	bmi.n	8009a0c <_malloc_r+0x8c>
 80099dc:	2b0b      	cmp	r3, #11
 80099de:	d903      	bls.n	80099e8 <_malloc_r+0x68>
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	441c      	add	r4, r3
 80099e4:	6025      	str	r5, [r4, #0]
 80099e6:	e004      	b.n	80099f2 <_malloc_r+0x72>
 80099e8:	6863      	ldr	r3, [r4, #4]
 80099ea:	42a2      	cmp	r2, r4
 80099ec:	bf0c      	ite	eq
 80099ee:	600b      	streq	r3, [r1, #0]
 80099f0:	6053      	strne	r3, [r2, #4]
 80099f2:	4630      	mov	r0, r6
 80099f4:	f000 fa00 	bl	8009df8 <__malloc_unlock>
 80099f8:	f104 000b 	add.w	r0, r4, #11
 80099fc:	1d23      	adds	r3, r4, #4
 80099fe:	f020 0007 	bic.w	r0, r0, #7
 8009a02:	1ac2      	subs	r2, r0, r3
 8009a04:	d0cc      	beq.n	80099a0 <_malloc_r+0x20>
 8009a06:	1a1b      	subs	r3, r3, r0
 8009a08:	50a3      	str	r3, [r4, r2]
 8009a0a:	e7c9      	b.n	80099a0 <_malloc_r+0x20>
 8009a0c:	4622      	mov	r2, r4
 8009a0e:	6864      	ldr	r4, [r4, #4]
 8009a10:	e7cc      	b.n	80099ac <_malloc_r+0x2c>
 8009a12:	1cc4      	adds	r4, r0, #3
 8009a14:	f024 0403 	bic.w	r4, r4, #3
 8009a18:	42a0      	cmp	r0, r4
 8009a1a:	d0e3      	beq.n	80099e4 <_malloc_r+0x64>
 8009a1c:	1a21      	subs	r1, r4, r0
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f000 f96a 	bl	8009cf8 <_sbrk_r>
 8009a24:	3001      	adds	r0, #1
 8009a26:	d1dd      	bne.n	80099e4 <_malloc_r+0x64>
 8009a28:	e7cf      	b.n	80099ca <_malloc_r+0x4a>
 8009a2a:	bf00      	nop
 8009a2c:	2000020c 	.word	0x2000020c
 8009a30:	20000210 	.word	0x20000210

08009a34 <__ssputs_r>:
 8009a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a38:	688e      	ldr	r6, [r1, #8]
 8009a3a:	4682      	mov	sl, r0
 8009a3c:	429e      	cmp	r6, r3
 8009a3e:	460c      	mov	r4, r1
 8009a40:	4690      	mov	r8, r2
 8009a42:	461f      	mov	r7, r3
 8009a44:	d838      	bhi.n	8009ab8 <__ssputs_r+0x84>
 8009a46:	898a      	ldrh	r2, [r1, #12]
 8009a48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a4c:	d032      	beq.n	8009ab4 <__ssputs_r+0x80>
 8009a4e:	6825      	ldr	r5, [r4, #0]
 8009a50:	6909      	ldr	r1, [r1, #16]
 8009a52:	3301      	adds	r3, #1
 8009a54:	eba5 0901 	sub.w	r9, r5, r1
 8009a58:	6965      	ldr	r5, [r4, #20]
 8009a5a:	444b      	add	r3, r9
 8009a5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a64:	106d      	asrs	r5, r5, #1
 8009a66:	429d      	cmp	r5, r3
 8009a68:	bf38      	it	cc
 8009a6a:	461d      	movcc	r5, r3
 8009a6c:	0553      	lsls	r3, r2, #21
 8009a6e:	d531      	bpl.n	8009ad4 <__ssputs_r+0xa0>
 8009a70:	4629      	mov	r1, r5
 8009a72:	f7ff ff85 	bl	8009980 <_malloc_r>
 8009a76:	4606      	mov	r6, r0
 8009a78:	b950      	cbnz	r0, 8009a90 <__ssputs_r+0x5c>
 8009a7a:	230c      	movs	r3, #12
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	f8ca 3000 	str.w	r3, [sl]
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a8a:	81a3      	strh	r3, [r4, #12]
 8009a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a90:	464a      	mov	r2, r9
 8009a92:	6921      	ldr	r1, [r4, #16]
 8009a94:	f7ff fa54 	bl	8008f40 <memcpy>
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa2:	81a3      	strh	r3, [r4, #12]
 8009aa4:	6126      	str	r6, [r4, #16]
 8009aa6:	444e      	add	r6, r9
 8009aa8:	6026      	str	r6, [r4, #0]
 8009aaa:	463e      	mov	r6, r7
 8009aac:	6165      	str	r5, [r4, #20]
 8009aae:	eba5 0509 	sub.w	r5, r5, r9
 8009ab2:	60a5      	str	r5, [r4, #8]
 8009ab4:	42be      	cmp	r6, r7
 8009ab6:	d900      	bls.n	8009aba <__ssputs_r+0x86>
 8009ab8:	463e      	mov	r6, r7
 8009aba:	4632      	mov	r2, r6
 8009abc:	4641      	mov	r1, r8
 8009abe:	6820      	ldr	r0, [r4, #0]
 8009ac0:	f000 f97a 	bl	8009db8 <memmove>
 8009ac4:	68a3      	ldr	r3, [r4, #8]
 8009ac6:	6822      	ldr	r2, [r4, #0]
 8009ac8:	1b9b      	subs	r3, r3, r6
 8009aca:	4432      	add	r2, r6
 8009acc:	2000      	movs	r0, #0
 8009ace:	60a3      	str	r3, [r4, #8]
 8009ad0:	6022      	str	r2, [r4, #0]
 8009ad2:	e7db      	b.n	8009a8c <__ssputs_r+0x58>
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	f000 f995 	bl	8009e04 <_realloc_r>
 8009ada:	4606      	mov	r6, r0
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d1e1      	bne.n	8009aa4 <__ssputs_r+0x70>
 8009ae0:	4650      	mov	r0, sl
 8009ae2:	6921      	ldr	r1, [r4, #16]
 8009ae4:	f7ff ff00 	bl	80098e8 <_free_r>
 8009ae8:	e7c7      	b.n	8009a7a <__ssputs_r+0x46>
	...

08009aec <_svfiprintf_r>:
 8009aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	4698      	mov	r8, r3
 8009af2:	898b      	ldrh	r3, [r1, #12]
 8009af4:	4607      	mov	r7, r0
 8009af6:	061b      	lsls	r3, r3, #24
 8009af8:	460d      	mov	r5, r1
 8009afa:	4614      	mov	r4, r2
 8009afc:	b09d      	sub	sp, #116	; 0x74
 8009afe:	d50e      	bpl.n	8009b1e <_svfiprintf_r+0x32>
 8009b00:	690b      	ldr	r3, [r1, #16]
 8009b02:	b963      	cbnz	r3, 8009b1e <_svfiprintf_r+0x32>
 8009b04:	2140      	movs	r1, #64	; 0x40
 8009b06:	f7ff ff3b 	bl	8009980 <_malloc_r>
 8009b0a:	6028      	str	r0, [r5, #0]
 8009b0c:	6128      	str	r0, [r5, #16]
 8009b0e:	b920      	cbnz	r0, 8009b1a <_svfiprintf_r+0x2e>
 8009b10:	230c      	movs	r3, #12
 8009b12:	603b      	str	r3, [r7, #0]
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295
 8009b18:	e0d1      	b.n	8009cbe <_svfiprintf_r+0x1d2>
 8009b1a:	2340      	movs	r3, #64	; 0x40
 8009b1c:	616b      	str	r3, [r5, #20]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	9309      	str	r3, [sp, #36]	; 0x24
 8009b22:	2320      	movs	r3, #32
 8009b24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b28:	2330      	movs	r3, #48	; 0x30
 8009b2a:	f04f 0901 	mov.w	r9, #1
 8009b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009cd8 <_svfiprintf_r+0x1ec>
 8009b36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b3a:	4623      	mov	r3, r4
 8009b3c:	469a      	mov	sl, r3
 8009b3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b42:	b10a      	cbz	r2, 8009b48 <_svfiprintf_r+0x5c>
 8009b44:	2a25      	cmp	r2, #37	; 0x25
 8009b46:	d1f9      	bne.n	8009b3c <_svfiprintf_r+0x50>
 8009b48:	ebba 0b04 	subs.w	fp, sl, r4
 8009b4c:	d00b      	beq.n	8009b66 <_svfiprintf_r+0x7a>
 8009b4e:	465b      	mov	r3, fp
 8009b50:	4622      	mov	r2, r4
 8009b52:	4629      	mov	r1, r5
 8009b54:	4638      	mov	r0, r7
 8009b56:	f7ff ff6d 	bl	8009a34 <__ssputs_r>
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	f000 80aa 	beq.w	8009cb4 <_svfiprintf_r+0x1c8>
 8009b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b62:	445a      	add	r2, fp
 8009b64:	9209      	str	r2, [sp, #36]	; 0x24
 8009b66:	f89a 3000 	ldrb.w	r3, [sl]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 80a2 	beq.w	8009cb4 <_svfiprintf_r+0x1c8>
 8009b70:	2300      	movs	r3, #0
 8009b72:	f04f 32ff 	mov.w	r2, #4294967295
 8009b76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b7a:	f10a 0a01 	add.w	sl, sl, #1
 8009b7e:	9304      	str	r3, [sp, #16]
 8009b80:	9307      	str	r3, [sp, #28]
 8009b82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b86:	931a      	str	r3, [sp, #104]	; 0x68
 8009b88:	4654      	mov	r4, sl
 8009b8a:	2205      	movs	r2, #5
 8009b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b90:	4851      	ldr	r0, [pc, #324]	; (8009cd8 <_svfiprintf_r+0x1ec>)
 8009b92:	f7ff f9c7 	bl	8008f24 <memchr>
 8009b96:	9a04      	ldr	r2, [sp, #16]
 8009b98:	b9d8      	cbnz	r0, 8009bd2 <_svfiprintf_r+0xe6>
 8009b9a:	06d0      	lsls	r0, r2, #27
 8009b9c:	bf44      	itt	mi
 8009b9e:	2320      	movmi	r3, #32
 8009ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ba4:	0711      	lsls	r1, r2, #28
 8009ba6:	bf44      	itt	mi
 8009ba8:	232b      	movmi	r3, #43	; 0x2b
 8009baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bae:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009bb4:	d015      	beq.n	8009be2 <_svfiprintf_r+0xf6>
 8009bb6:	4654      	mov	r4, sl
 8009bb8:	2000      	movs	r0, #0
 8009bba:	f04f 0c0a 	mov.w	ip, #10
 8009bbe:	9a07      	ldr	r2, [sp, #28]
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bc6:	3b30      	subs	r3, #48	; 0x30
 8009bc8:	2b09      	cmp	r3, #9
 8009bca:	d94e      	bls.n	8009c6a <_svfiprintf_r+0x17e>
 8009bcc:	b1b0      	cbz	r0, 8009bfc <_svfiprintf_r+0x110>
 8009bce:	9207      	str	r2, [sp, #28]
 8009bd0:	e014      	b.n	8009bfc <_svfiprintf_r+0x110>
 8009bd2:	eba0 0308 	sub.w	r3, r0, r8
 8009bd6:	fa09 f303 	lsl.w	r3, r9, r3
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	46a2      	mov	sl, r4
 8009bde:	9304      	str	r3, [sp, #16]
 8009be0:	e7d2      	b.n	8009b88 <_svfiprintf_r+0x9c>
 8009be2:	9b03      	ldr	r3, [sp, #12]
 8009be4:	1d19      	adds	r1, r3, #4
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	9103      	str	r1, [sp, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	bfbb      	ittet	lt
 8009bee:	425b      	neglt	r3, r3
 8009bf0:	f042 0202 	orrlt.w	r2, r2, #2
 8009bf4:	9307      	strge	r3, [sp, #28]
 8009bf6:	9307      	strlt	r3, [sp, #28]
 8009bf8:	bfb8      	it	lt
 8009bfa:	9204      	strlt	r2, [sp, #16]
 8009bfc:	7823      	ldrb	r3, [r4, #0]
 8009bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8009c00:	d10c      	bne.n	8009c1c <_svfiprintf_r+0x130>
 8009c02:	7863      	ldrb	r3, [r4, #1]
 8009c04:	2b2a      	cmp	r3, #42	; 0x2a
 8009c06:	d135      	bne.n	8009c74 <_svfiprintf_r+0x188>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	3402      	adds	r4, #2
 8009c0c:	1d1a      	adds	r2, r3, #4
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	9203      	str	r2, [sp, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	bfb8      	it	lt
 8009c16:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c1a:	9305      	str	r3, [sp, #20]
 8009c1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ce8 <_svfiprintf_r+0x1fc>
 8009c20:	2203      	movs	r2, #3
 8009c22:	4650      	mov	r0, sl
 8009c24:	7821      	ldrb	r1, [r4, #0]
 8009c26:	f7ff f97d 	bl	8008f24 <memchr>
 8009c2a:	b140      	cbz	r0, 8009c3e <_svfiprintf_r+0x152>
 8009c2c:	2340      	movs	r3, #64	; 0x40
 8009c2e:	eba0 000a 	sub.w	r0, r0, sl
 8009c32:	fa03 f000 	lsl.w	r0, r3, r0
 8009c36:	9b04      	ldr	r3, [sp, #16]
 8009c38:	3401      	adds	r4, #1
 8009c3a:	4303      	orrs	r3, r0
 8009c3c:	9304      	str	r3, [sp, #16]
 8009c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c42:	2206      	movs	r2, #6
 8009c44:	4825      	ldr	r0, [pc, #148]	; (8009cdc <_svfiprintf_r+0x1f0>)
 8009c46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c4a:	f7ff f96b 	bl	8008f24 <memchr>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d038      	beq.n	8009cc4 <_svfiprintf_r+0x1d8>
 8009c52:	4b23      	ldr	r3, [pc, #140]	; (8009ce0 <_svfiprintf_r+0x1f4>)
 8009c54:	bb1b      	cbnz	r3, 8009c9e <_svfiprintf_r+0x1b2>
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	3307      	adds	r3, #7
 8009c5a:	f023 0307 	bic.w	r3, r3, #7
 8009c5e:	3308      	adds	r3, #8
 8009c60:	9303      	str	r3, [sp, #12]
 8009c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c64:	4433      	add	r3, r6
 8009c66:	9309      	str	r3, [sp, #36]	; 0x24
 8009c68:	e767      	b.n	8009b3a <_svfiprintf_r+0x4e>
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	2001      	movs	r0, #1
 8009c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c72:	e7a5      	b.n	8009bc0 <_svfiprintf_r+0xd4>
 8009c74:	2300      	movs	r3, #0
 8009c76:	f04f 0c0a 	mov.w	ip, #10
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	3401      	adds	r4, #1
 8009c7e:	9305      	str	r3, [sp, #20]
 8009c80:	4620      	mov	r0, r4
 8009c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c86:	3a30      	subs	r2, #48	; 0x30
 8009c88:	2a09      	cmp	r2, #9
 8009c8a:	d903      	bls.n	8009c94 <_svfiprintf_r+0x1a8>
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d0c5      	beq.n	8009c1c <_svfiprintf_r+0x130>
 8009c90:	9105      	str	r1, [sp, #20]
 8009c92:	e7c3      	b.n	8009c1c <_svfiprintf_r+0x130>
 8009c94:	4604      	mov	r4, r0
 8009c96:	2301      	movs	r3, #1
 8009c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c9c:	e7f0      	b.n	8009c80 <_svfiprintf_r+0x194>
 8009c9e:	ab03      	add	r3, sp, #12
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	462a      	mov	r2, r5
 8009ca4:	4638      	mov	r0, r7
 8009ca6:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <_svfiprintf_r+0x1f8>)
 8009ca8:	a904      	add	r1, sp, #16
 8009caa:	f7fc fa93 	bl	80061d4 <_printf_float>
 8009cae:	1c42      	adds	r2, r0, #1
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	d1d6      	bne.n	8009c62 <_svfiprintf_r+0x176>
 8009cb4:	89ab      	ldrh	r3, [r5, #12]
 8009cb6:	065b      	lsls	r3, r3, #25
 8009cb8:	f53f af2c 	bmi.w	8009b14 <_svfiprintf_r+0x28>
 8009cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cbe:	b01d      	add	sp, #116	; 0x74
 8009cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc4:	ab03      	add	r3, sp, #12
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	462a      	mov	r2, r5
 8009cca:	4638      	mov	r0, r7
 8009ccc:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <_svfiprintf_r+0x1f8>)
 8009cce:	a904      	add	r1, sp, #16
 8009cd0:	f7fc fd1c 	bl	800670c <_printf_i>
 8009cd4:	e7eb      	b.n	8009cae <_svfiprintf_r+0x1c2>
 8009cd6:	bf00      	nop
 8009cd8:	0800ad04 	.word	0x0800ad04
 8009cdc:	0800ad0e 	.word	0x0800ad0e
 8009ce0:	080061d5 	.word	0x080061d5
 8009ce4:	08009a35 	.word	0x08009a35
 8009ce8:	0800ad0a 	.word	0x0800ad0a

08009cec <nan>:
 8009cec:	2000      	movs	r0, #0
 8009cee:	4901      	ldr	r1, [pc, #4]	; (8009cf4 <nan+0x8>)
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	7ff80000 	.word	0x7ff80000

08009cf8 <_sbrk_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	4d05      	ldr	r5, [pc, #20]	; (8009d14 <_sbrk_r+0x1c>)
 8009cfe:	4604      	mov	r4, r0
 8009d00:	4608      	mov	r0, r1
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	f7f8 fa4e 	bl	80021a4 <_sbrk>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_sbrk_r+0x1a>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_sbrk_r+0x1a>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	200004b4 	.word	0x200004b4

08009d18 <strncmp>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	b16a      	cbz	r2, 8009d38 <strncmp+0x20>
 8009d1c:	3901      	subs	r1, #1
 8009d1e:	1884      	adds	r4, r0, r2
 8009d20:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009d24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d103      	bne.n	8009d34 <strncmp+0x1c>
 8009d2c:	42a0      	cmp	r0, r4
 8009d2e:	d001      	beq.n	8009d34 <strncmp+0x1c>
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1f5      	bne.n	8009d20 <strncmp+0x8>
 8009d34:	1a98      	subs	r0, r3, r2
 8009d36:	bd10      	pop	{r4, pc}
 8009d38:	4610      	mov	r0, r2
 8009d3a:	e7fc      	b.n	8009d36 <strncmp+0x1e>

08009d3c <__ascii_wctomb>:
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	4608      	mov	r0, r1
 8009d40:	b141      	cbz	r1, 8009d54 <__ascii_wctomb+0x18>
 8009d42:	2aff      	cmp	r2, #255	; 0xff
 8009d44:	d904      	bls.n	8009d50 <__ascii_wctomb+0x14>
 8009d46:	228a      	movs	r2, #138	; 0x8a
 8009d48:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4c:	601a      	str	r2, [r3, #0]
 8009d4e:	4770      	bx	lr
 8009d50:	2001      	movs	r0, #1
 8009d52:	700a      	strb	r2, [r1, #0]
 8009d54:	4770      	bx	lr
	...

08009d58 <__assert_func>:
 8009d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d5a:	4614      	mov	r4, r2
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <__assert_func+0x2c>)
 8009d60:	4605      	mov	r5, r0
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68d8      	ldr	r0, [r3, #12]
 8009d66:	b14c      	cbz	r4, 8009d7c <__assert_func+0x24>
 8009d68:	4b07      	ldr	r3, [pc, #28]	; (8009d88 <__assert_func+0x30>)
 8009d6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d6e:	9100      	str	r1, [sp, #0]
 8009d70:	462b      	mov	r3, r5
 8009d72:	4906      	ldr	r1, [pc, #24]	; (8009d8c <__assert_func+0x34>)
 8009d74:	f000 f80e 	bl	8009d94 <fiprintf>
 8009d78:	f000 fa82 	bl	800a280 <abort>
 8009d7c:	4b04      	ldr	r3, [pc, #16]	; (8009d90 <__assert_func+0x38>)
 8009d7e:	461c      	mov	r4, r3
 8009d80:	e7f3      	b.n	8009d6a <__assert_func+0x12>
 8009d82:	bf00      	nop
 8009d84:	2000000c 	.word	0x2000000c
 8009d88:	0800ad15 	.word	0x0800ad15
 8009d8c:	0800ad22 	.word	0x0800ad22
 8009d90:	0800ad50 	.word	0x0800ad50

08009d94 <fiprintf>:
 8009d94:	b40e      	push	{r1, r2, r3}
 8009d96:	b503      	push	{r0, r1, lr}
 8009d98:	4601      	mov	r1, r0
 8009d9a:	ab03      	add	r3, sp, #12
 8009d9c:	4805      	ldr	r0, [pc, #20]	; (8009db4 <fiprintf+0x20>)
 8009d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009da2:	6800      	ldr	r0, [r0, #0]
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	f000 f87b 	bl	8009ea0 <_vfiprintf_r>
 8009daa:	b002      	add	sp, #8
 8009dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009db0:	b003      	add	sp, #12
 8009db2:	4770      	bx	lr
 8009db4:	2000000c 	.word	0x2000000c

08009db8 <memmove>:
 8009db8:	4288      	cmp	r0, r1
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	eb01 0402 	add.w	r4, r1, r2
 8009dc0:	d902      	bls.n	8009dc8 <memmove+0x10>
 8009dc2:	4284      	cmp	r4, r0
 8009dc4:	4623      	mov	r3, r4
 8009dc6:	d807      	bhi.n	8009dd8 <memmove+0x20>
 8009dc8:	1e43      	subs	r3, r0, #1
 8009dca:	42a1      	cmp	r1, r4
 8009dcc:	d008      	beq.n	8009de0 <memmove+0x28>
 8009dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dd6:	e7f8      	b.n	8009dca <memmove+0x12>
 8009dd8:	4601      	mov	r1, r0
 8009dda:	4402      	add	r2, r0
 8009ddc:	428a      	cmp	r2, r1
 8009dde:	d100      	bne.n	8009de2 <memmove+0x2a>
 8009de0:	bd10      	pop	{r4, pc}
 8009de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dea:	e7f7      	b.n	8009ddc <memmove+0x24>

08009dec <__malloc_lock>:
 8009dec:	4801      	ldr	r0, [pc, #4]	; (8009df4 <__malloc_lock+0x8>)
 8009dee:	f000 bc07 	b.w	800a600 <__retarget_lock_acquire_recursive>
 8009df2:	bf00      	nop
 8009df4:	200004bc 	.word	0x200004bc

08009df8 <__malloc_unlock>:
 8009df8:	4801      	ldr	r0, [pc, #4]	; (8009e00 <__malloc_unlock+0x8>)
 8009dfa:	f000 bc02 	b.w	800a602 <__retarget_lock_release_recursive>
 8009dfe:	bf00      	nop
 8009e00:	200004bc 	.word	0x200004bc

08009e04 <_realloc_r>:
 8009e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e06:	4607      	mov	r7, r0
 8009e08:	4614      	mov	r4, r2
 8009e0a:	460e      	mov	r6, r1
 8009e0c:	b921      	cbnz	r1, 8009e18 <_realloc_r+0x14>
 8009e0e:	4611      	mov	r1, r2
 8009e10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e14:	f7ff bdb4 	b.w	8009980 <_malloc_r>
 8009e18:	b922      	cbnz	r2, 8009e24 <_realloc_r+0x20>
 8009e1a:	f7ff fd65 	bl	80098e8 <_free_r>
 8009e1e:	4625      	mov	r5, r4
 8009e20:	4628      	mov	r0, r5
 8009e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e24:	f000 fc52 	bl	800a6cc <_malloc_usable_size_r>
 8009e28:	42a0      	cmp	r0, r4
 8009e2a:	d20f      	bcs.n	8009e4c <_realloc_r+0x48>
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	4638      	mov	r0, r7
 8009e30:	f7ff fda6 	bl	8009980 <_malloc_r>
 8009e34:	4605      	mov	r5, r0
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d0f2      	beq.n	8009e20 <_realloc_r+0x1c>
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	f7ff f87f 	bl	8008f40 <memcpy>
 8009e42:	4631      	mov	r1, r6
 8009e44:	4638      	mov	r0, r7
 8009e46:	f7ff fd4f 	bl	80098e8 <_free_r>
 8009e4a:	e7e9      	b.n	8009e20 <_realloc_r+0x1c>
 8009e4c:	4635      	mov	r5, r6
 8009e4e:	e7e7      	b.n	8009e20 <_realloc_r+0x1c>

08009e50 <__sfputc_r>:
 8009e50:	6893      	ldr	r3, [r2, #8]
 8009e52:	b410      	push	{r4}
 8009e54:	3b01      	subs	r3, #1
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	6093      	str	r3, [r2, #8]
 8009e5a:	da07      	bge.n	8009e6c <__sfputc_r+0x1c>
 8009e5c:	6994      	ldr	r4, [r2, #24]
 8009e5e:	42a3      	cmp	r3, r4
 8009e60:	db01      	blt.n	8009e66 <__sfputc_r+0x16>
 8009e62:	290a      	cmp	r1, #10
 8009e64:	d102      	bne.n	8009e6c <__sfputc_r+0x1c>
 8009e66:	bc10      	pop	{r4}
 8009e68:	f000 b94a 	b.w	800a100 <__swbuf_r>
 8009e6c:	6813      	ldr	r3, [r2, #0]
 8009e6e:	1c58      	adds	r0, r3, #1
 8009e70:	6010      	str	r0, [r2, #0]
 8009e72:	7019      	strb	r1, [r3, #0]
 8009e74:	4608      	mov	r0, r1
 8009e76:	bc10      	pop	{r4}
 8009e78:	4770      	bx	lr

08009e7a <__sfputs_r>:
 8009e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	460f      	mov	r7, r1
 8009e80:	4614      	mov	r4, r2
 8009e82:	18d5      	adds	r5, r2, r3
 8009e84:	42ac      	cmp	r4, r5
 8009e86:	d101      	bne.n	8009e8c <__sfputs_r+0x12>
 8009e88:	2000      	movs	r0, #0
 8009e8a:	e007      	b.n	8009e9c <__sfputs_r+0x22>
 8009e8c:	463a      	mov	r2, r7
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e94:	f7ff ffdc 	bl	8009e50 <__sfputc_r>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d1f3      	bne.n	8009e84 <__sfputs_r+0xa>
 8009e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ea0 <_vfiprintf_r>:
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	460d      	mov	r5, r1
 8009ea6:	4614      	mov	r4, r2
 8009ea8:	4698      	mov	r8, r3
 8009eaa:	4606      	mov	r6, r0
 8009eac:	b09d      	sub	sp, #116	; 0x74
 8009eae:	b118      	cbz	r0, 8009eb8 <_vfiprintf_r+0x18>
 8009eb0:	6983      	ldr	r3, [r0, #24]
 8009eb2:	b90b      	cbnz	r3, 8009eb8 <_vfiprintf_r+0x18>
 8009eb4:	f000 fb06 	bl	800a4c4 <__sinit>
 8009eb8:	4b89      	ldr	r3, [pc, #548]	; (800a0e0 <_vfiprintf_r+0x240>)
 8009eba:	429d      	cmp	r5, r3
 8009ebc:	d11b      	bne.n	8009ef6 <_vfiprintf_r+0x56>
 8009ebe:	6875      	ldr	r5, [r6, #4]
 8009ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ec2:	07d9      	lsls	r1, r3, #31
 8009ec4:	d405      	bmi.n	8009ed2 <_vfiprintf_r+0x32>
 8009ec6:	89ab      	ldrh	r3, [r5, #12]
 8009ec8:	059a      	lsls	r2, r3, #22
 8009eca:	d402      	bmi.n	8009ed2 <_vfiprintf_r+0x32>
 8009ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ece:	f000 fb97 	bl	800a600 <__retarget_lock_acquire_recursive>
 8009ed2:	89ab      	ldrh	r3, [r5, #12]
 8009ed4:	071b      	lsls	r3, r3, #28
 8009ed6:	d501      	bpl.n	8009edc <_vfiprintf_r+0x3c>
 8009ed8:	692b      	ldr	r3, [r5, #16]
 8009eda:	b9eb      	cbnz	r3, 8009f18 <_vfiprintf_r+0x78>
 8009edc:	4629      	mov	r1, r5
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f000 f960 	bl	800a1a4 <__swsetup_r>
 8009ee4:	b1c0      	cbz	r0, 8009f18 <_vfiprintf_r+0x78>
 8009ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ee8:	07dc      	lsls	r4, r3, #31
 8009eea:	d50e      	bpl.n	8009f0a <_vfiprintf_r+0x6a>
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef0:	b01d      	add	sp, #116	; 0x74
 8009ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef6:	4b7b      	ldr	r3, [pc, #492]	; (800a0e4 <_vfiprintf_r+0x244>)
 8009ef8:	429d      	cmp	r5, r3
 8009efa:	d101      	bne.n	8009f00 <_vfiprintf_r+0x60>
 8009efc:	68b5      	ldr	r5, [r6, #8]
 8009efe:	e7df      	b.n	8009ec0 <_vfiprintf_r+0x20>
 8009f00:	4b79      	ldr	r3, [pc, #484]	; (800a0e8 <_vfiprintf_r+0x248>)
 8009f02:	429d      	cmp	r5, r3
 8009f04:	bf08      	it	eq
 8009f06:	68f5      	ldreq	r5, [r6, #12]
 8009f08:	e7da      	b.n	8009ec0 <_vfiprintf_r+0x20>
 8009f0a:	89ab      	ldrh	r3, [r5, #12]
 8009f0c:	0598      	lsls	r0, r3, #22
 8009f0e:	d4ed      	bmi.n	8009eec <_vfiprintf_r+0x4c>
 8009f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f12:	f000 fb76 	bl	800a602 <__retarget_lock_release_recursive>
 8009f16:	e7e9      	b.n	8009eec <_vfiprintf_r+0x4c>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f1c:	2320      	movs	r3, #32
 8009f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f22:	2330      	movs	r3, #48	; 0x30
 8009f24:	f04f 0901 	mov.w	r9, #1
 8009f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f2c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a0ec <_vfiprintf_r+0x24c>
 8009f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f34:	4623      	mov	r3, r4
 8009f36:	469a      	mov	sl, r3
 8009f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f3c:	b10a      	cbz	r2, 8009f42 <_vfiprintf_r+0xa2>
 8009f3e:	2a25      	cmp	r2, #37	; 0x25
 8009f40:	d1f9      	bne.n	8009f36 <_vfiprintf_r+0x96>
 8009f42:	ebba 0b04 	subs.w	fp, sl, r4
 8009f46:	d00b      	beq.n	8009f60 <_vfiprintf_r+0xc0>
 8009f48:	465b      	mov	r3, fp
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f7ff ff93 	bl	8009e7a <__sfputs_r>
 8009f54:	3001      	adds	r0, #1
 8009f56:	f000 80aa 	beq.w	800a0ae <_vfiprintf_r+0x20e>
 8009f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f5c:	445a      	add	r2, fp
 8009f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f60:	f89a 3000 	ldrb.w	r3, [sl]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 80a2 	beq.w	800a0ae <_vfiprintf_r+0x20e>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f74:	f10a 0a01 	add.w	sl, sl, #1
 8009f78:	9304      	str	r3, [sp, #16]
 8009f7a:	9307      	str	r3, [sp, #28]
 8009f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f80:	931a      	str	r3, [sp, #104]	; 0x68
 8009f82:	4654      	mov	r4, sl
 8009f84:	2205      	movs	r2, #5
 8009f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f8a:	4858      	ldr	r0, [pc, #352]	; (800a0ec <_vfiprintf_r+0x24c>)
 8009f8c:	f7fe ffca 	bl	8008f24 <memchr>
 8009f90:	9a04      	ldr	r2, [sp, #16]
 8009f92:	b9d8      	cbnz	r0, 8009fcc <_vfiprintf_r+0x12c>
 8009f94:	06d1      	lsls	r1, r2, #27
 8009f96:	bf44      	itt	mi
 8009f98:	2320      	movmi	r3, #32
 8009f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f9e:	0713      	lsls	r3, r2, #28
 8009fa0:	bf44      	itt	mi
 8009fa2:	232b      	movmi	r3, #43	; 0x2b
 8009fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8009fac:	2b2a      	cmp	r3, #42	; 0x2a
 8009fae:	d015      	beq.n	8009fdc <_vfiprintf_r+0x13c>
 8009fb0:	4654      	mov	r4, sl
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	f04f 0c0a 	mov.w	ip, #10
 8009fb8:	9a07      	ldr	r2, [sp, #28]
 8009fba:	4621      	mov	r1, r4
 8009fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fc0:	3b30      	subs	r3, #48	; 0x30
 8009fc2:	2b09      	cmp	r3, #9
 8009fc4:	d94e      	bls.n	800a064 <_vfiprintf_r+0x1c4>
 8009fc6:	b1b0      	cbz	r0, 8009ff6 <_vfiprintf_r+0x156>
 8009fc8:	9207      	str	r2, [sp, #28]
 8009fca:	e014      	b.n	8009ff6 <_vfiprintf_r+0x156>
 8009fcc:	eba0 0308 	sub.w	r3, r0, r8
 8009fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	46a2      	mov	sl, r4
 8009fd8:	9304      	str	r3, [sp, #16]
 8009fda:	e7d2      	b.n	8009f82 <_vfiprintf_r+0xe2>
 8009fdc:	9b03      	ldr	r3, [sp, #12]
 8009fde:	1d19      	adds	r1, r3, #4
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	9103      	str	r1, [sp, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	bfbb      	ittet	lt
 8009fe8:	425b      	neglt	r3, r3
 8009fea:	f042 0202 	orrlt.w	r2, r2, #2
 8009fee:	9307      	strge	r3, [sp, #28]
 8009ff0:	9307      	strlt	r3, [sp, #28]
 8009ff2:	bfb8      	it	lt
 8009ff4:	9204      	strlt	r2, [sp, #16]
 8009ff6:	7823      	ldrb	r3, [r4, #0]
 8009ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8009ffa:	d10c      	bne.n	800a016 <_vfiprintf_r+0x176>
 8009ffc:	7863      	ldrb	r3, [r4, #1]
 8009ffe:	2b2a      	cmp	r3, #42	; 0x2a
 800a000:	d135      	bne.n	800a06e <_vfiprintf_r+0x1ce>
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	3402      	adds	r4, #2
 800a006:	1d1a      	adds	r2, r3, #4
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	9203      	str	r2, [sp, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	bfb8      	it	lt
 800a010:	f04f 33ff 	movlt.w	r3, #4294967295
 800a014:	9305      	str	r3, [sp, #20]
 800a016:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0fc <_vfiprintf_r+0x25c>
 800a01a:	2203      	movs	r2, #3
 800a01c:	4650      	mov	r0, sl
 800a01e:	7821      	ldrb	r1, [r4, #0]
 800a020:	f7fe ff80 	bl	8008f24 <memchr>
 800a024:	b140      	cbz	r0, 800a038 <_vfiprintf_r+0x198>
 800a026:	2340      	movs	r3, #64	; 0x40
 800a028:	eba0 000a 	sub.w	r0, r0, sl
 800a02c:	fa03 f000 	lsl.w	r0, r3, r0
 800a030:	9b04      	ldr	r3, [sp, #16]
 800a032:	3401      	adds	r4, #1
 800a034:	4303      	orrs	r3, r0
 800a036:	9304      	str	r3, [sp, #16]
 800a038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a03c:	2206      	movs	r2, #6
 800a03e:	482c      	ldr	r0, [pc, #176]	; (800a0f0 <_vfiprintf_r+0x250>)
 800a040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a044:	f7fe ff6e 	bl	8008f24 <memchr>
 800a048:	2800      	cmp	r0, #0
 800a04a:	d03f      	beq.n	800a0cc <_vfiprintf_r+0x22c>
 800a04c:	4b29      	ldr	r3, [pc, #164]	; (800a0f4 <_vfiprintf_r+0x254>)
 800a04e:	bb1b      	cbnz	r3, 800a098 <_vfiprintf_r+0x1f8>
 800a050:	9b03      	ldr	r3, [sp, #12]
 800a052:	3307      	adds	r3, #7
 800a054:	f023 0307 	bic.w	r3, r3, #7
 800a058:	3308      	adds	r3, #8
 800a05a:	9303      	str	r3, [sp, #12]
 800a05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05e:	443b      	add	r3, r7
 800a060:	9309      	str	r3, [sp, #36]	; 0x24
 800a062:	e767      	b.n	8009f34 <_vfiprintf_r+0x94>
 800a064:	460c      	mov	r4, r1
 800a066:	2001      	movs	r0, #1
 800a068:	fb0c 3202 	mla	r2, ip, r2, r3
 800a06c:	e7a5      	b.n	8009fba <_vfiprintf_r+0x11a>
 800a06e:	2300      	movs	r3, #0
 800a070:	f04f 0c0a 	mov.w	ip, #10
 800a074:	4619      	mov	r1, r3
 800a076:	3401      	adds	r4, #1
 800a078:	9305      	str	r3, [sp, #20]
 800a07a:	4620      	mov	r0, r4
 800a07c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a080:	3a30      	subs	r2, #48	; 0x30
 800a082:	2a09      	cmp	r2, #9
 800a084:	d903      	bls.n	800a08e <_vfiprintf_r+0x1ee>
 800a086:	2b00      	cmp	r3, #0
 800a088:	d0c5      	beq.n	800a016 <_vfiprintf_r+0x176>
 800a08a:	9105      	str	r1, [sp, #20]
 800a08c:	e7c3      	b.n	800a016 <_vfiprintf_r+0x176>
 800a08e:	4604      	mov	r4, r0
 800a090:	2301      	movs	r3, #1
 800a092:	fb0c 2101 	mla	r1, ip, r1, r2
 800a096:	e7f0      	b.n	800a07a <_vfiprintf_r+0x1da>
 800a098:	ab03      	add	r3, sp, #12
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	462a      	mov	r2, r5
 800a09e:	4630      	mov	r0, r6
 800a0a0:	4b15      	ldr	r3, [pc, #84]	; (800a0f8 <_vfiprintf_r+0x258>)
 800a0a2:	a904      	add	r1, sp, #16
 800a0a4:	f7fc f896 	bl	80061d4 <_printf_float>
 800a0a8:	4607      	mov	r7, r0
 800a0aa:	1c78      	adds	r0, r7, #1
 800a0ac:	d1d6      	bne.n	800a05c <_vfiprintf_r+0x1bc>
 800a0ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0b0:	07d9      	lsls	r1, r3, #31
 800a0b2:	d405      	bmi.n	800a0c0 <_vfiprintf_r+0x220>
 800a0b4:	89ab      	ldrh	r3, [r5, #12]
 800a0b6:	059a      	lsls	r2, r3, #22
 800a0b8:	d402      	bmi.n	800a0c0 <_vfiprintf_r+0x220>
 800a0ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0bc:	f000 faa1 	bl	800a602 <__retarget_lock_release_recursive>
 800a0c0:	89ab      	ldrh	r3, [r5, #12]
 800a0c2:	065b      	lsls	r3, r3, #25
 800a0c4:	f53f af12 	bmi.w	8009eec <_vfiprintf_r+0x4c>
 800a0c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0ca:	e711      	b.n	8009ef0 <_vfiprintf_r+0x50>
 800a0cc:	ab03      	add	r3, sp, #12
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	462a      	mov	r2, r5
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	4b08      	ldr	r3, [pc, #32]	; (800a0f8 <_vfiprintf_r+0x258>)
 800a0d6:	a904      	add	r1, sp, #16
 800a0d8:	f7fc fb18 	bl	800670c <_printf_i>
 800a0dc:	e7e4      	b.n	800a0a8 <_vfiprintf_r+0x208>
 800a0de:	bf00      	nop
 800a0e0:	0800ad74 	.word	0x0800ad74
 800a0e4:	0800ad94 	.word	0x0800ad94
 800a0e8:	0800ad54 	.word	0x0800ad54
 800a0ec:	0800ad04 	.word	0x0800ad04
 800a0f0:	0800ad0e 	.word	0x0800ad0e
 800a0f4:	080061d5 	.word	0x080061d5
 800a0f8:	08009e7b 	.word	0x08009e7b
 800a0fc:	0800ad0a 	.word	0x0800ad0a

0800a100 <__swbuf_r>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	460e      	mov	r6, r1
 800a104:	4614      	mov	r4, r2
 800a106:	4605      	mov	r5, r0
 800a108:	b118      	cbz	r0, 800a112 <__swbuf_r+0x12>
 800a10a:	6983      	ldr	r3, [r0, #24]
 800a10c:	b90b      	cbnz	r3, 800a112 <__swbuf_r+0x12>
 800a10e:	f000 f9d9 	bl	800a4c4 <__sinit>
 800a112:	4b21      	ldr	r3, [pc, #132]	; (800a198 <__swbuf_r+0x98>)
 800a114:	429c      	cmp	r4, r3
 800a116:	d12b      	bne.n	800a170 <__swbuf_r+0x70>
 800a118:	686c      	ldr	r4, [r5, #4]
 800a11a:	69a3      	ldr	r3, [r4, #24]
 800a11c:	60a3      	str	r3, [r4, #8]
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	071a      	lsls	r2, r3, #28
 800a122:	d52f      	bpl.n	800a184 <__swbuf_r+0x84>
 800a124:	6923      	ldr	r3, [r4, #16]
 800a126:	b36b      	cbz	r3, 800a184 <__swbuf_r+0x84>
 800a128:	6923      	ldr	r3, [r4, #16]
 800a12a:	6820      	ldr	r0, [r4, #0]
 800a12c:	b2f6      	uxtb	r6, r6
 800a12e:	1ac0      	subs	r0, r0, r3
 800a130:	6963      	ldr	r3, [r4, #20]
 800a132:	4637      	mov	r7, r6
 800a134:	4283      	cmp	r3, r0
 800a136:	dc04      	bgt.n	800a142 <__swbuf_r+0x42>
 800a138:	4621      	mov	r1, r4
 800a13a:	4628      	mov	r0, r5
 800a13c:	f000 f92e 	bl	800a39c <_fflush_r>
 800a140:	bb30      	cbnz	r0, 800a190 <__swbuf_r+0x90>
 800a142:	68a3      	ldr	r3, [r4, #8]
 800a144:	3001      	adds	r0, #1
 800a146:	3b01      	subs	r3, #1
 800a148:	60a3      	str	r3, [r4, #8]
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	6022      	str	r2, [r4, #0]
 800a150:	701e      	strb	r6, [r3, #0]
 800a152:	6963      	ldr	r3, [r4, #20]
 800a154:	4283      	cmp	r3, r0
 800a156:	d004      	beq.n	800a162 <__swbuf_r+0x62>
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	07db      	lsls	r3, r3, #31
 800a15c:	d506      	bpl.n	800a16c <__swbuf_r+0x6c>
 800a15e:	2e0a      	cmp	r6, #10
 800a160:	d104      	bne.n	800a16c <__swbuf_r+0x6c>
 800a162:	4621      	mov	r1, r4
 800a164:	4628      	mov	r0, r5
 800a166:	f000 f919 	bl	800a39c <_fflush_r>
 800a16a:	b988      	cbnz	r0, 800a190 <__swbuf_r+0x90>
 800a16c:	4638      	mov	r0, r7
 800a16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a170:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <__swbuf_r+0x9c>)
 800a172:	429c      	cmp	r4, r3
 800a174:	d101      	bne.n	800a17a <__swbuf_r+0x7a>
 800a176:	68ac      	ldr	r4, [r5, #8]
 800a178:	e7cf      	b.n	800a11a <__swbuf_r+0x1a>
 800a17a:	4b09      	ldr	r3, [pc, #36]	; (800a1a0 <__swbuf_r+0xa0>)
 800a17c:	429c      	cmp	r4, r3
 800a17e:	bf08      	it	eq
 800a180:	68ec      	ldreq	r4, [r5, #12]
 800a182:	e7ca      	b.n	800a11a <__swbuf_r+0x1a>
 800a184:	4621      	mov	r1, r4
 800a186:	4628      	mov	r0, r5
 800a188:	f000 f80c 	bl	800a1a4 <__swsetup_r>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d0cb      	beq.n	800a128 <__swbuf_r+0x28>
 800a190:	f04f 37ff 	mov.w	r7, #4294967295
 800a194:	e7ea      	b.n	800a16c <__swbuf_r+0x6c>
 800a196:	bf00      	nop
 800a198:	0800ad74 	.word	0x0800ad74
 800a19c:	0800ad94 	.word	0x0800ad94
 800a1a0:	0800ad54 	.word	0x0800ad54

0800a1a4 <__swsetup_r>:
 800a1a4:	4b32      	ldr	r3, [pc, #200]	; (800a270 <__swsetup_r+0xcc>)
 800a1a6:	b570      	push	{r4, r5, r6, lr}
 800a1a8:	681d      	ldr	r5, [r3, #0]
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	b125      	cbz	r5, 800a1ba <__swsetup_r+0x16>
 800a1b0:	69ab      	ldr	r3, [r5, #24]
 800a1b2:	b913      	cbnz	r3, 800a1ba <__swsetup_r+0x16>
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f000 f985 	bl	800a4c4 <__sinit>
 800a1ba:	4b2e      	ldr	r3, [pc, #184]	; (800a274 <__swsetup_r+0xd0>)
 800a1bc:	429c      	cmp	r4, r3
 800a1be:	d10f      	bne.n	800a1e0 <__swsetup_r+0x3c>
 800a1c0:	686c      	ldr	r4, [r5, #4]
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1c8:	0719      	lsls	r1, r3, #28
 800a1ca:	d42c      	bmi.n	800a226 <__swsetup_r+0x82>
 800a1cc:	06dd      	lsls	r5, r3, #27
 800a1ce:	d411      	bmi.n	800a1f4 <__swsetup_r+0x50>
 800a1d0:	2309      	movs	r3, #9
 800a1d2:	6033      	str	r3, [r6, #0]
 800a1d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1dc:	81a3      	strh	r3, [r4, #12]
 800a1de:	e03e      	b.n	800a25e <__swsetup_r+0xba>
 800a1e0:	4b25      	ldr	r3, [pc, #148]	; (800a278 <__swsetup_r+0xd4>)
 800a1e2:	429c      	cmp	r4, r3
 800a1e4:	d101      	bne.n	800a1ea <__swsetup_r+0x46>
 800a1e6:	68ac      	ldr	r4, [r5, #8]
 800a1e8:	e7eb      	b.n	800a1c2 <__swsetup_r+0x1e>
 800a1ea:	4b24      	ldr	r3, [pc, #144]	; (800a27c <__swsetup_r+0xd8>)
 800a1ec:	429c      	cmp	r4, r3
 800a1ee:	bf08      	it	eq
 800a1f0:	68ec      	ldreq	r4, [r5, #12]
 800a1f2:	e7e6      	b.n	800a1c2 <__swsetup_r+0x1e>
 800a1f4:	0758      	lsls	r0, r3, #29
 800a1f6:	d512      	bpl.n	800a21e <__swsetup_r+0x7a>
 800a1f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1fa:	b141      	cbz	r1, 800a20e <__swsetup_r+0x6a>
 800a1fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a200:	4299      	cmp	r1, r3
 800a202:	d002      	beq.n	800a20a <__swsetup_r+0x66>
 800a204:	4630      	mov	r0, r6
 800a206:	f7ff fb6f 	bl	80098e8 <_free_r>
 800a20a:	2300      	movs	r3, #0
 800a20c:	6363      	str	r3, [r4, #52]	; 0x34
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a214:	81a3      	strh	r3, [r4, #12]
 800a216:	2300      	movs	r3, #0
 800a218:	6063      	str	r3, [r4, #4]
 800a21a:	6923      	ldr	r3, [r4, #16]
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	f043 0308 	orr.w	r3, r3, #8
 800a224:	81a3      	strh	r3, [r4, #12]
 800a226:	6923      	ldr	r3, [r4, #16]
 800a228:	b94b      	cbnz	r3, 800a23e <__swsetup_r+0x9a>
 800a22a:	89a3      	ldrh	r3, [r4, #12]
 800a22c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a234:	d003      	beq.n	800a23e <__swsetup_r+0x9a>
 800a236:	4621      	mov	r1, r4
 800a238:	4630      	mov	r0, r6
 800a23a:	f000 fa07 	bl	800a64c <__smakebuf_r>
 800a23e:	89a0      	ldrh	r0, [r4, #12]
 800a240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a244:	f010 0301 	ands.w	r3, r0, #1
 800a248:	d00a      	beq.n	800a260 <__swsetup_r+0xbc>
 800a24a:	2300      	movs	r3, #0
 800a24c:	60a3      	str	r3, [r4, #8]
 800a24e:	6963      	ldr	r3, [r4, #20]
 800a250:	425b      	negs	r3, r3
 800a252:	61a3      	str	r3, [r4, #24]
 800a254:	6923      	ldr	r3, [r4, #16]
 800a256:	b943      	cbnz	r3, 800a26a <__swsetup_r+0xc6>
 800a258:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a25c:	d1ba      	bne.n	800a1d4 <__swsetup_r+0x30>
 800a25e:	bd70      	pop	{r4, r5, r6, pc}
 800a260:	0781      	lsls	r1, r0, #30
 800a262:	bf58      	it	pl
 800a264:	6963      	ldrpl	r3, [r4, #20]
 800a266:	60a3      	str	r3, [r4, #8]
 800a268:	e7f4      	b.n	800a254 <__swsetup_r+0xb0>
 800a26a:	2000      	movs	r0, #0
 800a26c:	e7f7      	b.n	800a25e <__swsetup_r+0xba>
 800a26e:	bf00      	nop
 800a270:	2000000c 	.word	0x2000000c
 800a274:	0800ad74 	.word	0x0800ad74
 800a278:	0800ad94 	.word	0x0800ad94
 800a27c:	0800ad54 	.word	0x0800ad54

0800a280 <abort>:
 800a280:	2006      	movs	r0, #6
 800a282:	b508      	push	{r3, lr}
 800a284:	f000 fa52 	bl	800a72c <raise>
 800a288:	2001      	movs	r0, #1
 800a28a:	f7f7 ff18 	bl	80020be <_exit>
	...

0800a290 <__sflush_r>:
 800a290:	898a      	ldrh	r2, [r1, #12]
 800a292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a296:	4605      	mov	r5, r0
 800a298:	0710      	lsls	r0, r2, #28
 800a29a:	460c      	mov	r4, r1
 800a29c:	d458      	bmi.n	800a350 <__sflush_r+0xc0>
 800a29e:	684b      	ldr	r3, [r1, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	dc05      	bgt.n	800a2b0 <__sflush_r+0x20>
 800a2a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	dc02      	bgt.n	800a2b0 <__sflush_r+0x20>
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2b2:	2e00      	cmp	r6, #0
 800a2b4:	d0f9      	beq.n	800a2aa <__sflush_r+0x1a>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2bc:	682f      	ldr	r7, [r5, #0]
 800a2be:	602b      	str	r3, [r5, #0]
 800a2c0:	d032      	beq.n	800a328 <__sflush_r+0x98>
 800a2c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2c4:	89a3      	ldrh	r3, [r4, #12]
 800a2c6:	075a      	lsls	r2, r3, #29
 800a2c8:	d505      	bpl.n	800a2d6 <__sflush_r+0x46>
 800a2ca:	6863      	ldr	r3, [r4, #4]
 800a2cc:	1ac0      	subs	r0, r0, r3
 800a2ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2d0:	b10b      	cbz	r3, 800a2d6 <__sflush_r+0x46>
 800a2d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2d4:	1ac0      	subs	r0, r0, r3
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	4602      	mov	r2, r0
 800a2da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2dc:	4628      	mov	r0, r5
 800a2de:	6a21      	ldr	r1, [r4, #32]
 800a2e0:	47b0      	blx	r6
 800a2e2:	1c43      	adds	r3, r0, #1
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	d106      	bne.n	800a2f6 <__sflush_r+0x66>
 800a2e8:	6829      	ldr	r1, [r5, #0]
 800a2ea:	291d      	cmp	r1, #29
 800a2ec:	d82c      	bhi.n	800a348 <__sflush_r+0xb8>
 800a2ee:	4a2a      	ldr	r2, [pc, #168]	; (800a398 <__sflush_r+0x108>)
 800a2f0:	40ca      	lsrs	r2, r1
 800a2f2:	07d6      	lsls	r6, r2, #31
 800a2f4:	d528      	bpl.n	800a348 <__sflush_r+0xb8>
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	6062      	str	r2, [r4, #4]
 800a2fa:	6922      	ldr	r2, [r4, #16]
 800a2fc:	04d9      	lsls	r1, r3, #19
 800a2fe:	6022      	str	r2, [r4, #0]
 800a300:	d504      	bpl.n	800a30c <__sflush_r+0x7c>
 800a302:	1c42      	adds	r2, r0, #1
 800a304:	d101      	bne.n	800a30a <__sflush_r+0x7a>
 800a306:	682b      	ldr	r3, [r5, #0]
 800a308:	b903      	cbnz	r3, 800a30c <__sflush_r+0x7c>
 800a30a:	6560      	str	r0, [r4, #84]	; 0x54
 800a30c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a30e:	602f      	str	r7, [r5, #0]
 800a310:	2900      	cmp	r1, #0
 800a312:	d0ca      	beq.n	800a2aa <__sflush_r+0x1a>
 800a314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a318:	4299      	cmp	r1, r3
 800a31a:	d002      	beq.n	800a322 <__sflush_r+0x92>
 800a31c:	4628      	mov	r0, r5
 800a31e:	f7ff fae3 	bl	80098e8 <_free_r>
 800a322:	2000      	movs	r0, #0
 800a324:	6360      	str	r0, [r4, #52]	; 0x34
 800a326:	e7c1      	b.n	800a2ac <__sflush_r+0x1c>
 800a328:	6a21      	ldr	r1, [r4, #32]
 800a32a:	2301      	movs	r3, #1
 800a32c:	4628      	mov	r0, r5
 800a32e:	47b0      	blx	r6
 800a330:	1c41      	adds	r1, r0, #1
 800a332:	d1c7      	bne.n	800a2c4 <__sflush_r+0x34>
 800a334:	682b      	ldr	r3, [r5, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d0c4      	beq.n	800a2c4 <__sflush_r+0x34>
 800a33a:	2b1d      	cmp	r3, #29
 800a33c:	d001      	beq.n	800a342 <__sflush_r+0xb2>
 800a33e:	2b16      	cmp	r3, #22
 800a340:	d101      	bne.n	800a346 <__sflush_r+0xb6>
 800a342:	602f      	str	r7, [r5, #0]
 800a344:	e7b1      	b.n	800a2aa <__sflush_r+0x1a>
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a34c:	81a3      	strh	r3, [r4, #12]
 800a34e:	e7ad      	b.n	800a2ac <__sflush_r+0x1c>
 800a350:	690f      	ldr	r7, [r1, #16]
 800a352:	2f00      	cmp	r7, #0
 800a354:	d0a9      	beq.n	800a2aa <__sflush_r+0x1a>
 800a356:	0793      	lsls	r3, r2, #30
 800a358:	bf18      	it	ne
 800a35a:	2300      	movne	r3, #0
 800a35c:	680e      	ldr	r6, [r1, #0]
 800a35e:	bf08      	it	eq
 800a360:	694b      	ldreq	r3, [r1, #20]
 800a362:	eba6 0807 	sub.w	r8, r6, r7
 800a366:	600f      	str	r7, [r1, #0]
 800a368:	608b      	str	r3, [r1, #8]
 800a36a:	f1b8 0f00 	cmp.w	r8, #0
 800a36e:	dd9c      	ble.n	800a2aa <__sflush_r+0x1a>
 800a370:	4643      	mov	r3, r8
 800a372:	463a      	mov	r2, r7
 800a374:	4628      	mov	r0, r5
 800a376:	6a21      	ldr	r1, [r4, #32]
 800a378:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a37a:	47b0      	blx	r6
 800a37c:	2800      	cmp	r0, #0
 800a37e:	dc06      	bgt.n	800a38e <__sflush_r+0xfe>
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	f04f 30ff 	mov.w	r0, #4294967295
 800a386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a38a:	81a3      	strh	r3, [r4, #12]
 800a38c:	e78e      	b.n	800a2ac <__sflush_r+0x1c>
 800a38e:	4407      	add	r7, r0
 800a390:	eba8 0800 	sub.w	r8, r8, r0
 800a394:	e7e9      	b.n	800a36a <__sflush_r+0xda>
 800a396:	bf00      	nop
 800a398:	20400001 	.word	0x20400001

0800a39c <_fflush_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	690b      	ldr	r3, [r1, #16]
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	b913      	cbnz	r3, 800a3ac <_fflush_r+0x10>
 800a3a6:	2500      	movs	r5, #0
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	b118      	cbz	r0, 800a3b6 <_fflush_r+0x1a>
 800a3ae:	6983      	ldr	r3, [r0, #24]
 800a3b0:	b90b      	cbnz	r3, 800a3b6 <_fflush_r+0x1a>
 800a3b2:	f000 f887 	bl	800a4c4 <__sinit>
 800a3b6:	4b14      	ldr	r3, [pc, #80]	; (800a408 <_fflush_r+0x6c>)
 800a3b8:	429c      	cmp	r4, r3
 800a3ba:	d11b      	bne.n	800a3f4 <_fflush_r+0x58>
 800a3bc:	686c      	ldr	r4, [r5, #4]
 800a3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d0ef      	beq.n	800a3a6 <_fflush_r+0xa>
 800a3c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3c8:	07d0      	lsls	r0, r2, #31
 800a3ca:	d404      	bmi.n	800a3d6 <_fflush_r+0x3a>
 800a3cc:	0599      	lsls	r1, r3, #22
 800a3ce:	d402      	bmi.n	800a3d6 <_fflush_r+0x3a>
 800a3d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3d2:	f000 f915 	bl	800a600 <__retarget_lock_acquire_recursive>
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	4621      	mov	r1, r4
 800a3da:	f7ff ff59 	bl	800a290 <__sflush_r>
 800a3de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	07da      	lsls	r2, r3, #31
 800a3e4:	d4e0      	bmi.n	800a3a8 <_fflush_r+0xc>
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	059b      	lsls	r3, r3, #22
 800a3ea:	d4dd      	bmi.n	800a3a8 <_fflush_r+0xc>
 800a3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ee:	f000 f908 	bl	800a602 <__retarget_lock_release_recursive>
 800a3f2:	e7d9      	b.n	800a3a8 <_fflush_r+0xc>
 800a3f4:	4b05      	ldr	r3, [pc, #20]	; (800a40c <_fflush_r+0x70>)
 800a3f6:	429c      	cmp	r4, r3
 800a3f8:	d101      	bne.n	800a3fe <_fflush_r+0x62>
 800a3fa:	68ac      	ldr	r4, [r5, #8]
 800a3fc:	e7df      	b.n	800a3be <_fflush_r+0x22>
 800a3fe:	4b04      	ldr	r3, [pc, #16]	; (800a410 <_fflush_r+0x74>)
 800a400:	429c      	cmp	r4, r3
 800a402:	bf08      	it	eq
 800a404:	68ec      	ldreq	r4, [r5, #12]
 800a406:	e7da      	b.n	800a3be <_fflush_r+0x22>
 800a408:	0800ad74 	.word	0x0800ad74
 800a40c:	0800ad94 	.word	0x0800ad94
 800a410:	0800ad54 	.word	0x0800ad54

0800a414 <std>:
 800a414:	2300      	movs	r3, #0
 800a416:	b510      	push	{r4, lr}
 800a418:	4604      	mov	r4, r0
 800a41a:	e9c0 3300 	strd	r3, r3, [r0]
 800a41e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a422:	6083      	str	r3, [r0, #8]
 800a424:	8181      	strh	r1, [r0, #12]
 800a426:	6643      	str	r3, [r0, #100]	; 0x64
 800a428:	81c2      	strh	r2, [r0, #14]
 800a42a:	6183      	str	r3, [r0, #24]
 800a42c:	4619      	mov	r1, r3
 800a42e:	2208      	movs	r2, #8
 800a430:	305c      	adds	r0, #92	; 0x5c
 800a432:	f7fb fe29 	bl	8006088 <memset>
 800a436:	4b05      	ldr	r3, [pc, #20]	; (800a44c <std+0x38>)
 800a438:	6224      	str	r4, [r4, #32]
 800a43a:	6263      	str	r3, [r4, #36]	; 0x24
 800a43c:	4b04      	ldr	r3, [pc, #16]	; (800a450 <std+0x3c>)
 800a43e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a440:	4b04      	ldr	r3, [pc, #16]	; (800a454 <std+0x40>)
 800a442:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a444:	4b04      	ldr	r3, [pc, #16]	; (800a458 <std+0x44>)
 800a446:	6323      	str	r3, [r4, #48]	; 0x30
 800a448:	bd10      	pop	{r4, pc}
 800a44a:	bf00      	nop
 800a44c:	0800a765 	.word	0x0800a765
 800a450:	0800a787 	.word	0x0800a787
 800a454:	0800a7bf 	.word	0x0800a7bf
 800a458:	0800a7e3 	.word	0x0800a7e3

0800a45c <_cleanup_r>:
 800a45c:	4901      	ldr	r1, [pc, #4]	; (800a464 <_cleanup_r+0x8>)
 800a45e:	f000 b8af 	b.w	800a5c0 <_fwalk_reent>
 800a462:	bf00      	nop
 800a464:	0800a39d 	.word	0x0800a39d

0800a468 <__sfmoreglue>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	2568      	movs	r5, #104	; 0x68
 800a46c:	1e4a      	subs	r2, r1, #1
 800a46e:	4355      	muls	r5, r2
 800a470:	460e      	mov	r6, r1
 800a472:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a476:	f7ff fa83 	bl	8009980 <_malloc_r>
 800a47a:	4604      	mov	r4, r0
 800a47c:	b140      	cbz	r0, 800a490 <__sfmoreglue+0x28>
 800a47e:	2100      	movs	r1, #0
 800a480:	e9c0 1600 	strd	r1, r6, [r0]
 800a484:	300c      	adds	r0, #12
 800a486:	60a0      	str	r0, [r4, #8]
 800a488:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a48c:	f7fb fdfc 	bl	8006088 <memset>
 800a490:	4620      	mov	r0, r4
 800a492:	bd70      	pop	{r4, r5, r6, pc}

0800a494 <__sfp_lock_acquire>:
 800a494:	4801      	ldr	r0, [pc, #4]	; (800a49c <__sfp_lock_acquire+0x8>)
 800a496:	f000 b8b3 	b.w	800a600 <__retarget_lock_acquire_recursive>
 800a49a:	bf00      	nop
 800a49c:	200004c0 	.word	0x200004c0

0800a4a0 <__sfp_lock_release>:
 800a4a0:	4801      	ldr	r0, [pc, #4]	; (800a4a8 <__sfp_lock_release+0x8>)
 800a4a2:	f000 b8ae 	b.w	800a602 <__retarget_lock_release_recursive>
 800a4a6:	bf00      	nop
 800a4a8:	200004c0 	.word	0x200004c0

0800a4ac <__sinit_lock_acquire>:
 800a4ac:	4801      	ldr	r0, [pc, #4]	; (800a4b4 <__sinit_lock_acquire+0x8>)
 800a4ae:	f000 b8a7 	b.w	800a600 <__retarget_lock_acquire_recursive>
 800a4b2:	bf00      	nop
 800a4b4:	200004bb 	.word	0x200004bb

0800a4b8 <__sinit_lock_release>:
 800a4b8:	4801      	ldr	r0, [pc, #4]	; (800a4c0 <__sinit_lock_release+0x8>)
 800a4ba:	f000 b8a2 	b.w	800a602 <__retarget_lock_release_recursive>
 800a4be:	bf00      	nop
 800a4c0:	200004bb 	.word	0x200004bb

0800a4c4 <__sinit>:
 800a4c4:	b510      	push	{r4, lr}
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	f7ff fff0 	bl	800a4ac <__sinit_lock_acquire>
 800a4cc:	69a3      	ldr	r3, [r4, #24]
 800a4ce:	b11b      	cbz	r3, 800a4d8 <__sinit+0x14>
 800a4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d4:	f7ff bff0 	b.w	800a4b8 <__sinit_lock_release>
 800a4d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4dc:	6523      	str	r3, [r4, #80]	; 0x50
 800a4de:	4b13      	ldr	r3, [pc, #76]	; (800a52c <__sinit+0x68>)
 800a4e0:	4a13      	ldr	r2, [pc, #76]	; (800a530 <__sinit+0x6c>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4e6:	42a3      	cmp	r3, r4
 800a4e8:	bf08      	it	eq
 800a4ea:	2301      	moveq	r3, #1
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	bf08      	it	eq
 800a4f0:	61a3      	streq	r3, [r4, #24]
 800a4f2:	f000 f81f 	bl	800a534 <__sfp>
 800a4f6:	6060      	str	r0, [r4, #4]
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f000 f81b 	bl	800a534 <__sfp>
 800a4fe:	60a0      	str	r0, [r4, #8]
 800a500:	4620      	mov	r0, r4
 800a502:	f000 f817 	bl	800a534 <__sfp>
 800a506:	2200      	movs	r2, #0
 800a508:	2104      	movs	r1, #4
 800a50a:	60e0      	str	r0, [r4, #12]
 800a50c:	6860      	ldr	r0, [r4, #4]
 800a50e:	f7ff ff81 	bl	800a414 <std>
 800a512:	2201      	movs	r2, #1
 800a514:	2109      	movs	r1, #9
 800a516:	68a0      	ldr	r0, [r4, #8]
 800a518:	f7ff ff7c 	bl	800a414 <std>
 800a51c:	2202      	movs	r2, #2
 800a51e:	2112      	movs	r1, #18
 800a520:	68e0      	ldr	r0, [r4, #12]
 800a522:	f7ff ff77 	bl	800a414 <std>
 800a526:	2301      	movs	r3, #1
 800a528:	61a3      	str	r3, [r4, #24]
 800a52a:	e7d1      	b.n	800a4d0 <__sinit+0xc>
 800a52c:	0800a900 	.word	0x0800a900
 800a530:	0800a45d 	.word	0x0800a45d

0800a534 <__sfp>:
 800a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a536:	4607      	mov	r7, r0
 800a538:	f7ff ffac 	bl	800a494 <__sfp_lock_acquire>
 800a53c:	4b1e      	ldr	r3, [pc, #120]	; (800a5b8 <__sfp+0x84>)
 800a53e:	681e      	ldr	r6, [r3, #0]
 800a540:	69b3      	ldr	r3, [r6, #24]
 800a542:	b913      	cbnz	r3, 800a54a <__sfp+0x16>
 800a544:	4630      	mov	r0, r6
 800a546:	f7ff ffbd 	bl	800a4c4 <__sinit>
 800a54a:	3648      	adds	r6, #72	; 0x48
 800a54c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a550:	3b01      	subs	r3, #1
 800a552:	d503      	bpl.n	800a55c <__sfp+0x28>
 800a554:	6833      	ldr	r3, [r6, #0]
 800a556:	b30b      	cbz	r3, 800a59c <__sfp+0x68>
 800a558:	6836      	ldr	r6, [r6, #0]
 800a55a:	e7f7      	b.n	800a54c <__sfp+0x18>
 800a55c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a560:	b9d5      	cbnz	r5, 800a598 <__sfp+0x64>
 800a562:	4b16      	ldr	r3, [pc, #88]	; (800a5bc <__sfp+0x88>)
 800a564:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a568:	60e3      	str	r3, [r4, #12]
 800a56a:	6665      	str	r5, [r4, #100]	; 0x64
 800a56c:	f000 f847 	bl	800a5fe <__retarget_lock_init_recursive>
 800a570:	f7ff ff96 	bl	800a4a0 <__sfp_lock_release>
 800a574:	2208      	movs	r2, #8
 800a576:	4629      	mov	r1, r5
 800a578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a57c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a580:	6025      	str	r5, [r4, #0]
 800a582:	61a5      	str	r5, [r4, #24]
 800a584:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a588:	f7fb fd7e 	bl	8006088 <memset>
 800a58c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a590:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a594:	4620      	mov	r0, r4
 800a596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a598:	3468      	adds	r4, #104	; 0x68
 800a59a:	e7d9      	b.n	800a550 <__sfp+0x1c>
 800a59c:	2104      	movs	r1, #4
 800a59e:	4638      	mov	r0, r7
 800a5a0:	f7ff ff62 	bl	800a468 <__sfmoreglue>
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	6030      	str	r0, [r6, #0]
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d1d5      	bne.n	800a558 <__sfp+0x24>
 800a5ac:	f7ff ff78 	bl	800a4a0 <__sfp_lock_release>
 800a5b0:	230c      	movs	r3, #12
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	e7ee      	b.n	800a594 <__sfp+0x60>
 800a5b6:	bf00      	nop
 800a5b8:	0800a900 	.word	0x0800a900
 800a5bc:	ffff0001 	.word	0xffff0001

0800a5c0 <_fwalk_reent>:
 800a5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	4688      	mov	r8, r1
 800a5c8:	2700      	movs	r7, #0
 800a5ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5d2:	f1b9 0901 	subs.w	r9, r9, #1
 800a5d6:	d505      	bpl.n	800a5e4 <_fwalk_reent+0x24>
 800a5d8:	6824      	ldr	r4, [r4, #0]
 800a5da:	2c00      	cmp	r4, #0
 800a5dc:	d1f7      	bne.n	800a5ce <_fwalk_reent+0xe>
 800a5de:	4638      	mov	r0, r7
 800a5e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5e4:	89ab      	ldrh	r3, [r5, #12]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d907      	bls.n	800a5fa <_fwalk_reent+0x3a>
 800a5ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	d003      	beq.n	800a5fa <_fwalk_reent+0x3a>
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	47c0      	blx	r8
 800a5f8:	4307      	orrs	r7, r0
 800a5fa:	3568      	adds	r5, #104	; 0x68
 800a5fc:	e7e9      	b.n	800a5d2 <_fwalk_reent+0x12>

0800a5fe <__retarget_lock_init_recursive>:
 800a5fe:	4770      	bx	lr

0800a600 <__retarget_lock_acquire_recursive>:
 800a600:	4770      	bx	lr

0800a602 <__retarget_lock_release_recursive>:
 800a602:	4770      	bx	lr

0800a604 <__swhatbuf_r>:
 800a604:	b570      	push	{r4, r5, r6, lr}
 800a606:	460e      	mov	r6, r1
 800a608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60c:	4614      	mov	r4, r2
 800a60e:	2900      	cmp	r1, #0
 800a610:	461d      	mov	r5, r3
 800a612:	b096      	sub	sp, #88	; 0x58
 800a614:	da07      	bge.n	800a626 <__swhatbuf_r+0x22>
 800a616:	2300      	movs	r3, #0
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	89b3      	ldrh	r3, [r6, #12]
 800a61c:	061a      	lsls	r2, r3, #24
 800a61e:	d410      	bmi.n	800a642 <__swhatbuf_r+0x3e>
 800a620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a624:	e00e      	b.n	800a644 <__swhatbuf_r+0x40>
 800a626:	466a      	mov	r2, sp
 800a628:	f000 f902 	bl	800a830 <_fstat_r>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	dbf2      	blt.n	800a616 <__swhatbuf_r+0x12>
 800a630:	9a01      	ldr	r2, [sp, #4]
 800a632:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a636:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a63a:	425a      	negs	r2, r3
 800a63c:	415a      	adcs	r2, r3
 800a63e:	602a      	str	r2, [r5, #0]
 800a640:	e7ee      	b.n	800a620 <__swhatbuf_r+0x1c>
 800a642:	2340      	movs	r3, #64	; 0x40
 800a644:	2000      	movs	r0, #0
 800a646:	6023      	str	r3, [r4, #0]
 800a648:	b016      	add	sp, #88	; 0x58
 800a64a:	bd70      	pop	{r4, r5, r6, pc}

0800a64c <__smakebuf_r>:
 800a64c:	898b      	ldrh	r3, [r1, #12]
 800a64e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a650:	079d      	lsls	r5, r3, #30
 800a652:	4606      	mov	r6, r0
 800a654:	460c      	mov	r4, r1
 800a656:	d507      	bpl.n	800a668 <__smakebuf_r+0x1c>
 800a658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	6123      	str	r3, [r4, #16]
 800a660:	2301      	movs	r3, #1
 800a662:	6163      	str	r3, [r4, #20]
 800a664:	b002      	add	sp, #8
 800a666:	bd70      	pop	{r4, r5, r6, pc}
 800a668:	466a      	mov	r2, sp
 800a66a:	ab01      	add	r3, sp, #4
 800a66c:	f7ff ffca 	bl	800a604 <__swhatbuf_r>
 800a670:	9900      	ldr	r1, [sp, #0]
 800a672:	4605      	mov	r5, r0
 800a674:	4630      	mov	r0, r6
 800a676:	f7ff f983 	bl	8009980 <_malloc_r>
 800a67a:	b948      	cbnz	r0, 800a690 <__smakebuf_r+0x44>
 800a67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a680:	059a      	lsls	r2, r3, #22
 800a682:	d4ef      	bmi.n	800a664 <__smakebuf_r+0x18>
 800a684:	f023 0303 	bic.w	r3, r3, #3
 800a688:	f043 0302 	orr.w	r3, r3, #2
 800a68c:	81a3      	strh	r3, [r4, #12]
 800a68e:	e7e3      	b.n	800a658 <__smakebuf_r+0xc>
 800a690:	4b0d      	ldr	r3, [pc, #52]	; (800a6c8 <__smakebuf_r+0x7c>)
 800a692:	62b3      	str	r3, [r6, #40]	; 0x28
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	6020      	str	r0, [r4, #0]
 800a698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a69c:	81a3      	strh	r3, [r4, #12]
 800a69e:	9b00      	ldr	r3, [sp, #0]
 800a6a0:	6120      	str	r0, [r4, #16]
 800a6a2:	6163      	str	r3, [r4, #20]
 800a6a4:	9b01      	ldr	r3, [sp, #4]
 800a6a6:	b15b      	cbz	r3, 800a6c0 <__smakebuf_r+0x74>
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6ae:	f000 f8d1 	bl	800a854 <_isatty_r>
 800a6b2:	b128      	cbz	r0, 800a6c0 <__smakebuf_r+0x74>
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	f023 0303 	bic.w	r3, r3, #3
 800a6ba:	f043 0301 	orr.w	r3, r3, #1
 800a6be:	81a3      	strh	r3, [r4, #12]
 800a6c0:	89a0      	ldrh	r0, [r4, #12]
 800a6c2:	4305      	orrs	r5, r0
 800a6c4:	81a5      	strh	r5, [r4, #12]
 800a6c6:	e7cd      	b.n	800a664 <__smakebuf_r+0x18>
 800a6c8:	0800a45d 	.word	0x0800a45d

0800a6cc <_malloc_usable_size_r>:
 800a6cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6d0:	1f18      	subs	r0, r3, #4
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	bfbc      	itt	lt
 800a6d6:	580b      	ldrlt	r3, [r1, r0]
 800a6d8:	18c0      	addlt	r0, r0, r3
 800a6da:	4770      	bx	lr

0800a6dc <_raise_r>:
 800a6dc:	291f      	cmp	r1, #31
 800a6de:	b538      	push	{r3, r4, r5, lr}
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	460d      	mov	r5, r1
 800a6e4:	d904      	bls.n	800a6f0 <_raise_r+0x14>
 800a6e6:	2316      	movs	r3, #22
 800a6e8:	6003      	str	r3, [r0, #0]
 800a6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6f2:	b112      	cbz	r2, 800a6fa <_raise_r+0x1e>
 800a6f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6f8:	b94b      	cbnz	r3, 800a70e <_raise_r+0x32>
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 f830 	bl	800a760 <_getpid_r>
 800a700:	462a      	mov	r2, r5
 800a702:	4601      	mov	r1, r0
 800a704:	4620      	mov	r0, r4
 800a706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a70a:	f000 b817 	b.w	800a73c <_kill_r>
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d00a      	beq.n	800a728 <_raise_r+0x4c>
 800a712:	1c59      	adds	r1, r3, #1
 800a714:	d103      	bne.n	800a71e <_raise_r+0x42>
 800a716:	2316      	movs	r3, #22
 800a718:	6003      	str	r3, [r0, #0]
 800a71a:	2001      	movs	r0, #1
 800a71c:	e7e7      	b.n	800a6ee <_raise_r+0x12>
 800a71e:	2400      	movs	r4, #0
 800a720:	4628      	mov	r0, r5
 800a722:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a726:	4798      	blx	r3
 800a728:	2000      	movs	r0, #0
 800a72a:	e7e0      	b.n	800a6ee <_raise_r+0x12>

0800a72c <raise>:
 800a72c:	4b02      	ldr	r3, [pc, #8]	; (800a738 <raise+0xc>)
 800a72e:	4601      	mov	r1, r0
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	f7ff bfd3 	b.w	800a6dc <_raise_r>
 800a736:	bf00      	nop
 800a738:	2000000c 	.word	0x2000000c

0800a73c <_kill_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	2300      	movs	r3, #0
 800a740:	4d06      	ldr	r5, [pc, #24]	; (800a75c <_kill_r+0x20>)
 800a742:	4604      	mov	r4, r0
 800a744:	4608      	mov	r0, r1
 800a746:	4611      	mov	r1, r2
 800a748:	602b      	str	r3, [r5, #0]
 800a74a:	f7f7 fca8 	bl	800209e <_kill>
 800a74e:	1c43      	adds	r3, r0, #1
 800a750:	d102      	bne.n	800a758 <_kill_r+0x1c>
 800a752:	682b      	ldr	r3, [r5, #0]
 800a754:	b103      	cbz	r3, 800a758 <_kill_r+0x1c>
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	bd38      	pop	{r3, r4, r5, pc}
 800a75a:	bf00      	nop
 800a75c:	200004b4 	.word	0x200004b4

0800a760 <_getpid_r>:
 800a760:	f7f7 bc96 	b.w	8002090 <_getpid>

0800a764 <__sread>:
 800a764:	b510      	push	{r4, lr}
 800a766:	460c      	mov	r4, r1
 800a768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76c:	f000 f894 	bl	800a898 <_read_r>
 800a770:	2800      	cmp	r0, #0
 800a772:	bfab      	itete	ge
 800a774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a776:	89a3      	ldrhlt	r3, [r4, #12]
 800a778:	181b      	addge	r3, r3, r0
 800a77a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a77e:	bfac      	ite	ge
 800a780:	6563      	strge	r3, [r4, #84]	; 0x54
 800a782:	81a3      	strhlt	r3, [r4, #12]
 800a784:	bd10      	pop	{r4, pc}

0800a786 <__swrite>:
 800a786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78a:	461f      	mov	r7, r3
 800a78c:	898b      	ldrh	r3, [r1, #12]
 800a78e:	4605      	mov	r5, r0
 800a790:	05db      	lsls	r3, r3, #23
 800a792:	460c      	mov	r4, r1
 800a794:	4616      	mov	r6, r2
 800a796:	d505      	bpl.n	800a7a4 <__swrite+0x1e>
 800a798:	2302      	movs	r3, #2
 800a79a:	2200      	movs	r2, #0
 800a79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a0:	f000 f868 	bl	800a874 <_lseek_r>
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	4632      	mov	r2, r6
 800a7a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7ac:	81a3      	strh	r3, [r4, #12]
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	463b      	mov	r3, r7
 800a7b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ba:	f000 b817 	b.w	800a7ec <_write_r>

0800a7be <__sseek>:
 800a7be:	b510      	push	{r4, lr}
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c6:	f000 f855 	bl	800a874 <_lseek_r>
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	bf15      	itete	ne
 800a7d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7da:	81a3      	strheq	r3, [r4, #12]
 800a7dc:	bf18      	it	ne
 800a7de:	81a3      	strhne	r3, [r4, #12]
 800a7e0:	bd10      	pop	{r4, pc}

0800a7e2 <__sclose>:
 800a7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e6:	f000 b813 	b.w	800a810 <_close_r>
	...

0800a7ec <_write_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	4608      	mov	r0, r1
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	4d05      	ldr	r5, [pc, #20]	; (800a80c <_write_r+0x20>)
 800a7f8:	602a      	str	r2, [r5, #0]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	f7f7 fc86 	bl	800210c <_write>
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	d102      	bne.n	800a80a <_write_r+0x1e>
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	b103      	cbz	r3, 800a80a <_write_r+0x1e>
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	bd38      	pop	{r3, r4, r5, pc}
 800a80c:	200004b4 	.word	0x200004b4

0800a810 <_close_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	2300      	movs	r3, #0
 800a814:	4d05      	ldr	r5, [pc, #20]	; (800a82c <_close_r+0x1c>)
 800a816:	4604      	mov	r4, r0
 800a818:	4608      	mov	r0, r1
 800a81a:	602b      	str	r3, [r5, #0]
 800a81c:	f7f7 fc92 	bl	8002144 <_close>
 800a820:	1c43      	adds	r3, r0, #1
 800a822:	d102      	bne.n	800a82a <_close_r+0x1a>
 800a824:	682b      	ldr	r3, [r5, #0]
 800a826:	b103      	cbz	r3, 800a82a <_close_r+0x1a>
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	bd38      	pop	{r3, r4, r5, pc}
 800a82c:	200004b4 	.word	0x200004b4

0800a830 <_fstat_r>:
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	2300      	movs	r3, #0
 800a834:	4d06      	ldr	r5, [pc, #24]	; (800a850 <_fstat_r+0x20>)
 800a836:	4604      	mov	r4, r0
 800a838:	4608      	mov	r0, r1
 800a83a:	4611      	mov	r1, r2
 800a83c:	602b      	str	r3, [r5, #0]
 800a83e:	f7f7 fc8c 	bl	800215a <_fstat>
 800a842:	1c43      	adds	r3, r0, #1
 800a844:	d102      	bne.n	800a84c <_fstat_r+0x1c>
 800a846:	682b      	ldr	r3, [r5, #0]
 800a848:	b103      	cbz	r3, 800a84c <_fstat_r+0x1c>
 800a84a:	6023      	str	r3, [r4, #0]
 800a84c:	bd38      	pop	{r3, r4, r5, pc}
 800a84e:	bf00      	nop
 800a850:	200004b4 	.word	0x200004b4

0800a854 <_isatty_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	2300      	movs	r3, #0
 800a858:	4d05      	ldr	r5, [pc, #20]	; (800a870 <_isatty_r+0x1c>)
 800a85a:	4604      	mov	r4, r0
 800a85c:	4608      	mov	r0, r1
 800a85e:	602b      	str	r3, [r5, #0]
 800a860:	f7f7 fc8a 	bl	8002178 <_isatty>
 800a864:	1c43      	adds	r3, r0, #1
 800a866:	d102      	bne.n	800a86e <_isatty_r+0x1a>
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	b103      	cbz	r3, 800a86e <_isatty_r+0x1a>
 800a86c:	6023      	str	r3, [r4, #0]
 800a86e:	bd38      	pop	{r3, r4, r5, pc}
 800a870:	200004b4 	.word	0x200004b4

0800a874 <_lseek_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4604      	mov	r4, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	4611      	mov	r1, r2
 800a87c:	2200      	movs	r2, #0
 800a87e:	4d05      	ldr	r5, [pc, #20]	; (800a894 <_lseek_r+0x20>)
 800a880:	602a      	str	r2, [r5, #0]
 800a882:	461a      	mov	r2, r3
 800a884:	f7f7 fc82 	bl	800218c <_lseek>
 800a888:	1c43      	adds	r3, r0, #1
 800a88a:	d102      	bne.n	800a892 <_lseek_r+0x1e>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	b103      	cbz	r3, 800a892 <_lseek_r+0x1e>
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	200004b4 	.word	0x200004b4

0800a898 <_read_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	4611      	mov	r1, r2
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	4d05      	ldr	r5, [pc, #20]	; (800a8b8 <_read_r+0x20>)
 800a8a4:	602a      	str	r2, [r5, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	f7f7 fc13 	bl	80020d2 <_read>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	d102      	bne.n	800a8b6 <_read_r+0x1e>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	b103      	cbz	r3, 800a8b6 <_read_r+0x1e>
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	200004b4 	.word	0x200004b4

0800a8bc <_init>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	bf00      	nop
 800a8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c2:	bc08      	pop	{r3}
 800a8c4:	469e      	mov	lr, r3
 800a8c6:	4770      	bx	lr

0800a8c8 <_fini>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	bf00      	nop
 800a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ce:	bc08      	pop	{r3}
 800a8d0:	469e      	mov	lr, r3
 800a8d2:	4770      	bx	lr
